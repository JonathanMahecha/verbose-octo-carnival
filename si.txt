package Divisas;

import java.util.List;
import java.util.Random;
import java.util.Set;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;

import library.catalogue.ProjectUrls;
import library.common.Util;
import library.core.BasePageWeb;
import library.reporting.Reporter;
import library.settings.SettingsRun;

public class Page_Divisas extends BasePageWeb {

    private Locators_Divisas loc;
    private String urlFront;
    private String elementoEncontrado; // usado por waitElements legacy
    private static final Random RAND = new Random();

    public Page_Divisas(String navegador) throws Exception {
        super(navegador);
        this.loc = new Locators_Divisas();
        AjaxElementLocatorFactory factory = new AjaxElementLocatorFactory(getDriver(), 0);
        PageFactory.initElements(factory, this.loc);
        ProjectUrls datosUrl = new ProjectUrls();
        this.urlFront = datosUrl.getSiteUrl(SettingsRun.getGlobalData("env.front.pyme"), "PYMES FRONT");
    }

    public void mainfront(String[] datosLoginGlob) throws Exception {
        String validate = loginFront(datosLoginGlob);
        if (!validate.isEmpty()) {
            SettingsRun.exitTestIteration();
        }

        Set<String> handles = getDriver().getWindowHandles();
        if (!handles.isEmpty()) {
            String portalWindow = handles.iterator().next();
            getDriver().switchTo().window(portalWindow);
        }

        validate = seleccionEmpresa(datosLoginGlob);
        if (!validate.isEmpty()) {
            SettingsRun.exitTestIteration();
        }

        validate = parametrosGenerales(datosLoginGlob);
        if (!validate.isEmpty()) {
            SettingsRun.exitTestIteration();
        }

        crearTransaccion(datosLoginGlob);
    }

    private String loginFront(String[] getLoginData) throws Exception {
        final String numCliEmp = (getLoginData != null && getLoginData.length > 0 && getLoginData[0] != null)
                ? getLoginData[0] : "";
        final String tipoDoc = (getLoginData != null && getLoginData.length > 1 && getLoginData[1] != null)
                ? getLoginData[1] : "";
        final String numDoc = (getLoginData != null && getLoginData.length > 2 && getLoginData[2] != null)
                ? getLoginData[2] : "";
        final String clave = (getLoginData != null && getLoginData.length > 3 && getLoginData[3] != null)
                ? getLoginData[3] : "";
        final String tipoTok = (getLoginData != null && getLoginData.length > 5 && getLoginData[5] != null)
                ? getLoginData[5] : "";

        maximizeBrowser();
        navigate(urlFront);

        if (!waitForElement(loc.numeroClienteLogin, 5,
                "Elemento no encontrado: @FindBy(xpath=\"//div[@id='divNumerClienteEmpresarial']/input\")")) {
            return "Error";
        }

        write(loc.numeroClienteLogin, numCliEmp);
        selectListItem(loc.tipoIdLogin, tipoDoc);
        write(loc.NumeroIdLogin, numDoc);
        click(loc.botonSubmit);

        if (!waitForElement(loc.clavePersonLogin, 5,
                "Elemento no encontrado: @FindBy(xpath=\"//div[@id='divClavePersonal']/input\")")) {
            return "Error";
        }

        if (!isDisplayed(loc.clavePersonLogin)) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "La consulta no retorno registros");
            return "Error";
        }

        write(loc.clavePersonLogin, clave);
        write(loc.tokePersonLogin, tipoTok);
        click(loc.botonSubmit);

        Set<String> handles = getDriver().getWindowHandles();
        if (handles.size() == 1) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "No se abrio la segunda pestaña");
            return "Error";
        }

        getDriver().close();
        return "";
    }

    private String seleccionEmpresa(String[] getLoginData) throws Exception {
        final String nombreEmpresa = (getLoginData != null && getLoginData.length > 30 && getLoginData[30] != null)
                ? getLoginData[30] : "";

        if (!waitForElement(loc.listaEmpresas, 10,
                "Elemento no encontrado: @FindBy(xpath=\"//select[@id='dropMasterEmpresa']\")")) {
            return "Error";
        }

        selectListContainsItems(loc.listaEmpresas, nombreEmpresa);

        if (!waitForElement(loc.textResumProductos, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//td[contains(text(), 'Resumen de productos')]\")")) {
            return "Error";
        }
        return "";
    }

    private String parametrosGenerales(String[] getLoginData) {
        Util.wait(2);
        mouseOver(loc.adminisDespleg);
        Util.wait(2);
        mouseOver(loc.adminisPortal);
        Util.wait(2);
        click(loc.parametGene);
        Util.wait(1);
        click(loc.botonGuarCambios);
        if (!waitForElement(loc.textActExit, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//span[contains(text(), 'Actualización exitosa')]\")")) {
            return "Error";
        }
        return "";
    }

    private String crearTransaccion(String[] getLoginData) {
        Util.wait(2);
        mouseOver(loc.pagosTrsDespleg);
        Util.wait(2);
        click(loc.crearTransc);
        if (!waitForElement(loc.transfIntern, 10,
                "Elemento no encontrado: @FindBy(xpath=\"//a[contains(text(), 'Transferencias Internacionales')]/..\")")) {
            return "Error";
        }
        click(loc.transfIntern);
        changeFrame(loc.iframeCuerpoDivisas);

        String accion = (getLoginData != null && getLoginData.length > 31 && getLoginData[31] != null)
                ? getLoginData[31] : "";

        switch (accion) {
        case "Enviar hacia el exterior":
            enviarAlExte(getLoginData);
            break;
        case "Recibir del exterior":
            recibirAlExte();
            break;
        case "Aprobaciones":
            aprobaciones();
            break;
        case "Consultas":
            consultas();
            break;
        case "Documentos y Formularios":
            docYForm();
            break;
        default:
            break;
        }
        return "";
    }

    private String enviarAlExte(String[] getLoginData) {
        if (!waitForElement(loc.enviarExt, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//li[contains(text(), 'Enviar hacia el exterior')]\")")) {
            return "Error";
        }
        click(loc.enviarExt);
        Util.wait(2);

        if (isDisplayed(loc.mensajeError)) {
            String textoError = getText(loc.textoError);
            Util.wait(1);
            click(loc.botonAceptar);
            Reporter.reportEvent(Reporter.MIC_INFO, textoError);
            waitClickable(loc.enviarExt, 10);
            click(loc.enviarExt);
        }

        waitClickable(loc.botonAceptar, 10);
        if (!waitForElement(loc.botonAceptar, 5,
                "Elemento no encontrado: @FindBy(xpath=\"//button[contains(text(), 'Aceptar')]\")")) {
            return "Error";
        }
        click(loc.botonAceptar);

        String tipoCuenta = "";
        String numeroCuenta4 = "";
        if (getLoginData != null && getLoginData.length > 32 && getLoginData[32] != null)
            tipoCuenta = getLoginData[32];
        if (getLoginData != null && getLoginData.length > 33 && getLoginData[33] != null)
            numeroCuenta4 = getLoginData[33];
        numeroCuenta4 = (numeroCuenta4.length() > 4) ? numeroCuenta4.substring(numeroCuenta4.length() - 4)
                : numeroCuenta4;

        if (!seleccionarCuenta(getDriver(), tipoCuenta, numeroCuenta4)) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "No se pudo seleccionar la cuenta: " + tipoCuenta + " " + numeroCuenta4);
            return "Error";
        }

        click(loc.botonSiguien);
        waitClickable(loc.botonSiguien, 10);

        String moneda = "";
        if (getLoginData != null && getLoginData.length > 34 && getLoginData[34] != null)
            moneda = getLoginData[34];
        moneda = moneda.length() > 3 ? moneda.substring(0, 3) : moneda;
        Util.wait(2);
        waitClickable(loc.listaMoneda, 10);
        selectListItem(loc.listaMoneda, moneda);

        clearInputbox(loc.campoMonto);
        if (getLoginData != null && getLoginData.length > 35 && getLoginData[35] != null)
            write(loc.campoMonto, getLoginData[35]);
        if (getLoginData != null && getLoginData.length > 36 && getLoginData[36] != null)
            selectListItem(loc.listaConceptoCambiario, getLoginData[36]);

        String valor1Str = (getLoginData != null && getLoginData.length > 38 && getLoginData[38] != null)
                ? getLoginData[38] : "";
        String banderaSegundoNumeral = (getLoginData != null && getLoginData.length > 39 && getLoginData[39] != null)
                ? getLoginData[39] : "";

        if (!banderaSegundoNumeral.trim().isEmpty()
                && (getLoginData.length <= 40 || getLoginData[40] == null || getLoginData[40].trim().isEmpty())) {
            try {
                int mnto = Integer.parseInt((getLoginData != null && getLoginData.length > 35 && getLoginData[35] != null)
                        ? getLoginData[35] : "0");
                int valr1 = Integer.parseInt(valor1Str.isEmpty() ? "0" : valor1Str);
                int calc = mnto - valr1;
                if (getLoginData.length > 40) {
                    getLoginData[40] = String.valueOf(calc);
                }
            } catch (NumberFormatException e) {
                Reporter.reportEvent(Reporter.MIC_INFO, "No se pudo calcular el numeral secundario, datos no numéricos");
            }
        }

        waitClickable(loc.numeralCambiario1, 10);
        if (getLoginData != null && getLoginData.length > 37 && getLoginData[37] != null)
            selectListItem(loc.numeralCambiario1, getLoginData[37]);

        if (!banderaSegundoNumeral.trim().isEmpty()) {
            click(loc.adicionarNumCamb);
            waitClickable(loc.numeralCambiario2, 10);
            if (getLoginData != null && getLoginData.length > 39 && getLoginData[39] != null)
                selectListItem(loc.numeralCambiario2, getLoginData[39]);
            if (!waitForElement(loc.valor1, 20,
                    "Elemento no encontrado: @FindBy(xpath=\"//input[@id='Numerales_valor_0']\")")) {
                return "Error";
            }
            write(loc.valor1, valor1Str);
            if (getLoginData != null && getLoginData.length > 40 && getLoginData[40] != null)
                write(loc.valor2, getLoginData[40]);
        }

        if (getLoginData != null && getLoginData.length > 41 && "Nuevo envío".equals(getLoginData[41])) {
            click(loc.tipoEnvioNuevo);
        } else {
            click(loc.tipoEnvioFrecuente);
        }

        click(loc.botonSiguien);
        if (!waitForElement(loc.nombreBenefi, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//input[@id='NombreBeneficiario']\")")) {
            return "Error";
        }

        if (getLoginData != null && getLoginData.length > 42 && getLoginData[42] != null)
            write(loc.nombreBenefi, getLoginData[42]);
        if (getLoginData != null && getLoginData.length > 43 && getLoginData[43] != null)
            write(loc.paisBenefi, getLoginData[43]);
        Util.wait(1);
        if (loc.listaPais.isDisplayed()) {
            click(loc.listaPais);
        }
        if (getLoginData != null && getLoginData.length > 44 && getLoginData[44] != null)
            write(loc.ciudadBene, getLoginData[44]);

        // generar direccion inline (antes generarDireccion())
        int a = RAND.nextInt(200) + 1;
        int b = RAND.nextInt(100);
        int c = RAND.nextInt(100);
        write(loc.direccionBene, "KR " + a + " " + String.format("%02d", b) + " " + String.format("%02d", c));

        if (getLoginData != null && getLoginData.length > 45 && getLoginData[45] != null)
            write(loc.ibanCabeBene, getLoginData[45]);
        if (getLoginData != null && getLoginData.length > 46 && getLoginData[46] != null)
            selectListItem(loc.tipoInfoBene, getLoginData[46]);
        if (getLoginData != null && getLoginData.length > 47 && getLoginData[47] != null)
            write(loc.InfoBene, getLoginData[47]);

        click(loc.botonSiguien);
        waitClickable(loc.tipoCodBanBene, 10);
        if (getLoginData != null && getLoginData.length > 48 && getLoginData[48] != null)
            selectListItem(loc.tipoCodBanBene, getLoginData[48]);
        if (getLoginData != null && getLoginData.length > 49 && getLoginData[49] != null)
            write(loc.numCodBene, getLoginData[49]);
        Util.wait(1);
        if (loc.listaBenef.isDisplayed()) {
            click(loc.listaBenef);
        }

        if (getLoginData != null && getLoginData.length > 51 && getLoginData[51] != null
                && !getLoginData[51].trim().isEmpty()) {
            click(loc.tienBancoInterm);
            waitClickable(loc.numCodBene, 10);
            if (getLoginData.length > 50 && getLoginData[50] != null)
                selectListItem(loc.tipoInteInfoBene, getLoginData[50]);
            write(loc.numCodInterBene, getLoginData[51]);
            Util.wait(1);
            if (loc.listaBenefInterme.isDisplayed()) {
                click(loc.listaBenefInterme);
            }
        }

        click(loc.botonSiguien);
        Util.wait(1);
        return "";
    }

    private String recibirAlExte() {
        if (!waitForElement(loc.recibirExt, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//li[contains(text(), 'Enviar hacia el exterior')]\")")) {
            return "Error";
        }
        click(loc.recibirExt);
        return "";
    }

    private String aprobaciones() {
        if (!waitForElement(loc.aprobaciones, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//li[contains(text(), 'Enviar hacia el exterior')]\")")) {
            return "Error";
        }
        click(loc.aprobaciones);
        return "";
    }

    private String consultas() {
        if (!waitForElement(loc.consultas, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//li[contains(text(), 'Enviar hacia el exterior')]\")")) {
            return "Error";
        }
        click(loc.consultas);
        return "";
    }

    private String docYForm() {
        if (!waitForElement(loc.DocumYForm, 20,
                "Elemento no encontrado: @FindBy(xpath=\"//li[contains(text(), 'Enviar hacia el exterior')]\")")) {
            return "Error";
        }
        click(loc.DocumYForm);
        return "";
    }

    public boolean seleccionarCuenta(WebDriver driver, String tipoCuenta, String numeroCuenta) {
        if (driver == null || tipoCuenta == null || numeroCuenta == null)
            return false;

        try {
            waitElement(By.xpath("//table[contains(@class,'table')]"));

            String xpathFila = "//table[contains(@class,'table')]//tbody//tr[" + "td[contains(normalize-space(.),'"
                    + tipoCuenta + "')] and " + "td[contains(normalize-space(.),'" + numeroCuenta + "')]" + "]";

            List<WebElement> filas = driver.findElements(By.xpath(xpathFila));
            if (filas == null || filas.isEmpty()) {
                String digitsOnly = numeroCuenta.replaceAll("\\D", "");
                if (!digitsOnly.isEmpty()) {
                    int len = digitsOnly.length();
                    String altXpath = "//table[contains(@class,'table')]//tbody//tr[" + "td[contains(normalize-space(.),'"
                            + tipoCuenta + "')] and td[substring(normalize-space(.), string-length(normalize-space(.)) - "
                            + (len - 1) + ") = '" + digitsOnly + "']" + "]";
                    filas = driver.findElements(By.xpath(altXpath));
                }
            }

            if (filas == null || filas.isEmpty())
                return false;

            for (WebElement fila : filas) {
                try {
                    List<WebElement> radios = fila.findElements(
                            By.xpath(".//input[@name='ProductoSeleccionado' and (@type='radio' or not(@type))]"));
                    if (radios == null || radios.isEmpty())
                        continue;

                    WebElement radio = radios.get(0);

                    ((JavascriptExecutor) driver)
                            .executeScript("arguments[0].scrollIntoView({block: 'center', inline: 'nearest'});",
                                    radio);

                    if (!radio.isEnabled())
                        continue;

                    if (!radio.isSelected()) {
                        try {
                            radio.click();
                        } catch (Exception clickEx) {
                            ((JavascriptExecutor) driver).executeScript("arguments[0].click();", radio);
                        }
                    }
                    return true;

                } catch (Exception ignored) {
                    continue;
                }
            }

            return false;
        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_INFO, "Exception en seleccionarCuenta: " + e.getMessage());
            return false;
        }
    }

    private boolean waitForElement(WebElement locator, int seconds, String notFoundMessage) {
        try {
            this.elementoEncontrado = waitElements(seconds, locator);
        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Excepción al esperar elemento: " + e.getMessage());
            Reporter.write("Excepción durante waitElements: " + e.toString());
            return false;
        }

        if (this.elementoEncontrado != null) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Un elemento en la consulta no se encontro");
            Reporter.write(notFoundMessage);
            return false;
        }
        return true;
    }
}
