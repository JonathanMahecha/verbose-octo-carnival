package Divisas;

import javax.swing.JOptionPane;

import library.core.BaseTestNG_XBloque;
import library.data.DataDriven;
import library.reporting.Reporter;
import library.settings.SettingsRun;

public class Launcher_Divisas extends BaseTestNG_XBloque {

    Controller_Divisas controlador = new Controller_Divisas();
    static DataDriven datos;

    @Override
    public void launchData() {
        this.setTotalBloques(3, "Trasa", "Global", "Comprobantes");
        SettingsRun.ARRAY_DATA_PARAMS = new String[] { "Tipo Cliente", "Cliente Empresarial", "Tipo Identificación",
                "Id usuario", "Clave personal o CVE", "Tipo Token", "Semilla / Valor Estático / Celular",
                "Nombre empresa", "Servicio", "Informes", "Tipo de cuenta", "Número de cuenta", "Moneda",
                "Monto a transferir", "Concepto transferencia", "Primer Numeral cambiario",
                "Valor Primer Numeral cambiario", "Segundo Numeral cambiario", "Valor Segundo Numeral cambiario",
                "Tipo de Envio", "Nombre del beneficiario en el exterior",
                "Seleccione el país de destino de la transferencia",
                "Ingrese ciudad y país donde está ubicado el beneficiario", "Ingrese número de cuenta, IBAN o CLABE",
                "Tipo Información para el beneficiario", "Información para el beneficiario",
                "Seleccione tipo de código", "Ingrese número de código", "Seleccione segundo tipo de código",
                "Ingrese segundo número de código" };
        SettingsRun.DEFAULT_HEADER = 2;
    }

    @Override
    public void initializeControllerAndConfiguration() throws Exception {
        this.setController(controlador);
        SettingsRun.getTestData().addParametersNotExist("Siguiente bloque");
    }

    @Override
    public void doingTest() throws Exception {
        datos = SettingsRun.getTestData();
        validarData();
        controlador.CargarDatos();
        String tipoCliente = datos.getParameter("Tipo Cliente");
        if (tipoCliente.equalsIgnoreCase("Pyme")) {
            controlador.loginPymeFront();
        } else {
            controlador.loginFrontEmpresarial();
        }
        Reporter.reportEvent(Reporter.MIC_PASS, "Se completo el proceso Trasaccional.");
    }

    public void doingTest2() throws Exception {
        Reporter.reportEvent(Reporter.MIC_INFO, "Proceso en Global");
        String empresa = SettingsRun.getTestData().getParameter("Siguiente bloque");
        if ("Falla".equalsIgnoreCase(empresa)) {
            SettingsRun.exitTestIteration();
        }

        String[] opciones = { "Completado", "No Completado" };
        int seleccion = JOptionPane.showOptionDialog(null, "Realizar proceso de Global:", "Validación",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);

        String resultado = (seleccion == 0) ? "Completado" : "No completado";
        JOptionPane.showMessageDialog(null, "Proceso " + resultado);

        if ("No completado".equalsIgnoreCase(resultado)) {
            SettingsRun.exitTest("Proceso Global no completado, Fin de la ejecución.");
        }

        Reporter.reportEvent(Reporter.MIC_PASS, "Se completo el proceso en global.");
        SettingsRun.exitCurrentBloque();
    }

    public void doingTest3() throws Exception {
        String empresa = SettingsRun.getTestData().getParameter("Siguiente bloque");
        if ("Falla".equalsIgnoreCase(empresa)) {
            SettingsRun.exitTestIteration();
        }

        String informes = safeGet(datos, "Informes");
        if (informes.equals("SI")) {
            String tipoCliente = datos.getParameter("Tipo Cliente");
            if (tipoCliente.equalsIgnoreCase("Pyme")) {
                controlador.loginMiddlePyme();
            } else {
                controlador.loginMiddleEmpresarial();
            }
        }
    }

    public void validarData() throws Exception {
        boolean hayError = false;

        String[] reqLogin = { "Tipo Cliente", "Cliente Empresarial", "Tipo Identificación", "Id usuario",
                "Clave personal o CVE", "Tipo Token", "Semilla / Valor Estático / Celular" };

        String[] reqEmpresa = { "Nombre empresa" };

        String[] reqEjec = { "Escenario de prueba, Servicio", "Tipo Prueba" };

        String[] reqProdOri = { "Tipo de cuenta", "Número de cuenta" };

        String[] reqProdDes = { "Tipo de cuenta destino", "Número de cuenta destino" };

        String[] reqValor = { "Moneda", "Monto a transferir", "Concepto transferencia",
                "Primer Numeral cambiario", "Valor Primer Numeral cambiario", "Segundo Numeral cambiario",
                "Valor Segundo Numeral cambiario", "Tipo de Envio" };

        String[] reqBeniDato = { "Nombre del beneficiario en el exterior",
                "Seleccione el país de destino de la transferencia",
                "Ingrese ciudad y país donde está ubicado el beneficiario", "Ingrese número de cuenta, IBAN o CLABE",
                "Tipo Información para el beneficiario", "Información para el beneficiario" };

        String[] reqBeniBanco = { "Seleccione tipo de código", "Ingrese número de código",
                "Seleccione segundo tipo de código", "Ingrese segundo número de código" };

        // grupos que salen inmediatamente si falta dato
        comprobarYSalir(reqLogin, "Los datos del Login son erroneos: ");
        comprobarYSalir(reqEmpresa, "El nombre de la empresa esta vacio porfavor revisar: ");

        // grupos que acumulan errores y se reportan al final
        if (comprobarYAcumular(reqEjec, "Los datos del detalle de la ejecucion estan vacios o erroneo porfavor revisar:"))
            hayError = true;

        String Serv = safeGet(datos, "Servicio");
        if (Serv.equals("Enviar hacia el exterior")) {
            if (comprobarYAcumular(reqProdOri, "Los datos del producto origen estan vacios"))
                hayError = true;
            if (comprobarYAcumular(reqProdDes, "Los datos del producto destino estan vacios"))
                hayError = true;
            if (comprobarYAcumular(reqValor, "Los datos de valor transaccional estan vacios"))
                hayError = true;
            if (comprobarYAcumular(reqBeniDato, "Los datos del producto origen estan vacios"))
                hayError = true;
            if (comprobarYAcumular(reqBeniBanco, "Los datos de banco beneficiario estan vacios"))
                hayError = true;
        } else if (Serv.equals("Consultas")) {
            if (comprobarYAcumular(reqBeniDato, "Los datos del producto origen estan vacios"))
                hayError = true;
        }

        if (hayError) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC, "Se finaliza la iteracion por errores de data.");
            SettingsRun.exitTestIteration();
        }
    }

    /* ---------------------- Helpers cortos en español ---------------------- */

    /**
     * Valida claves y si falta alguna -> reporta MIC_NOEXEC y sale inmediatamente con exitTestIteration()
     */
    private void comprobarYSalir(String[] claves, String prefijo) {
        for (String k : claves) {
            String v = safeGet(datos, k);
            if (v == null || v.trim().isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_NOEXEC, prefijo + k);
                SettingsRun.exitTestIteration();
            }
        }
    }

    /**
     * Valida claves y si falta alguna -> reporta MIC_NOEXEC y devuelve true para indicar error acumulado.
     * No sale inmediatamente; la salida se realiza fuera por quien llame al helper.
     */
    private boolean comprobarYAcumular(String[] claves, String prefijo) {
        boolean fallo = false;
        for (String k : claves) {
            String v = safeGet(datos, k);
            if (v == null || v.trim().isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_NOEXEC, prefijo + k);
                fallo = true;
            }
        }
        return fallo;
    }
}
