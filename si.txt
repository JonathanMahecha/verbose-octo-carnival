package Front;

import java.util.Random;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;

import org.openqa.selenium.By;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.pagefactory.AjaxElementLocatorFactory;

import Divisas.Page_Divisas;
import library.catalogue.ProjectUrls;
import library.common.Util;
import library.reporting.Evidence;
import library.reporting.Reporter;
import library.settings.SettingsRun;

public class FrontDivisas {

    private final Page_Divisas parent;
    private final Locators_Divisas_Front loc;
    private final String urlFront;
    private static final Random RAND = new Random();

    public FrontDivisas(Page_Divisas parent) throws Exception {
        this.parent = parent;
        this.loc = new Locators_Divisas_Front();
        AjaxElementLocatorFactory factory = new AjaxElementLocatorFactory(parent.getDriver(), 0);
        PageFactory.initElements(factory, this.loc);
        this.urlFront = loadFrontUrl();
    }

    private String loadFrontUrl() throws Exception {
        ProjectUrls datosUrl = new ProjectUrls();
        return datosUrl.getSiteUrl(SettingsRun.getGlobalData("env.front.pyme"), "PYMES FRONT");
    }

    public void mainFront(String[] datosLoginGlob) throws Exception {
        String validate = loginFront(datosLoginGlob);
        if (!validate.isEmpty()) {
            String datos = "Falla";
            SettingsRun.getTestData().setParameter("Siguiente bloque", datos);
            SettingsRun.exitTestIteration();
        }

        Set<String> handles = parent.getDriver().getWindowHandles();
        List<String> ventanas = new ArrayList<>(handles);

        if (ventanas.size() >= 2) {
            String primera = ventanas.get(0);
            String segundo = ventanas.get(1);
            if (!SettingsRun.esIteracionInicial()) {
                parent.getDriver().switchTo().window(primera);
                parent.getDriver().close();
            }
            parent.getDriver().switchTo().window(segundo);
        } else {
            Reporter.reportEvent(Reporter.MIC_FAIL, "No se abrio la segunda pestaña");
            String datos = "Falla";
            SettingsRun.getTestData().setParameter("Siguiente bloque", datos);
            SettingsRun.exitTestIteration();
        }

        validate = seleccionEmpresa(datosLoginGlob);
        if (!validate.isEmpty()) {
            String datos = "Falla";
            SettingsRun.getTestData().setParameter("Siguiente bloque", datos);
            SettingsRun.exitTestIteration();
        }

        validate = parametrosGenerales(datosLoginGlob);
        if (!validate.isEmpty()) {
            String datos = "Falla";
            SettingsRun.getTestData().setParameter("Siguiente bloque", datos);
            SettingsRun.exitTestIteration();
        }

        validate = crearTransaccion(datosLoginGlob);
        if (!validate.isEmpty()) {
            String datos = "Falla";
            SettingsRun.getTestData().setParameter("Siguiente bloque", datos);
            SettingsRun.exitTestIteration();
        }
    }

    private String loginFront(String[] getLoginData) throws Exception {
        final String numCliEmp = getLoginData[0];
        final String tipoDoc = getLoginData[1];
        final String numDoc = getLoginData[2];
        final String clave = getLoginData[3];
        final String tipoTok = getLoginData[5];

        parent.maximizeBrowser();
        parent.navigate(urlFront);

        if (!parent.waitForElement(loc.numeroClienteLogin, 5, "loc.numeroClienteLogin"))
            return "Error";

        parent.write(loc.numeroClienteLogin, numCliEmp);
        parent.selectListItem(loc.tipoIdLogin, tipoDoc);
        parent.write(loc.NumeroIdLogin, numDoc);
        parent.click(loc.botonSubmit);
        Evidence.save("Login", parent);

        if (!parent.waitForElement(loc.clavePersonLogin, 5, "loc.clavePersonLogin"))
            return "Error";

        if (!parent.isDisplayed(loc.clavePersonLogin)) {
            Evidence.save("La consulta no retorno registros", parent);
            Reporter.reportEvent(Reporter.MIC_FAIL, "La consulta no retorno registros");
            return "Error";
        }

        parent.write(loc.clavePersonLogin, clave);
        parent.write(loc.tokePersonLogin, tipoTok);
        if (!parent.waitForElement(loc.botonSubmit, 10, "loc.botonSubmit"))
            return "Error";
        parent.click(loc.botonSubmit);

        if (parent.isDisplayed(loc.lBMensaje)) {
            Evidence.save("Login falla", parent);
            Reporter.reportEvent(Reporter.MIC_FAIL, parent.getText(loc.lBMensaje));
            parent.click(loc.botonAceptar2);
            return "Error";
        } else {
            Evidence.save("Login", parent);
        }

        return "";
    }

    private String seleccionEmpresa(String[] getLoginData) throws Exception {
        final String nombreEmpresa = getLoginData[30];

        if (!parent.waitForElement(loc.listaEmpresas, 10, "loc.listaEmpresas"))
            return "Error";

        String empresaNo = parent.selectListContainsItems(loc.listaEmpresas, nombreEmpresa);
        if (empresaNo != null) {
            Reporter.reportEvent(Reporter.MIC_FAIL, empresaNo);
            return "Error";
        }
        Evidence.save("Seleccion empresa: ", parent);

        if (!parent.waitForElement(loc.textResumProductos, 20, "loc.textResumProductos"))
            return "Error";
        return "";
    }

    private String parametrosGenerales(String[] getLoginData) {
        Util.wait(2);
        parent.mouseOver(loc.adminisDespleg);
        parent.waitClickable(loc.adminisPortal, 5);
        parent.mouseOver(loc.adminisPortal);
        parent.waitClickable(loc.parametGene, 5);
        parent.click(loc.parametGene);
        Evidence.save("Parametros generales: ", parent);
        parent.waitClickable(loc.botonGuarCambios, 5);
        parent.click(loc.botonGuarCambios);
        if (!parent.waitForElement(loc.textActExit, 20, "loc.textActExit"))
            return "Error";
        return "";
    }

    private String crearTransaccion(String[] getLoginData) throws Exception {
        Util.wait(3);
        if (!parent.isDisplayed(loc.pagosTrsDespleg)) {
            parent.mouseOver(loc.pagosTrsDesplegPost);
        } else {
            parent.mouseOver(loc.pagosTrsDespleg);
        }
        if (!parent.waitForElement(loc.crearTransc, 10, "loc.crearTransc"))
            return "Error";
        parent.click(loc.crearTransc);

        if (!parent.waitForElement(loc.transfIntern, 10, "loc.transfIntern"))
            return "Error";
        parent.click(loc.transfIntern);

        String opcion = getLoginData[31];
        if ("Enviar hacia el exterior".equals(opcion)) {
            if (getLoginData[52].equals("Fallido")) {
                return enviarAlExteFall(getLoginData);
            } else {
                return enviarAlExte(getLoginData);
            }
        } else if ("Recibir del exterior".equals(opcion)) {
            return recibirAlExte();
        } else if ("Aprobaciones".equals(opcion)) {
            return aprobaciones();
        } else if ("Consultas".equals(opcion)) {
            return consultas();
        } else if ("Documentos y Formularios".equals(opcion)) {
            return docYForm();
        } else {
            return "";
        }
    }

    /* ---------------------- Flujos principales (ahora usando helpers) ---------------------- */

    private String enviarAlExte(String[] getLoginData) throws Exception {
        // abrir flujo y manejar mensajeInicial (espera 2)
        if (!openEnviarExt(2)) return "Error";

        // confirmar y seleccionar cuenta
        if (!confirmAndSelectAccount(getLoginData)) return "Error";

        Evidence.save("Enviar al exterior: ", parent);
        parent.click(loc.botonSiguien);
        parent.waitClickable(loc.botonSiguien, 10);

        // moneda y montos (clear + monto desde getLoginData[35])
        if (!fillCurrencyAndNumerals(getLoginData, true, getLoginData[35], true)) return "Error";

        // validar max campos
        if (!validateMaxFields()) return "Error";

        // checks numericos (no-fallido)
        if (!numericFieldChecks(false)) return "Error";

        // procesar "Nuevo envío" (rama normal)
        String r = processNuevoEnvio(getLoginData, false);
        if (!"".equals(r)) return r;

        return "";
    }

    private String enviarAlExteFall(String[] getLoginData) throws Exception {
        // abrir flujo y manejar mensajeInicial (espera 4)
        if (!openEnviarExt(4)) return "Error";

        // confirmar y seleccionar cuenta
        if (!confirmAndSelectAccount(getLoginData)) return "Error";

        Evidence.save("Enviar al exterior: ", parent);
        parent.click(loc.botonSiguien);
        parent.waitClickable(loc.botonSiguien, 10);

        // moneda y montos (escribe 999999999 explícito)
        if (!fillCurrencyAndNumerals(getLoginData, false, "999999999", false)) return "Error";

        // validar max campos
        if (!validateMaxFields()) return "Error";

        // checks numericos (fallido)
        if (!numericFieldChecks(true)) return "Error";

        // procesar "Nuevo envío" (rama fallido con validaciones extra)
        String r = processNuevoEnvio(getLoginData, true);
        if (!"".equals(r)) return r;

        return "";
    }

    private String recibirAlExte() {
        if (!parent.waitForElement(loc.recibirExt, 20, "loc.recibirExt"))
            return "Error";
        parent.click(loc.recibirExt);
        return "";
    }

    private String aprobaciones() {
        if (!parent.waitForElement(loc.aprobaciones, 20, "loc.aprobaciones"))
            return "Error";
        parent.click(loc.aprobaciones);
        return "";
    }

    private String consultas() {
        if (!parent.waitForElement(loc.consultas, 20, "loc.consultas"))
            return "Error";
        parent.click(loc.consultas);
        return "";
    }

    private String docYForm() {
        if (!parent.waitForElement(loc.DocumYForm, 20, "loc.DocumYForm"))
            return "Error";
        parent.click(loc.DocumYForm);
        return "";
    }

    /* ---------------------- Helpers privados (encapsulan la lógica repetida) ---------------------- */

    // Abre el flujo "Enviar al exterior", comprueba inactividad y maneja mensajeError inicial (reintentos).
    private boolean openEnviarExt(int waitAfterClickSeconds) throws Exception {
        if (!parent.switchToFrameDivisas()) return false;
        Util.wait(2);

        if (parent.isDisplayed(loc.txtInactividad)) {
            Reporter.reportEvent(Reporter.MIC_FAIL, parent.getText(loc.txtInactividad));
            return false;
        }

        if (!parent.waitForElement(loc.enviarExt, 20, "loc.enviarExt")) return false;
        parent.click(loc.enviarExt);
        Util.wait(waitAfterClickSeconds);

        Evidence.save("Enviar al exterior: ", parent);

        if (parent.isDisplayed(loc.mensajeError)) {
            String textoError = null;
            for (int i = 0; i < 2; i++) {
                textoError = parent.getText(loc.textoError);
                Util.wait(1);
                parent.click(loc.botonAceptar);
                Reporter.reportEvent(Reporter.MIC_INFO, textoError);
                Evidence.save("Enviar al exterior: ", parent);
                parent.waitClickable(loc.enviarExt, 10);
                Evidence.save("Enviar al exterior: ", parent);
                parent.click(loc.enviarExt);
            }
            if (textoError != null && textoError.contains(
                    "¡Recuerde...! Este servicio está disponible los días hábiles entre las 8:00 a.m. y la 1:00 p.m.")) {
                Reporter.reportEvent(Reporter.MIC_FAIL, textoError);
                return false;
            }
        }

        return true;
    }

    // Confirma el posible modal/popup y selecciona la cuenta (ajusta getLoginData[33])
    private boolean confirmAndSelectAccount(String[] getLoginData) throws Exception {
        if (!parent.waitForElementInteractable(loc.botonAceptar, 10, "loc.botonAceptar")) return false;
        if (loc.botonAceptar.isDisplayed()) {
            Util.wait(1);
            parent.click(loc.botonAceptar);
        }

        getLoginData[33] = Util.right(getLoginData[33], 4);
        if (!parent.seleccionarCuenta(parent.getDriver(), getLoginData[32], getLoginData[33])) {
            return false;
        }
        return true;
    }

    /**
     * Llena moneda, monto y numerales condicionales.
     * - clearMonto: si true ejecuta clearInputbox antes de escribir monto
     * - montoToWrite: valor que se escribe en campoMonto
     * - compute40: si true calcula getLoginData[40] = monto - getLoginData[38] cuando exista numeral2
     */
    private boolean fillCurrencyAndNumerals(String[] getLoginData, boolean clearMonto, String montoToWrite,
            boolean compute40) throws Exception {

        getLoginData[34] = Util.left(getLoginData[34], 3);
        parent.waitClickable(loc.listaMoneda, 10);
        parent.selectListItem(loc.listaMoneda, getLoginData[34]);

        if (clearMonto) {
            parent.clearInputbox(loc.campoMonto);
        }
        parent.write(loc.campoMonto, montoToWrite);
        parent.selectListItem(loc.listaConceptoCambiario, getLoginData[36]);

        String val39 = getLoginData[39];
        if (compute40 && val39 != null && !val39.isEmpty()) {
            try {
                int mnto = Integer.parseInt(montoToWrite);
                int valr1 = Integer.parseInt(getLoginData[38]);
                int calc = mnto - valr1;
                getLoginData[40] = String.valueOf(calc);
            } catch (Exception e) {
                // mantener funcionalidad: no fallar si parsea mal
            }
        }

        parent.waitClickable(loc.numeralCambiario1, 10);
        parent.selectListItem(loc.numeralCambiario1, getLoginData[37]);

        if (val39 != null && !val39.isEmpty()) {
            if (!parent.waitForElement(loc.adicionarNumCamb, 10, "loc.adicionarNumCamb")) return false;
            parent.click(loc.adicionarNumCamb);
            parent.waitClickable(loc.numeralCambiario2, 10);
            parent.selectListItem(loc.numeralCambiario2, getLoginData[39]);
            if (!parent.waitForElement(loc.valor1, 20, "loc.valor1")) return false;
            parent.write(loc.valor1, getLoginData[38]);
            parent.write(loc.valor2, getLoginData[40]);
        }

        return true;
    }

    // Valida el flow "prueba maximo de campos" (clic tipoEnvioNuevo -> siguiente -> espera mensajeError)
    private boolean validateMaxFields() {
        parent.click(loc.tipoEnvioNuevo);
        Evidence.save("Prueba maximo de campos: ", parent);
        parent.click(loc.botonSiguien);
        Util.wait(1);

        if (loc.mensajeError.isDisplayed()) {
            Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
            Util.wait(1);
            Evidence.save("Prueba maximo de campos: ", parent);
            parent.click(loc.botonAceptar);
            return true;
        } else {
            Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo prosiguio apesar de los campos invalidos.");
            return false;
        }
    }

    /**
     * Valida campos numéricos: escribe monto 80000, intenta escribir texto en campos valor1/valor2
     * y luego escribe los valores numéricos correctos. isFallido habilita clicks adicionales usados en ese flujo.
     */
    private boolean numericFieldChecks(boolean isFallido) throws Exception {
        if (!parent.waitForElement(loc.campoMonto, 20, "loc.valor1")) return false;
        parent.write(loc.campoMonto, "80000");
        int mnto = 80000;
        int valr1 = mnto / 2;
        int calc = mnto - valr1;
        String valr1St = String.valueOf(valr1);
        String calcSt = String.valueOf(calc);

        parent.mouseOver(loc.valor1);
        parent.mouseClick();
        if (loc.botonAceptar.isDisplayed()) {
            parent.click(loc.botonAceptar);
        }
        Util.wait(1);

        parent.write(loc.valor1, "Try text writing");
        Util.wait(1);
        String campoValor = parent.getText(loc.valor1);
        if (!campoValor.isEmpty()) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "El campo numerico permitio ingresar caracteres alfanumericos.");
            Evidence.save("El campo numerico permitio ingresar caracteres alfanumericos.", parent, loc.valor1);
            return false;
        }
        parent.write(loc.valor1, valr1St);
        Util.wait(1);

        parent.mouseOver(loc.valor2);
        parent.mouseClick();

        if (isFallido) {
            if (loc.botonAceptarTw.isDisplayed()) parent.click(loc.botonAceptarTw);
            Util.wait(1);
            if (loc.botonAceptarTw.isDisplayed()) parent.click(loc.botonAceptarTw);
        } else {
            if (parent.element(By.xpath("(//button[contains(text(), 'Aceptar')])[2]")).isDisplayed()) {
                parent.click(By.xpath("(//button[contains(text(), 'Aceptar')])[2]"));
            }
        }

        Util.wait(1);
        parent.write(loc.valor2, "Try text writing");
        Util.wait(1);
        campoValor = parent.getText(loc.valor2);
        if (!campoValor.isEmpty()) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "El campo numerico permitio ingresar caracteres alfanumericos.");
            return false;
        }
        parent.write(loc.valor2, calcSt);
        Util.wait(2);

        return true;
    }

    /**
     * Procesa la rama "Nuevo envío". Si isFallido==true ejecuta las validaciones extra del flujo 'Fallido'.
     * Retorna "" si OK o "Error" si algo falla (con los Reporter/Evidence originales).
     */
    private String processNuevoEnvio(String[] getLoginData, boolean isFallido) throws Exception {
        if (!"Nuevo envío".equals(getLoginData[41])) {
            parent.click(loc.tipoEnvioFrecuente);
            return "";
        }

        // rama fallido con muchas pruebas
        if (isFallido) {
            parent.click(loc.tipoEnvioNuevo);
            Evidence.save("Enviar al exterior: ", parent);
            parent.click(loc.botonSiguien);

            if (!parent.waitForElement(loc.nombreBenefi, 20, "loc.nombreBenefi")) return "Error";

            // pruebas campos nombre/ciudad/direccion largos y especiales
            parent.write(loc.nombreBenefi, "-.[},)(+¨¨*.");
            if (parent.waitForElementInteractable(loc.nombreBenefi, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo Nombre beneficiario permite caracteres especiales");
            }
            parent.write(loc.nombreBenefi,
                    "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
            if (parent.waitForElementInteractable(loc.nombreBenefi, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo Nombre beneficiario permite caracteres numericos");
            }

            if (!parent.waitForElement(loc.paisBenefi, 10, "loc.paisBenefi")) return "Error";
            parent.write(loc.paisBenefi, getLoginData[43].toUpperCase());
            parent.waitForElementInteractable(loc.listaPais, 5, "loc.listaPais");
            if (parent.isDisplayed(loc.listaPais)) {
                Util.wait(2);
                parent.click(loc.listaPais);
            }

            parent.write(loc.ciudadBene, "-.[},)(+¨¨*.");
            if (parent.waitForElementInteractable(loc.ciudadBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo Ciudad y pais permite caracteres especiales");
            }
            parent.write(loc.ciudadBene,
                    "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
            if (parent.waitForElementInteractable(loc.ciudadBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo Ciudad y pais permite caracteres numericos");
            }

            parent.write(loc.direccionBene, "-.[},)(+¨¨*.");
            if (parent.waitForElementInteractable(loc.direccionBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO,
                        "El campo direccion beneficiario permite caracteres especiales");
            }
            parent.write(loc.direccionBene,
                    "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
            if (parent.waitForElementInteractable(loc.direccionBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo direccion beneficiario permite caracteres numericos");
            }

            // IBAN invalid test
            parent.write(loc.ibanCabeBene,
                    "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
            parent.submit(loc.ibanCabeBene);
            parent.waitForElementInteractable(loc.mensajeError, 10, "loc.mensajeError");
            if (loc.mensajeError.isDisplayed()) {
                Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
                Util.wait(1);
                Evidence.save("Prueba IBAN: ", parent);
                parent.click(loc.botonAceptar);
            } else {
                Reporter.reportEvent(Reporter.MIC_FAIL,
                        "El flujo prosiguio apesar de que el IBAN o el CLABE esta incorrecto.");
                return "Error";
            }

            parent.write(loc.ibanCabeBene, "-.[},)(+¨¨*.");
            String campoValor = parent.getText(loc.ibanCabeBene);
            if (!campoValor.isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_FAIL, "El campo IBAN o CLABE.");
                return "Error";
            }

            parent.write(loc.ibanCabeBene, "IBAN12345678912345678912345");

            parent.selectListItem(loc.tipoInfoBene, getLoginData[46]);
            parent.write(loc.InfoBene, getLoginData[47]);
            parent.write(loc.InfoBene, "-.[},)(+¨¨*.");
            if (parent.waitForElementInteractable(loc.InfoBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo tipo beneficiario permite caracteres especiales");
            }
            parent.write(loc.InfoBene,
                    "123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
            if (parent.waitForElementInteractable(loc.InfoBene, 5, "")) {
                Reporter.reportEvent(Reporter.MIC_INFO, "El campo tipo beneficiario permite caracteres numericos");
            }

            Evidence.save("Enviar al exterior: ", parent);
            parent.click(loc.botonSiguien);

            if (!parent.waitForElement(loc.tipoCodBanBene, 20, "loc.tipoCodBanBene")) return "Error";
            parent.click(loc.tienBancoInterm);
            parent.selectListItem(loc.tipoCodBanBene, getLoginData[48]);
            Util.wait(1);
            parent.write(loc.numCodBene, "12345");
            parent.submit(loc.numCodBene);
            Util.wait(2);
            if (loc.txtCodgNoEx.isDisplayed()) {
                Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.txtCodgNoEx));
                Evidence.save("Codigo invalido: ", parent);
                Util.wait(1);
                parent.write(loc.numCodBene, getLoginData[49]);
                parent.waitForElementInteractable(loc.listaBenef, 10, "loc.listaBenef");
                if (parent.isDisplayed(loc.listaBenef))
                    Util.wait(1);
                parent.click(loc.listaBenef);
            } else {
                Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo pasa apesar de ingresar un codigo erroneo");
                return "Error";
            }
            parent.selectListItem(loc.tipoInteInfoBene, getLoginData[50]);
            Util.wait(1);
            parent.write(loc.numCodInterBene, "12345");
            parent.submit(loc.numCodInterBene);
            Util.wait(1);
            if (loc.txtCodgNoEx.isDisplayed()) {
                Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.txtCodgNoEx));
                Evidence.save("Codigo invalido banco intermediario: ", parent);
                Util.wait(1);
                parent.write(loc.numCodInterBene, getLoginData[49]);
                parent.waitForElementInteractable(loc.listaBenefInterme, 10, "loc.listaBenef");
                if (parent.isDisplayed(loc.listaBenefInterme))
                    Util.wait(3);
                parent.click(loc.listaBenefInterme);
            } else {
                Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo pasa apesar de ingresar un codigo erroneo");
                return "Error";
            }

            parent.click(loc.botonSiguien);

            parent.waitForElementInteractable(loc.mensajeError, 10, "loc.mensajeError");
            if (loc.mensajeError.isDisplayed()) {
                Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
                Util.wait(1);
                Evidence.save("No podemos atender la solicitud", parent);
                parent.click(loc.botonAceptar);
            } else {
                Reporter.reportEvent(Reporter.MIC_FAIL, "El frlujo permitio continuar");
                return "Error";
            }

            return "";
        }

        // rama normal: rellenar datos y seguir confirmación/aprobación/consulta (igual que original)
        Evidence.save("Enviar al exterior: ", parent);
        parent.click(loc.botonSiguien);

        if (!parent.waitForElement(loc.nombreBenefi, 20, "loc.nombreBenefi")) return "Error";
        parent.write(loc.nombreBenefi, getLoginData[42]);

        if (!parent.waitForElement(loc.paisBenefi, 10, "loc.paisBenefi")) return "Error";
        parent.write(loc.paisBenefi, getLoginData[43].toUpperCase());
        parent.waitForElement(loc.listaPais, 5, "loc.listaPais");
        if (parent.isDisplayed(loc.listaPais)) {
            Util.wait(3);
            parent.click(loc.listaPais);
        }

        parent.write(loc.ciudadBene, getLoginData[44]);
        parent.write(loc.direccionBene, generarDireccion());
        parent.write(loc.ibanCabeBene, getLoginData[45]);
        parent.selectListItem(loc.tipoInfoBene, getLoginData[46]);
        parent.write(loc.InfoBene, getLoginData[47]);
        Evidence.save("Enviar al exterior: ", parent);
        parent.click(loc.botonSiguien);

        if (!parent.waitForElement(loc.tipoCodBanBene, 20, "loc.tipoCodBanBene")) return "Error";
        parent.selectListItem(loc.tipoCodBanBene, getLoginData[48]);
        parent.write(loc.numCodBene, getLoginData[49]);
        Util.wait(3);

        if (parent.isDisplayed(loc.listaBenef))
            parent.click(parent.waitClickable(loc.listaBenef, 5));
        Util.wait(3);

        String banco = parent.getText(loc.bancoValidate);
        if (banco == null || banco.isEmpty()) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "El numero del codigo del banco beneficiario no existe.");
            return "Error";
        }

        String val51 = getLoginData[51];
        if (val51 != null && !val51.isEmpty()) {
            parent.click(loc.tienBancoInterm);
            parent.waitClickable(loc.numCodBene, 10);
            parent.selectListItem(loc.tipoInteInfoBene, getLoginData[50]);
            parent.write(loc.numCodInterBene, getLoginData[51]);
            Util.wait(2);
            if (parent.isDisplayed(loc.listaBenefInterme)) {
                Util.wait(4);
                parent.click(loc.listaBenefInterme);
            }
            Util.wait(1);
            String banco1 = parent.getText(loc.bancoInterValidate);
            if (banco1 == null || banco1.isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_FAIL,
                        "El numero del codigo del banco intermedio beneficiario no existe.");
                return "Error";
            }
        }

        Evidence.save("Enviar al exterior: ", parent);
        parent.click(loc.botonSiguien);
        Util.wait(2);
        if (parent.isDisplayed(loc.mensajeError)) {
            String textoError = parent.getText(loc.textoError);
            Util.wait(1);
            Evidence.save("Enviar al exterior Error: ", parent);
            parent.click(loc.botonAceptar);
            Reporter.reportEvent(Reporter.MIC_FAIL, textoError);
            return "Error";
        }

        if (!parent.waitForElement(loc.txtCotizacion, 20, "loc.txtCotizacion")) return "Error";
        Evidence.save("Enviar al exterior: ", parent);
        Util.wait(1);

        String moneda = parent.getText(loc.txtMoneda); Util.wait(1);
        String monto = parent.getText(loc.txtMonto); Util.wait(1);
        String tipoCambio = parent.getText(loc.txtTipoCambio); Util.wait(1);
        String montoCambio = parent.getText(loc.txtMontoCambio); Util.wait(1);
        String valorPesos = parent.getText(loc.txtValorPesos); Util.wait(1);
        String costoServicio = parent.getText(loc.txtCostoServicio); Util.wait(1);
        String iva = parent.getText(loc.txtIVA); Util.wait(1);
        String descontarCuent = parent.getText(loc.txtDescontarCuenta); Util.wait(1);

        Reporter.reportEvent(Reporter.MIC_INFO,
                "Moneda: " + moneda + System.lineSeparator() + "Monto: " + monto + System.lineSeparator()
                        + "Tipo de cambio a la otra moneda: " + tipoCambio + System.lineSeparator()
                        + "Monto en la otra moneda: " + montoCambio + System.lineSeparator() + "Tasa de cambio: "
                        + montoCambio + System.lineSeparator() + "Valor de la operacion en pesos colombianos: "
                        + valorPesos + System.lineSeparator() + "Costo del servicio: " + costoServicio
                        + System.lineSeparator() + "IVA sobre costo del servicio: " + iva + System.lineSeparator()
                        + "Valor total a descontar de la cuenta: " + descontarCuent);

        parent.click(loc.botonSiguien);
        if (!parent.waitForElement(loc.mensajeInfo, 20, "loc.mensajeInfo")) return "Error";
        parent.click(loc.botonAceptar);
        if (!parent.waitForElement(loc.txtConfirmacion, 20, "loc.txtConfirmacion")) return "Error";
        Util.wait(1);
        Evidence.saveAllScreens("Confirmacion Envio Exterior", parent);
        Util.wait(1);
        parent.click(loc.btnAprobar);
        Util.wait(2);
        parent.write(loc.tokenInput, getLoginData[5]);
        parent.click(loc.btnConfTr);
        if (!parent.waitForElement(loc.mensajeInfo, 20, "loc.mensajeInfo")) return "Error";
        Evidence.save("Numero de consulta", parent);
        String numeroDeConsulta = parent.getText(loc.txtAzul);
        Util.wait(1);
        parent.click(loc.botonAceptar);
        if (!parent.waitForElement(loc.consultas, 20, "loc.consultas")) return "Error";
        parent.click(loc.consultas);
        Util.wait(5);
        parent.write(loc.documentBene, getLoginData[42]);
        Util.wait(1);
        parent.click(loc.botonBuscar);
        Util.wait(5);
        String pagTotales = parent.getText(loc.paginTotale);
        String cantiRegis = parent.getText(loc.cantRegist);
        Reporter.reportEvent(Reporter.MIC_INFO, "Páginas Totales: " + pagTotales + System.lineSeparator()
                + "Cantidad Registros: " + cantiRegis + System.lineSeparator());
        Util.wait(1);
        parent.clickDocumentSimple(numeroDeConsulta);
        if (!parent.waitForElement(loc.txtNumDocum, 20, "loc.consultas")) return "Error";
        Util.wait(2);
        Evidence.save("Comprobante de transaccion", parent);

        return "";
    }

    /* ---------------------- Utilitarios mínimos ---------------------- */
    private static String generarDireccion() {
        int a = RAND.nextInt(200) + 1;
        int b = RAND.nextInt(100);
        int c = RAND.nextInt(100);
        return "KR " + a + " " + String.format("%02d", b) + " " + String.format("%02d", c);
    }
}
