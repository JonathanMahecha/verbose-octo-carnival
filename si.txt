package launchTest;

public class PymeLaunchTest extends BaseTestNG {
	PageLoginPymes pageLogin = null;
	PageOrigen pageOrigen = null;
	PageDivisas pageDivisas = null;
	PageUsuariosEmpresa pageUsuariosEmpresa = null;
	PageAdminParametros pageAdminParametros = null;
	PageConsultasyExtractos pageConsultasyExtractos = null;
	ControllerCrearTx controller = null;
	ControllerDestinosMasivos controllerDestinosMasivos = null;
	ControllerValiPymeMiddle controllerValiPymeMiddle = null;
	PageAprobacionInter pageAprobInter = null;
	PageConsultatxInternacional pageConsultatxInternacional = null;
	PageDocumentos_Y_Formularios pageDocumentos_Y_Formularios = null;
	PageTransaccionesProgramadas pageTransaccionesProgramadas = null;
	ControllerMiddleCobros controllerMiddleCobros = null;
	PageAdminCombosCobros pageAdminCombosCobros = null;
	PageActualizacionDeDatos pageActualizacionDeDatos = null;
	PageLogin pageLoginC360 = null;
	PageInicioC360 pageInicioC360 = null;

	final String TP_LOGIN = "Login";
	final String TP_EN_LINEA = "Tx En Línea";
	final String TP_PEND_APR = "Tx Pend Aprobación";
	final String CN_APRO_PEND = "1";
	final String DE_El_DETALLE = "SI";
	String transaccion = MotorRiesgo.TX_EMP_LOGIN_SUCC; // VALOR POR DEFECTO


	String nombreAmbiente = null;
	String usuario = null;
	String contratacion = null;
	String cobros = null;
	String stratus = null;
	public static String realizarMR, ipPublica = null;
	Date fechaHoraLogMR;
	String tipoPrueba, desde_el_Detalle, servicio, riesgoBc, riesgoEfm, riesgo, userAgent, navegador, empresa,
			tipoIDEmpresa, numeroIDEmpresa, tipoIdentificacion, Idusuario, numAprobaciones, informe;
	String numCliEmp, tipoDoc, numDoc, clave, tipoTok, datoTok;
	String Motorna = "N/A";

	String tipoConstaTxRealizadas = null, ordenanteBeneficiario = null, tipoTranferencia = null, estado = null,
			tipoMoneda = null, fechaTx = null, horaTx = null, fechaDesde = null, fechaHasta = null;

	String valorTx = null;
	String tipoIdEm, clieEmpresa, idEmpresa, numIdUser, tipoIDUser, combo, nombreEmpre;

	// Variables para guardar los últimos valores
	private String lastNumAprobaciones = "";
	private String lastTipoAbono = "";
	private String lastCtaInscrita = "";
	private String lastIdusuario = "";
	private String lastempresa = "";

	By log30 = By.xpath("/html/body/h2[1]/p");
	By locCmEmpresa = By.xpath("//select[@id='dropMasterEmpresa']");

	// Login Front
	By cerrarSesion = By.xpath("//*[@id='CerrarSesion']");
	By cmCerrSes = By.cssSelector("a[id='CerrarSesion']");
	By xpahtfecha = By.xpath("//*[@id='tabla-top']/tbody/tr[1]/td[1]");

	By ip = By.xpath("/html/body/pre");

	List<HashMap<String, String>> resultsMiddle = new ArrayList<>();
	HashMap<String, Double> segmentosStratus = new HashMap<String, Double>();

	double[] validacionDescuento = null;
	String[] estadotxFinal = null;
	String validarCliente = "";


	public void launchData() { // DATOS DEL LANZAMIENTO
		library.reporting.Reporter.initializeEvidenceType(new dav.library.reporting.EvidencePdfFile());
		Evidence.TITLE_WITH_TIME = true;
		SettingsRun.DEFAULT_HEADER = 4;
		// -----------------------------------------------------------------------------------------------------------------------
	}
	public void launchClose() { // CIERRE DEL LANZAMIENTO
		SettingsRun.CREATE_FINAL_EVIDENCES_WHEN_NOPDF = false;
		if (DatosDavivienda.RISKMOTOR != null && SettingsRun.esIteracionFinal())
			DatosDavivienda.RISKMOTOR.cerrarMotorRiesgo();
		if (pageLogin != null)
			if (pageLogin.ThereareOpenWindows())
				pageLogin.closeAllBrowsers();
		if (DatosDavivienda.STRATUS != null)
			DatosDavivienda.STRATUS.closeStratus();
	}
	public void doingConfigurations() throws Exception {
		Reporter.writeTitle("\n*** PRUEBAS PORTAL PYME ***");

		DXCUtil.startWinAppDriver();
		SettingsRun.ARRAY_DATA_PARAMS = new String[] { "Selección"
//							, "Tx Finalizada", "Tx FAIL"
		};
		nombreAmbiente = SettingsRun.getGlobalData("AMBIENTE_PYME");
		switch (nombreAmbiente) {
		case "1":
		case "PROYECTOS":
			nombreAmbiente = "PROYECTOS";
			break;
		case "2":
		case "CONTENCION":
			nombreAmbiente = "CONTENCION";
			break;
		case "3":
		case "OBSOLESCENCIA":
			nombreAmbiente = "OBSOLESCENCIA";
			break;
		case "4":
		case "ONPREMISE":
			nombreAmbiente = "ONPREMISE";
			break;
		case "5":
		case "POST_NUBE":
			nombreAmbiente = "POST_NUBE";
			break;
		case "6":
		case "CONTENCION_NUBE":
			nombreAmbiente = "CONTENCION_NUBE";
			break;
		case "7":
		case "PROYECTOS_NUBE":
			nombreAmbiente = "PROYECTOS_NUBE";
			break;
		case "8":
		case "MEJORAS":
			nombreAmbiente = "MEJORAS";
			break;
		default:
			Reporter.reportEvent(Reporter.MIC_FAIL, "Opción no válida");
			break;
		}

		if (nombreAmbiente.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL, "Nombre del ambiente seleccionado: Portal - " + nombreAmbiente);
		} else {
			Reporter.reportEvent(Reporter.MIC_HEADER, "Nombre del ambiente seleccionado: Portal - " + nombreAmbiente);
		}

		DatosEmpresarial.AMBIENTE_TEST = nombreAmbiente;

		contratacion = SettingsRun.getGlobalData("CONTRATACION");
		cobros = SettingsRun.getGlobalData("VALIDACION.COBROS");
		stratus = SettingsRun.getGlobalData("VALIDAR.STRATUS");
		realizarMR = SettingsRun.getGlobalData("MOTOR.motorDeRiesgo");

		servicio = SettingsRun.getTestData().getParameter("Servicio").trim();

		// Consulta Comprobantes
		String comprobantes[] = new String[] { "Tiempo de Consulta",
				"Ordenante / Nombre del beneficiario en el exterior", "Tipo de Transferencia",
				"Fecha Día Inicial  Desde (dd/mm/YYYY)", "Fecha DÍa Final Hasta (dd/mm/YYYY)", "Estado", "Tipo Moneda",
				"Fecha tx", "Hora tx",

		};

		SettingsRun.getTestData().addParametersNotExist(SettingsRun.ARRAY_DATA_PARAMS);

		if (SettingsRun.getTestData().parameterExist("Tiempo de Consulta"))
			tipoConstaTxRealizadas = SettingsRun.getTestData().getParameter("Tiempo de Consulta");
		if (SettingsRun.getTestData().parameterExist("Ordenante / Nombre del beneficiario en el exterior"))
			ordenanteBeneficiario = SettingsRun.getTestData()
					.getParameter("Ordenante / Nombre del beneficiario en el exterior");
		if (SettingsRun.getTestData().parameterExist("Tipo de Transferencia"))
			tipoTranferencia = SettingsRun.getTestData().getParameter("Tipo de Transferencia");
		if (SettingsRun.getTestData().parameterExist("Fecha Día Inicial  Desde (dd/mm/YYYY)"))
			fechaDesde = SettingsRun.getTestData().getParameter("Fecha Día Inicial  Desde (dd/mm/YYYY)", "Fecha");
		if (SettingsRun.getTestData().parameterExist("Fecha DÍa Final Hasta (dd/mm/YYYY)"))
			fechaHasta = SettingsRun.getTestData().getParameter("Fecha DÍa Final Hasta (dd/mm/YYYY)", "Fecha");
		if (SettingsRun.getTestData().parameterExist("Fecha DÍa Final Hasta (dd/mm/YYYY)"))
			estado = SettingsRun.getTestData().getParameter("Estado").trim();
		if (SettingsRun.getTestData().parameterExist("Tipo Moneda"))
			tipoMoneda = SettingsRun.getTestData().getParameter("Tipo Moneda").trim();
		if (SettingsRun.getTestData().parameterExist("Fecha tx"))
			fechaTx = SettingsRun.getTestData().getParameter("Fecha tx");
		if (SettingsRun.getTestData().parameterExist("Hora tx"))
			horaTx = SettingsRun.getTestData().getParameter("Hora tx");

		// Global
		valorTx = SettingsRun.getTestData().getParameter("Valor a Pagar / Transferir").trim();
		usuario = SettingsRun.getTestData().getParameter("Nombre de Usuario").trim();

		if (realizarMR.equals("SI")) {
			riesgoBc = SettingsRun.getTestData().getParameter("Nivel de Riesgo BC").trim();
			riesgoEfm = SettingsRun.getTestData().getParameter("Nivel de Riesgo SAS EFM").trim();

			if (riesgoBc.isEmpty() || riesgoBc == null) {
				Reporter.reportEvent(Reporter.MIC_FAIL, "Falta Ingresar Datos de MR, Campos Nivel de Riesgo BC ");
				Reporter.write("Falta Ingresar Datos de MR, Campos Nivel de Riesgo BC ");
				if (pageOrigen != null)
					pageOrigen.terminarIteracion();

				launchClose();

			} else if (riesgoEfm.isEmpty() || riesgoEfm == null) {
				Reporter.reportEvent(Reporter.MIC_FAIL, "Falta Ingresar Datos de MR, Campos Nivel de Riesgo SAS EFM ");
				Reporter.write("Falta Ingresar Datos de MR, Campos Nivel de Riesgo SAS EFM ");
				if (pageOrigen != null)
					pageOrigen.terminarIteracion();

				launchClose();
			}
			// -----------------------------------------------------------------------------------------------------------------------
			// ADICIÓN DE NUEVOS PARÁMETROS REQUERIDOS MR
//					SettingsRun.getGlobalData().addParametersNotExist("Fecha Transacción", "Hora Transacción","Número Aprobación");
			// -----------------------------------------------------------------------------------------------------------------------
			// CONFIGURACIóN DEL ARCHIVO DEL SET DE MOTOR DE RIESGO
			DatosDavivienda.IS_RISKMOTOR = true; // DEJA MARCA QUE INDICA QUE SE TRANSARÁ PARA MOTOR DE RIESGO

			String nbArchivo = MotorRiesgo.preguntarPorArchivoMR();

			if (!servicio.equals("Tx Internacionales Recibir desde el exterior")
					&& !servicio.equals("Tx Internacionales Enviar al exterior")) {

				if (nbArchivo == null)

					/*
					 * CREA EL ARCHIVO DE MOTOR DE RIEGOS, APARTIR DE LA PANTILLA QUE SE EN CUENTRA
					 * EN EL PROTECTO Davivienda EN "resources" EN LA CARPETA "Template" ARCHIVO
					 * "TPT_MREmpresarial.xlsx"
					 */
					DatosDavivienda.RISKMOTOR = new MotorRiesgo(DatosDavivienda.CANAL_PYME_FRONT);
				// -----------------------------------------------------------------------------------------------------------------------
				else // HAY UN ARCHIVO DE MOTOR DE RIESGO
					/*
					 * ESTE ARCHIVO DEBE DE TENER LOS CAMPOS MÍNIMOS QUE SE REQUIERE PARA EL ARCHIVO
					 * DE MR ESTOS CAMPOS SE ENCUENTRAN PARAMETRIZADOS EN LA CLASE DE MotorRiesgo
					 * METODO "getDataArchivoMR" "case DatosDavivienda.CANAL_PYME_FRONT"
					 */
					DatosDavivienda.RISKMOTOR = new MotorRiesgo(DatosDavivienda.CANAL_PYME_FRONT, nbArchivo);

			} else if (servicio.equals("Tx Internacionales Recibir desde el exterior")
					|| servicio.equals("Tx Internacionales Enviar al exterior")) {
				if (nbArchivo == null)
					/*
					 * CREA EL ARCHIVO DE MOTOR DE RIEGOS, APARTIR DE LA PANTILLA QUE SE EN CUENTRA
					 * EN EL PROTECTO Davivienda EN "resources" EN LA CARPETA "Template" ARCHIVO
					 * "TPT_MREmpresarialansd_Divisas_TrasferenciasInternacional.xlsx"
					 */
					DatosDavivienda.RISKMOTOR = new MotorRiesgo(DatosDavivienda.CANAL_PYME_FRONT_DIVISAS);
				// -----------------------------------------------------------------------------------------------------------------------
				else // HAY UN ARCHIVO DE MOTOR DE RIESGO
					/*
					 * ESTE ARCHIVO DEBE DE TENER LOS CAMPOS MÍNIMOS QUE SE REQUIERE PARA EL ARCHIVO
					 * DE MR ESTOS CAMPOS SE ENCUENTRAN PARAMETRIZADOS EN LA CLASE DE MotorRiesgo
					 * METODO "getDataArchivoMR" "case DatosDavivienda.CANAL_PYME_FRONT"
					 */
					DatosDavivienda.RISKMOTOR = new MotorRiesgo(DatosDavivienda.CANAL_PYME_FRONT_DIVISAS, nbArchivo);
			} else if (servicio.equals("Tx Internacionales Enviar al exterior Pendiente Aprobación")
					|| servicio.equals("Consulta Tx Internacionales Enviar al exterior Validar Estado")) {

				Reporter.reportEvent(Reporter.MIC_FAIL, "En estos escenarios No tiene contemplado MR: " + servicio);
				pageOrigen.terminarIteracion();
			}

		}

	}

	public void doingTest() throws Exception {
		doingConfigurations();
		if (realizarMR.equals("SI")) {
			if (!servicio.equals("Tx Internacionales Recibir desde el exterior")
					&& !servicio.equals("Tx Internacionales Enviar al exterior")) {
				riesgoBc = SettingsRun.getTestData().getParameter("Nivel de Riesgo BC").trim();
				riesgoEfm = SettingsRun.getTestData().getParameter("Nivel de Riesgo SAS EFM").trim();

				if (SettingsRun.getGlobalData("MOTOR.tipoMotor").contains("EFM")) {
					riesgo = riesgoEfm;

				} else if (SettingsRun.getGlobalData("MOTOR.tipoMotor").contains("BC")) {
					riesgo = riesgoBc;
				}
			} else if (servicio.equals("Tx Internacionales Recibir desde el exterior")
					|| servicio.equals("Tx Internacionales Enviar al exterior")) {
				riesgoBc = SettingsRun.getTestData().getParameter("Nivel de Riesgo BC").trim();
				riesgo = riesgoBc;
			}
		}
		DatosEmpresarial.loadLoginDataFija("0", SettingsRun.getGlobalData("MIDDLE.tipoDoc"),
				SettingsRun.getGlobalData("MIDDLE.numeroDeId"), SettingsRun.getGlobalData("MIDDLE.clavePersonal"),
				SettingsRun.getGlobalData("MIDDLE.tipoToken"), SettingsRun.getGlobalData("MIDDLE.numeroToken"));
		String[] datosLogin = DatosEmpresarial.getLoginData();
		if (contratacion.equals("SI") || contratacion.equals("SOLO"))
			Reporter.reportEvent(Reporter.MIC_INFO,
					"*** Datos de Logueo Middle: [" + DXCUtil.arrayToString(datosLogin, " - ") + "]");
		numCliEmp = datosLogin[0];
		tipoDoc = datosLogin[1];
		numDoc = datosLogin[2];
		clave = datosLogin[3];
		tipoTok = datosLogin[4];
		datoTok = datosLogin[5];
		PageLoginPymes.datosMidell(numCliEmp, tipoDoc, numDoc, clave, tipoTok, datoTok);
		PageUsuariosEmpresa.datosMidellToke(datoTok);
		String msgError = null;
		navegador = SettingsRun.getTestData().getParameter("Navegador").trim();
		servicio = SettingsRun.getTestData().getParameter("Servicio").trim();
		tipoPrueba = SettingsRun.getTestData().getParameter("Tipo prueba").trim();
		desde_el_Detalle = SettingsRun.getTestData().getParameter("Desde_el_Detalle").trim();
		empresa = SettingsRun.getTestData().getParameter("Nombre Empresa").trim();
		String clienteEmpresarial = SettingsRun.getTestData().getParameter("Cliente Empresarial").trim();
		Idusuario = SettingsRun.getTestData().getParameter("Id usuario").trim();
		tipoIdentificacion = SettingsRun.getTestData().getParameter("Tipo Identificación").trim();
		tipoIDEmpresa = SettingsRun.getTestData().getParameter("Tipo ID Empresa").trim();
		numeroIDEmpresa = SettingsRun.getTestData().getParameter("Numero ID Empresa").trim();
		String msgInicio = "";
		if (contratacion.equals("SI") || contratacion.equals("SOLO")) {
			msgInicio = "*** Cliente Empresarial: [" + clienteEmpresarial + "]";
			Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
			msgInicio = "*** Tipo Identificación Usuario: [" + tipoIdentificacion + "] - Tipo Identificación Usuario: ["
					+ Idusuario + "]";
			Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
			msgInicio = "*** Tipo Servicio a contratar: [" + servicio + "]";
			Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
			msgInicio = "*** Empresa a contratar: [" + empresa + "]";
			Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
			msgInicio = "*** Tipo Identificación Empresa: [" + tipoIDEmpresa + "] - Numero Identificación Empresa: ["
					+ numeroIDEmpresa + "]";
			Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
		}
		if (realizarMR.equals("SI")) {
			if (!riesgoBc.isEmpty() && realizarMR.equals("SI") || !riesgoEfm.isEmpty() && realizarMR.equals("SI"))
				DatosDavivienda.RISKMOTOR.inicializaValoresTemp();
		}
		if (tipoPrueba.isEmpty() || tipoPrueba.equals(" ")) {
			Reporter.write("Falta Ingresar Datos de Tipo Prueba, Campo es Obligatorio ");
			SettingsRun.exitTestIteration();
		}
		if (servicio.contains("Tx Internacionales Recibir desde el exterior")
				|| servicio.contains("Tx Internacionales Enviar al exterior"))
			validarCliente = SettingsRun.getTestData().getParameter("ValidarC360").trim();
		if (contratacion.equals("SI")) {
			pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la prueba
			pageLogin.cargarUrls();
			msgError = pageLogin.loginMiddle(); // Método para hacer el logueo en el portal Middle Pyme.
			pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta en el
													// Ambiente Middle o FRONT
			if (msgError == null) {

				controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);
				numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
				boolean unaFirma = numAprobaciones.equals(CN_APRO_PEND);
				int numfirm = Integer.parseInt(numAprobaciones);
				int contador = 1;
				if (!unaFirma) {
					controllerValiPymeMiddle.ValidacionMiddlefirmas(1);
					do {

						if (contador != numfirm) { // AUMENTA EL VALOR DE LA VARIABLE
							contador++;
						}
						controllerValiPymeMiddle.ValidacionMiddlefirmas(contador);

					} while (contador < numfirm);
				} else {
					controllerValiPymeMiddle.ValidacionMiddlefirmas(1);
				}
				if (cobros.equals("SI")) {
					controllerMiddleCobros = new ControllerMiddleCobros(pageLogin);
					resultsMiddle = controllerMiddleCobros.consultarCombos();
				}
				pageLogin.CerrarSesionMiddle();
				if (msgError == null) {
					if (cobros.equals("SI")) {
						if (realizarMR.equals("NO")) {
							LoginStratus();
						}
					}
					Front();
				}
			}
		}
		if (contratacion.equals("SOLO")) {
			pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la prueba
			pageLogin.cargarUrls();
			msgError = pageLogin.loginMiddle(); // M�todo para hacer el logueo en el portal Middle Pyme.
			pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta en el
													// Ambiente Middle o FRONT
			if (msgError == null) {
				controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);
				numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
				boolean unaFirma = numAprobaciones.equals(CN_APRO_PEND);
				int numfirm = Integer.parseInt(numAprobaciones);
				int contador = 1;
				if (!unaFirma) {
					controllerValiPymeMiddle.ValidacionMiddlefirmas(1);
					do {
						if (contador != numfirm) {
							contador++;
						}
						controllerValiPymeMiddle.ValidacionMiddlefirmas(contador);
					} while (contador < numfirm);
				} else {
					controllerValiPymeMiddle.ValidacionMiddlefirmas(1);
				}
				pageLogin.CerrarSesionMiddle();
			}
		}
		if (contratacion.equals("NO")) {
			if (msgError == null) {
				if (realizarMR.equals("NO")) {
					if (cobros.equals("SI")) {
						LoginStratus();
						Reporter.reportEvent(Reporter.MIC_INFO,
								"*** Datos de Logueo Middle: [" + DXCUtil.arrayToString(datosLogin, " - ") + "]");
						msgInicio = "*** Cliente Empresarial: [" + clienteEmpresarial + "]";
						Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
						msgInicio = "*** Tipo Identificación Usuario: [" + tipoIdentificacion
								+ "] - Tipo Identificación Usuario: [" + Idusuario + "]";
						Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
						msgInicio = "*** Tipo Servicio a contratar: [" + servicio + "]";
						Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
						msgInicio = "*** Empresa a contratar: [" + empresa + "]";
						Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
						msgInicio = "*** Tipo Identificación Empresa: [" + tipoIDEmpresa
								+ "] - Numero Identificación Empresa: [" + numeroIDEmpresa + "]";
						Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);

						String combo = SettingsRun.getTestData().getParameter("Combos");
						String tipoCobro = SettingsRun.getTestData().getParameter("Tipo Prueba Cobros");

						Reporter.reportEvent(Reporter.MIC_INFO, "*** COMBO SELECIONADO: " + combo);
						Reporter.reportEvent(Reporter.MIC_INFO, "*** TIPO COBRO SELECIONADO: " + tipoCobro);
						// --------------------------------------------------------------------------------------------------------------------------------------
						// INTENTA HACER EL LOGUEO
						pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la
																	// prueba
						pageLogin.cargarUrls();
						msgError = pageLogin.loginMiddle(); // M�todo para hacer el logueo en el portal Middle
															// Pyme.
						pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta
																// en
																// el
																// Ambiente Middle o FRONT
						controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);

						controllerMiddleCobros = new ControllerMiddleCobros(pageLogin);
						resultsMiddle = controllerMiddleCobros.consultarCombos();
//						Reporter.write(resultsMiddle);
						pageLogin.CerrarSesionMiddle();
					}
				} else if (realizarMR.equals("SI")) {
				}
			}
			Front();
		}
		if (contratacion == "Informe") {
			pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la prueba
			pageLogin.cargarUrls();
			msgError = pageLogin.loginMiddle(); // M�todo para hacer el logueo en el portal Middle Pyme.
			pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta en el
			if (msgError == null) {

				controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);
				numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
				controllerValiPymeMiddle.ValidacionInformeTransInternacional();
			}
		}
	}
	public void Front() throws Exception {
		switch (servicio) {
		case "Nómina":
		case "Pago de Nómina":
		case "Pago de Nóminas":
		case "Pago a Proveedores":
		case "Pagos a proveedores":
		case "Pagos proveedores":
		case "Proveedores":
		case "AFC":
		case "Pago a Créditos de Terceros":
		case "Pagos a créditos de terceros":
		case "Crédito.3ros":
			String archivoDest = SettingsRun.getTestData().getParameter("Archivo Destinos").trim();
			if (!DXCUtil.ArchivoExist(archivoDest)) {
				Reporter.reportEvent(Reporter.MIC_NOEXEC,
						"El sistema no puede encontrar el archivo destino especificado: " + archivoDest);
				if (pageLogin != null)
					if (pageLogin.ThereareOpenWindows())
						pageLogin.closeAllBrowsers();
				SettingsRun.exitTestIteration();
			}
			break;
		case "Tx Internacionales Recibir desde el exterior":
		case "Tx Internacionales Enviar al exterior":
		case "Tx Internacionales Enviar al exterior Pendiente Aprobación":
		case "Divisas Documentos y Formularios":
		case "Consulta Tx Internacionales Enviar al exterior Validar Estado":

			// Obtiene la ruta del archivo de documentos desde las configuraciones
			String cargueDocu = SettingsRun.getTestData().getParameter("Cargue Archivo Documentos");

			// Divide la ruta en un array de strings separados por comas
			String[] rutaArch = cargueDocu.split(",");
			boolean archivoExiste = true;

			for (String nombreArch : rutaArch) {
				// Verifica si el archivo existe
				if (!DXCUtil.ArchivoExist(nombreArch)) {
					// Si el archivo no existe, reporta el evento
					Reporter.reportEvent(Reporter.MIC_INFO,
							"El sistema no puede encontrar el archivo Cargue de documento especificado: " + nombreArch);
					archivoExiste = false;
				}
			}

			if (!archivoExiste) {
				Reporter.reportEvent(Reporter.MIC_NOEXEC,
						"El sistema no puede encontrar el archivo Cargue especificado: " + cargueDocu);
				// Cierra todas las ventanas abiertas y sale de la iteración del test si es
				// necesario
				if (pageLogin != null)
					if (pageLogin.ThereareOpenWindows())
						pageLogin.closeAllBrowsers();
				SettingsRun.exitTestIteration();
			}
			break;

		default:
			break;
		}

		if (realizarMR.equals("NO")) {
			// Realiza el Login en Stratus
			LoginStratus();
			if (cobros.equals("SI")) {
				if (DXCUtil.ArchivoExist(SettingsRun.getParentResultDir() + "Archivo_Segmentos.txt") && DXCUtil
						.archivoCreadoOModificadoHoy(SettingsRun.getParentResultDir() + "Archivo_Segmentos.txt")) {
					if (controllerDestinosMasivos == null)
						controllerDestinosMasivos = new ControllerDestinosMasivos(null);
					segmentosStratus = controllerDestinosMasivos.LeerArchivoPlano();
				} else {
					// Ingresa a consultar los Segmentos obtenido desde middle
					Reporter.reportEvent(Reporter.MIC_INFO, "Validacion Segmento en Stratus");
					segmentosStratus = DatosDavivienda.STRATUS.irTablaValores(resultsMiddle.get(0).get("Segmento"));
					if (controllerDestinosMasivos == null)
						controllerDestinosMasivos = new ControllerDestinosMasivos(null);
					controllerDestinosMasivos.CrearArchivoPlano_Segmentos(segmentosStratus);

				}

			}
		}

		DXCUtil.Movercursor();
		// -----------------------------------------------------------------------------------------------------------------------
		String msgError = null;
		int intento = 0;
		String msgInicio = "";
		String msgInicio2 = "";
		// -----------------------------------------------------------------------------------------------------------------------
		// Datos Login front Login, estos datos se encuentran el archivo del carge DATA
		DatosEmpresarial.loadLoginData("Cliente Empresarial", "Tipo Identificación", "Id usuario",
				"Clave personal o CVE", "Tipo Token", "Semilla / Valor Estático / Celular");

		String[] datosLogin = DatosEmpresarial.getLoginData();

		Reporter.reportEvent(Reporter.MIC_INFO, "*** Navegador: [" + navegador + "]");
		Reporter.reportEvent(Reporter.MIC_INFO,
				"*** Datos de Logueo Front: [" + DXCUtil.arrayToString(datosLogin, " - ") + "]");
		numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
		Reporter.reportEvent(Reporter.MIC_INFO, "*** Números de firmas: [" + numAprobaciones + "]");
		if (realizarMR.equals("SI")) {
			// NIVEL DE RIESGO DE LA PRUEBA MOTOR
			if (!riesgoBc.isEmpty() && realizarMR.equals("SI") || !riesgoEfm.isEmpty() && realizarMR.equals("SI")) {
				if (SettingsRun.getGlobalData("MOTOR.tipoMotor").contains("EFM")) {
					msgInicio = "*** Tipo de Motor de riesgo : [SAS " + SettingsRun.getGlobalData("MOTOR.tipoMotor")
							+ "]";
				} else {
					msgInicio = "*** Motor de riesgo : [" + SettingsRun.getGlobalData("tipoMotor") + "]";
				}
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
				msgInicio = "*** Riesgo BC: [" + riesgoBc + "]";
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
				if (!servicio.equals("Tx Internacionales Recibir desde el exterior")
						&& !servicio.equals("Tx Internacionales Enviar al exterior")) {
					msgInicio = "*** Riesgo EFM: [" + riesgoEfm + "]";
					Reporter.reportEvent(Reporter.MIC_INFO, msgInicio);
				}
			}
		}
		if (tipoPrueba.equals(TP_EN_LINEA) || tipoPrueba.equals(TP_PEND_APR)) {
			msgInicio2 = "*** Tipo Prueba: [" + tipoPrueba + "]";
			if (!contratacion.equals("SOLO"))
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio2);

			msgInicio2 = "*** Tipo transaccion: [" + servicio + "]";
			if (!contratacion.equals("SOLO"))
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio2);

			msgInicio2 = "*** Empresa: [" + empresa + "]";
			if (!contratacion.equals("SOLO"))
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio2);

			msgInicio2 = "*** Aprobar Desde el detalle: [" + desde_el_Detalle + "]";
			if (!contratacion.equals("SOLO"))
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio2);
		}

		if (tipoPrueba.equals(TP_LOGIN)) {
			msgInicio2 += " " + "Tipo Prueba: " + tipoPrueba;
			if (!contratacion.equals("SOLO"))
				Reporter.reportEvent(Reporter.MIC_INFO, msgInicio2);
		}
		do {
			if (servicio.equals("Consulta Tx Internacionales Enviar al exterior Validar Estado")) {

				pageLogin = new PageLoginPymes(navegador, Evidence.getNbEvidenceDirectory());
				pageLogin.cargarUrls();
			} else {
				pageLogin = new PageLoginPymes(navegador);
				pageLogin.cargarUrls();

			}
			msgError = pageLogin.loginFront();// M�todo para hacer el logueo en el portal front Pyme.
			fechaHoraLogMR = pageLogin.getFechaHoraLogMR();
			pageLogin.selecionambienteClose("NO"); // Indicativo para el ambiente Front// Marca si esta en el
			if (DatosDavivienda.IS_RISKMOTOR && msgError != null && !tipoPrueba.equals("Login")) {
				Reporter.reportEvent(Reporter.MIC_FAIL, " *** No se adiciona a MR >>>" + msgError);
			}
			if (pageLogin.element(log30) != null) {
				String urlCargar = pageLogin.URL_FRONT;
				pageLogin.NavegadorFront(urlCargar);
				intento++;

			}
			tipoPrueba = SettingsRun.getTestData().getParameter("Tipo prueba").trim();
			if (realizarMR.equals("SI")) {
				if (!riesgoBc.isEmpty() || !riesgoEfm.isEmpty()) {
					if (tipoPrueba.contains("Login")) {
						if (msgError != null && msgError.contains("Acceso denegado.En un momento")) {
							DatosDavivienda.RISKMOTOR.setTemporalTime(pageLogin.getFechaHoraLogMR());
							DatosDavivienda.RISKMOTOR.setTemporalMonto("0");
							if (msgError.contains("Acceso denegado.En un momento")) {
								if (riesgo.equals("Bajo") || riesgo.equals("Medio")) {
									Reporter.reportEvent(Reporter.MIC_FAIL, "Se esperaba Ingreso al portal");
								}
								adicionarRegistroMR("Error en Login");

								pageLogin.closeAllBrowsers();
								SettingsRun.exitTestIteration();

							} else {
								if (riesgo.equals("Alto")) {
									Reporter.reportEvent(Reporter.MIC_FAIL, "Se esperaba Acceso Denegado");
								}
								adicionarRegistroMR("Login");
							}
							DatosDavivienda.RISKMOTOR.setTemporalResultado("Declinada");
							intento++;
							pageLogin.closeAllBrowsers();
							SettingsRun.exitTestIteration();
						}

					} else if (tipoPrueba.contains("Tx En Línea") || tipoPrueba.contains("Tx Pend Aprobación")) {
						if (servicio.contains("Nómina") || servicio.contains("Pago a Proveedores")
								|| servicio.contains("AFC") || servicio.contains("Crédito.3ros")) {

						}
					}
				} else if (!riesgoBc.isEmpty()) {
					Reporter.write("Falta Ingresar Datos de MR, Campos Nivel de Riesgo BC ");
					pageLogin.closeAllBrowsers();
					SettingsRun.exitTestIteration();

				} else if (!riesgoEfm.isEmpty()) {
					Reporter.write("Falta Ingresar Datos de MR, Campos Nivel de Riesgo BC ");
					pageLogin.closeAllBrowsers();
					SettingsRun.exitTestIteration();
				}

			}
		} while (pageLogin.element(log30) != null && intento < 3);
		if (msgError == null) {
			if (realizarMR.equals("SI") && tipoPrueba.equals(TP_EN_LINEA)
					|| realizarMR.equals("SI") && tipoPrueba.equals(TP_PEND_APR)) {
				if (!riesgoBc.isEmpty() || !riesgoEfm.isEmpty()) {
					DatosDavivienda.RISKMOTOR.setTemporalTime(pageLogin.getFechaHoraLogMR());
					DatosDavivienda.RISKMOTOR.setTemporalMonto("0");
				}
			}



			DXCUtil.wait(5);

			boolean isWindowOpened = pageLogin.WaitForNumberOfWindos();
			if (isWindowOpened) {
				Reporter.reportEvent(Reporter.MIC_PASS, "La ventana emergente se abrió correctamente");
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL, "No se abrió La ventana emergente");
				pageOrigen.terminarIteracion();
			}
			pageLogin.closeCurrentBrowser();
			pageLogin.changeWindow(pageLogin.accedioAlPortal());
			Util.wait(3);
			pageLogin.maximizeBrowser();
			if (msgError == null && tipoPrueba.equals(TP_EN_LINEA)
					|| msgError == null && tipoPrueba.equals(TP_PEND_APR)) {
				pageOrigen = new PageOrigen(pageLogin);
				msgError = pageOrigen.seleccionarEmpresa(empresa);
				if (msgError == null) {
					String tipoAbono = SettingsRun.getTestData().getParameter("Tipo de abono").trim();
					String ctaInscrita = SettingsRun.getTestData().getParameter("Cuentas Inscriptas").trim();
					numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
					String Idusuario = SettingsRun.getTestData().getParameter("Id usuario").trim();
					if (!Idusuario.equals(lastIdusuario) || !empresa.equals(lastempresa)
							|| !numAprobaciones.equals(lastNumAprobaciones) || !tipoAbono.equals(lastTipoAbono)
							|| !ctaInscrita.equals(lastCtaInscrita)) {
						if (!servicio.equals("Divisas Documentos y Formularios")
								&& !servicio.equals("Consulta Tx Internacionales Enviar al exterior Validar Estado")) {
							pageAdminParametros = new PageAdminParametros(pageLogin);
							msgError = pageAdminParametros.hacerConfiguracion(numAprobaciones, tipoAbono, ctaInscrita);
						} else {
							msgError = "Divisas";
						}
						lastNumAprobaciones = numAprobaciones;
						lastTipoAbono = tipoAbono;
						lastCtaInscrita = ctaInscrita;
						lastIdusuario = Idusuario;
						lastempresa = empresa;

					} else {
						// Omitir la configuraci�n si los valores son los mismos
						msgError = "Ya se configuro los Parámetros Generales";
					}

					String codigoCIIU = "";
					if (servicio.contains("Tx Internacionales Recibir desde el exterior")
							|| servicio.contains("Tx Internacionales Enviar al exterior")) {
						codigoCIIU = SettingsRun.getTestData().getParameter("Validar CIIU").trim();

						if (codigoCIIU.equals("SI")) {
							DXCUtil.wait(3);
							pageActualizacionDeDatos = new PageActualizacionDeDatos(pageLogin);

							msgError = pageActualizacionDeDatos.InicioActualizacionDatos(false);

							if (msgError != null
									&& !msgError.equals("Se actualizaron exitosamente los datos de su empresa")) {
								msgError = pageActualizacionDeDatos.MsgAlertaActualizacionDatos();
								pageOrigen.terminarIteracion(Reporter.MIC_FAIL, msgError);
							} else {
								Reporter.reportEvent(Reporter.MIC_PASS, msgError);
							}
						}

						if (validarCliente.equals("SI")) {
							pageInicioC360 = logueoC360();
							pageConsultatxInternacional = new PageConsultatxInternacional(pageInicioC360);
							pageConsultatxInternacional.ValidarCCIU(numeroIDEmpresa);
							Reporter.write("*** Termina la Validación CLIENTE 360 ***");
						}
					}
					if (msgError != null) {
						transar(); // Se encuentra logueado en el portal Pymes, empieza arealizar las TX.
					} else {
						Reporter.reportEvent(Reporter.MIC_FAIL, msgError);
						pageOrigen.terminarIteracion();
					}
				} else {
					Reporter.reportEvent(Reporter.MIC_FAIL, msgError);
					pageOrigen.terminarIteracion();
				}
			} else if (msgError == null && tipoPrueba.equals(TP_LOGIN)) {
				do {
					boolean imgInicial = pageLogin.isDisplayed(cmCerrSes);
					imgInicial = pageLogin.isDisplayed(cerrarSesion);
					imgInicial = pageLogin.isDisplayed(xpahtfecha);
					DXCUtil.wait(1);
				} while (pageLogin.element(xpahtfecha) == null);
				if (pageLogin.isDisplayed(cerrarSesion) && pageLogin.isDisplayed(xpahtfecha)
						&& pageLogin.isDisplayed(cmCerrSes)) {
					dxc.library.reporting.Evidence.save("Incio de sesion pantalla principal");
					String scriptClicIngresar1 = "document.querySelector('a[id=\"CerrarSesion\"').click();";
					pageLogin.getJse().executeScript(scriptClicIngresar1);
					if (realizarMR.equals("SI") && riesgo.equals("Alto")) {
						DatosDavivienda.RISKMOTOR.setTemporalResultado("Exitosa");
						adicionarRegistroMR("Error en Login");
					} else if (realizarMR.equals("SI")) {
						DatosDavivienda.RISKMOTOR.setTemporalResultado("Exitosa");
						adicionarRegistroMR("Login");
					}
				}

			}
			pageLogin.closeAllBrowsers();
		}

	}
	public void Frontfirmas(int firmas) throws Exception {
		String msgError = null;
		int intento = 0;
		DatosEmpresarial.loadLoginData("Cliente Empresarial", "Tipo Identificación " + firmas, "Id usuario " + firmas,
				"Clave personal o CVE " + firmas, "Tipo Token " + firmas,
				"Semilla / Valor Estático / Celular " + firmas);
		do {
			// INTENTA HACER EL LOGUEO
			pageLogin = new PageLoginPymes(navegador);
			pageLogin.cargarUrls();
			msgError = pageLogin.loginFrontFirmas();// M�todo para hacer el logueo en el portal front Pyme.
			pageLogin.selecionambienteClose("NO");// Indicativo para el ambiente Front// Marca si esta en el
			if (pageLogin.element(log30) != null) {
				String urlCargar = pageLogin.URL_FRONT;
				pageLogin.NavegadorFront(urlCargar);
				intento++;
			}
		} while (pageLogin.element(log30) != null && intento < 2);
		if (msgError == null) {
			DXCUtil.wait(7);
			boolean isWindowOpened = pageLogin.WaitForNumberOfWindos();
			if (isWindowOpened) {
				Reporter.reportEvent(Reporter.MIC_PASS, "La ventana emergente se abrió correctamente");
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL, "No se abrió La ventana emergente");
				pageOrigen.terminarIteracion();
			}
			pageLogin.closeCurrentBrowser();
			pageLogin.changeWindow(pageLogin.accedioAlPortal());
			pageLogin.maximizeBrowser();
			pageOrigen = new PageOrigen(pageLogin);
			msgError = pageOrigen.seleccionarEmpresa(empresa);
			if (msgError != null) {
				Reporter.reportEvent(Reporter.MIC_FAIL, msgError);
				pageOrigen.terminarIteracion();
			}
		}
	}
	public void transar() throws Exception {
		controller = new ControllerCrearTx(pageLogin);
		if (realizarMR.equals("SI")) {
			controller.SetPrioridaMr(riesgo);
			String scriptClicIngresar1 = "return navigator.userAgent;";
			userAgent = (String) pageLogin.getJse().executeScript(scriptClicIngresar1);
		}
		boolean primeroGuardar = tipoPrueba.equals(TP_PEND_APR);

		switch (servicio) {

		case "Nómina":
		case "Pago de Nómina":
		case "Pago de Nóminas":
		case "Pago a Proveedores":
		case "Pagos a proveedores":
		case "Pagos proveedores":
		case "Proveedores":
		case "AFC":
		case "Pago a Créditos de Terceros":
		case "Pagos a créditos de terceros":
		case "Crédito.3ros":
			controller.crearPagoNomina_Proveedores(primeroGuardar);
			break;
		case "Pago de Servicios":
		case "Servicios":
			controller.crearPagoServicios(primeroGuardar);
			break;
		case "Pagos Automaticos":
			controller.crearPagosAutomaticos(primeroGuardar);
			break;
		case "Transferencias Mismo NIT":
		case "Transferencia NIT Propio":
		case "Mismo NIT":
			controller.crearTranferenciaMismoNit(primeroGuardar);
			break;
		case "Transferencias Cuenta Inscrita":
		case "Cuenta Inscrita":
			controller.crearTransferenciaCtaInscrita(primeroGuardar);
			break;
		case "Transferencias Cuenta No Inscrita":
		case "Transferencias Cuenta NO Inscrita":
		case "Cuenta No Inscrita":
			controller.crearTransferenciaCtaNoInscrita(primeroGuardar);
			break;
		case "ORPA":
			controller.OrdenesDePago();
			break;
		case "Pagos Propios":
			controller.crearPagosPropios(primeroGuardar);
			break;
		case "Avances Tarjeta de Crédito":
		case "Avance TC":
			controller.crearAvanceTC(primeroGuardar);
			break;
		case "Tx Internacionales Recibir desde el exterior":
			controller.Recibirdinerodelexterior(primeroGuardar);
			break;
		case "Tx Internacionales Enviar al exterior":
			controller.EnviarTransferenciasInternacionales(primeroGuardar);
			break;
		case "Tx Internacionales Enviar al exterior Pendiente Aprobación":
			controller.inicioCrearTx();
			controller.EnviarTransferenciasInternacionalesPendAprobacion();
			break;
		case "Divisas Documentos y Formularios":
			String msg = null;
			controller.inicioCrearTx();
			pageDocumentos_Y_Formularios = new PageDocumentos_Y_Formularios(pageLogin);
			pageDivisas = new PageDivisas(pageLogin);
			if (pageDivisas.switchToFrameDivisas()) {
				msg = pageDocumentos_Y_Formularios.IralModuloDocumetosYFormularios(tipoPrueba, servicio, fechaTx,
						horaTx, tipoMoneda);
				if (msg != null) {
					if (!msg.isEmpty())
						Reporter.reportEvent(Reporter.MIC_FAIL, msg);
					pageOrigen.terminarIteracion();
				}
				String concepTx = SettingsRun.getTestData().getParameter("Concepto de la transferencia").trim();
				String numCambiario1 = DXCUtil.left(SettingsRun.getTestData().getParameter("Numeral cambiario 1"), 4);
				String valorNumeral1 = SettingsRun.getTestData().getParameter("Valor numeral cambiario 1");
				String numCambiario2 = DXCUtil.left(SettingsRun.getTestData().getParameter("Numeral cambiario 2"), 4);
				String valorNumeral2 = SettingsRun.getTestData().getParameter("Valor numeral cambiario 2");
				String tipoOperacion = SettingsRun.getTestData().getParameter("Tipo de operación");
				String desInversion = SettingsRun.getTestData().getParameter("Destino de la inversión");
				String opciondeinversion = SettingsRun.getTestData().getParameter("Opción de inversión");
				String deducciones = SettingsRun.getTestData().getParameter("Deducciones");
				String cambiarConcepto = SettingsRun.getTestData().getParameter("Cambiar Concepto de la transferencia");
				String conceptoAcambiar = SettingsRun.getTestData()
						.getParameter("Concepto de la transferencia A Cambiar");
				String numeroDeposito = SettingsRun.getTestData().getParameter("Número de depósito 1");
				String numeroFacturaoReferDeclaracion = SettingsRun.getTestData()
						.getParameter("Número de declaración 1");
				String cambiarlistnumeralOperacion_Numeral1 = SettingsRun.getTestData()
						.getParameter("Cambiar Numeral cambiario 1");
				String numeral1Acambiar = SettingsRun.getTestData().getParameter("Numeral cambiario A Cambiar 1");
				String cambiarDatosDescripciondelaoperacion = SettingsRun.getTestData()
						.getParameter("Cambiar Datos Descripción de la operación");
				String tipodeidentificacionReceptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Tipo de identificación");
				String numerodeidentificacionReceptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Número de identificación");
				String digitodeverificacionReceptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Dígito de verificación");
				String nombreorazonsocialReceptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Nombre o razón social");
				String codigopaisReceptora = SettingsRun.getTestData().getParameter("Empresa receptora - Código país");
				String codigodepartamentoReptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Código departamento");
				String codigociudadReptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Código ciudad");
				String codigoCIIUReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Código CIIU");
				String telefonoReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Teléfono");
				String direccionReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Dirección");
				String correoReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Correo electrónico");
				String sectorReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Sector");
				String tipodeempresaReptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Tipo de empresa");
				String superintendenciaReptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Superintendencia de vigilancia");
				String actividadReptora = SettingsRun.getTestData().getParameter("Empresa receptora - Actividad");
				String tipoderegimenReptora = SettingsRun.getTestData()
						.getParameter("Empresa receptora - Tipo de régimen");
				String naturalezaReptora = SettingsRun.getTestData().getParameter("Empresa receptora  - Naturaleza");
				pageDocumentos_Y_Formularios.EmpresaReceptora(tipodeidentificacionReceptora,
						numerodeidentificacionReceptora, digitodeverificacionReceptora, nombreorazonsocialReceptora,
						codigopaisReceptora, codigodepartamentoReptora, codigociudadReptora, codigoCIIUReptora,
						telefonoReptora, direccionReptora, correoReptora, sectorReptora, tipodeempresaReptora,
						superintendenciaReptora, actividadReptora, tipoderegimenReptora, naturalezaReptora);
				String identificacionInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Tipo de identificación");
				String numerodeidentificacionInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Número de identificación");
				String digitodeverificacionInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Dígito de verificación");
				String nombreorazonsocialInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Nombre o razón social");
				String codigoPaisInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Código país");
				String codigoDepartamentoInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Código departamento");
				String codigociudadInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Código ciudad");
				String codigoCIIUInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Código CIIU");

				String correoElectronicoInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Correo electrónico");
				String sectorInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Sector");
				String tipodeempresaInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Tipo de empresa");
				String superintendenciaInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Superintendencia de vigilancia");
				String naturalezaInversionista = SettingsRun.getTestData()
						.getParameter("Identificación del inversionista - Naturaleza");
				String telefonoInversionista = "";
				String direccionInversionista = "";
				if (SettingsRun.getTestData().parameterExist("Identificación del inversionista - Teléfono"))
					telefonoInversionista = SettingsRun.getTestData()
							.getParameter("Identificación del inversionista - Teléfono");
				if (SettingsRun.getTestData().parameterExist("Identificación del inversionista - Dirección"))
					direccionInversionista = SettingsRun.getTestData()
							.getParameter("Identificación del inversionista - Dirección");
				pageDocumentos_Y_Formularios.Inversionista(identificacionInversionista,
						numerodeidentificacionInversionista, digitodeverificacionInversionista,
						nombreorazonsocialInversionista, codigoPaisInversionista, codigoDepartamentoInversionista,
						codigociudadInversionista, codigoCIIUInversionista, correoElectronicoInversionista,
						sectorInversionista, tipodeempresaInversionista, superintendenciaInversionista,
						naturalezaInversionista, telefonoInversionista, direccionInversionista);
				String numerodelprestamooaval = SettingsRun.getTestData().getParameter("Número del préstamo o aval");
				String nombredelacreedoroeldeudoroavalista = SettingsRun.getTestData()
						.getParameter("Nombre del acreedor o el deudor o avalista");
				String nombredeldeudoroacreedorAvaladoobeneficiarioresidente = SettingsRun.getTestData()
						.getParameter("Nombre del deudor o acreedor / Avalado o beneficiario residente");
				String tipodeidentificacióndeldeudor = SettingsRun.getTestData()
						.getParameter("Tipo de identificación del deudor");
				String numerodeidentificaciondeldeudor = SettingsRun.getTestData()
						.getParameter("Número de identificación del deudor");
				String digitodeverificacion = SettingsRun.getTestData().getParameter("Dígito de verificación");
				String monedaestipulada = SettingsRun.getTestData().getParameter("Moneda estipulada");
				String valormonedaestipulada = SettingsRun.getTestData().getParameter("Valor moneda estipulada");
				String tasadecambiomoneda = SettingsRun.getTestData().getParameter("Tasa de cambio moneda");
				String cambiarValornumeralcambiario1 = SettingsRun.getTestData()
						.getParameter("Cambiar Valor numeral cambiario 1");
				String ValorNumeral1Camb = SettingsRun.getTestData()
						.getParameter("Valor numeral cambiario A Cambiar 1");
				String validacionAdicionar = SettingsRun.getTestData().getParameter("Validar Numerales");
				String validacionDian = SettingsRun.getTestData().getParameter("Validacion - DIAN");
				String cargueDocu = SettingsRun.getTestData().getParameter("Cargue Archivo Documentos");
				String[] rutaArch = cargueDocu.split(",");
				msg = pageDocumentos_Y_Formularios.DatosDocumetosYFormularios(concepTx, tipoOperacion, desInversion,
						opciondeinversion, valorTx, numCambiario1, valorNumeral1, numCambiario2, valorNumeral2,
						deducciones, cambiarConcepto, conceptoAcambiar, numeroDeposito, numeroFacturaoReferDeclaracion,
						cambiarlistnumeralOperacion_Numeral1, numeral1Acambiar, cambiarDatosDescripciondelaoperacion,
						numerodelprestamooaval, nombredelacreedoroeldeudoroavalista,
						nombredeldeudoroacreedorAvaladoobeneficiarioresidente,

						tipodeidentificacióndeldeudor, numerodeidentificaciondeldeudor, digitodeverificacion,
						monedaestipulada, valormonedaestipulada, tasadecambiomoneda, cambiarValornumeralcambiario1,
						ValorNumeral1Camb, validacionAdicionar, validacionDian, rutaArch);

				if (msg != null && !msg.contains(
						"Documentos enviados exitosamente. Davivienda validará la información recibida y en caso de presentar inconsistencias informará vía correo electrónico. Por favor haga seguimiento de su operación en la opción de consultas y verifique el estado de su trámite.")) {
					Reporter.reportEvent(Reporter.MIC_FAIL, msg);
					pageOrigen.terminarIteracion();
				}
			}
			break;
		case "Consulta Tx Internacionales Validar Estado":
			controller.inicioCrearTx();
			pageConsultatxInternacional = new PageConsultatxInternacional(pageLogin);
			pageConsultatxInternacional.ConsultaNumtx(tipoPrueba, empresa, servicio, usuario, tipoConstaTxRealizadas,
					ordenanteBeneficiario, tipoTranferencia, estado, tipoMoneda, fechaTx, horaTx, fechaDesde,
					fechaHasta, valorTx);

			break;
		}
		boolean desdeelDetalle = desde_el_Detalle.equals(DE_El_DETALLE);
		if (primeroGuardar && !servicio.contains("Internacionales")
				|| primeroGuardar && !servicio.contains("Internacionales") && DatosDavivienda.IS_RISKMOTOR)
			controller.aprobarTxPendiente(desdeelDetalle);
		String msgTx = null;
		if (primeroGuardar && servicio.contains("Internacionales") && !servicio.contains("Aprobación")
				|| primeroGuardar && servicio.contains("Internacionales") && DatosDavivienda.IS_RISKMOTOR) {
			msgTx = controller.aprobarTxPendienteIntern(desdeelDetalle);
		}
		numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();
		informe = SettingsRun.getTestData().getParameter("Informes").trim();

		boolean unaFirma = numAprobaciones.equals(CN_APRO_PEND);

		pageConsultasyExtractos = new PageConsultasyExtractos(pageLogin);

		int numfirm = Integer.parseInt(numAprobaciones);
		int contador = 1;

		if (!unaFirma) {
			pageLogin.CerrarSesionFront();
			do {
				if (contador != numfirm) {
					contador++;
				}

				Frontfirmas(contador);

				if (!servicio.contains("Internacionales") && !servicio.contains("Pagos Automaticos")) {
					controller = new ControllerCrearTx(pageLogin);
					if (realizarMR.equals("SI")) {
						controller.SetPrioridaMr(riesgo);
					}

					DXCUtil.wait(10);
					controller.aprobarTxPendiente(desdeelDetalle);
					if (contador == numfirm) {
						controller.validacionSaldosStratus();
					}
					// SE UTILIZA CERRA SESION MIDDLE PARA CERRAR EL CHROME
					if (numfirm == contador) {
						pageConsultasyExtractos = new PageConsultasyExtractos(pageLogin);
						String tipoProduct = SettingsRun.getTestData().getParameter("Tipo producto origen / Franquicia")
								.trim();
						String numeroProducto = SettingsRun.getTestData().getParameter("Número producto origen").trim();
						pageConsultasyExtractos.ConsultayExtractos(servicio, navegador, tipoIDEmpresa, numeroIDEmpresa,
								tipoIdentificacion, Idusuario, tipoProduct, numeroProducto, primeroGuardar);
					}

				} else if (servicio.contains("Pagos Automaticos")) {
					pageTransaccionesProgramadas = new PageTransaccionesProgramadas(pageLogin);
					pageTransaccionesProgramadas.ConsultaPagosAutomatico();

				} else if (servicio.contains("Internacionales")) {

					DXCUtil.wait(10);

					controller.aprobarTxPendienteIntern(primeroGuardar);

					if (numfirm == contador) {
						pageConsultatxInternacional = new PageConsultatxInternacional(pageLogin);

						if (fechaTx == null || fechaTx.trim().isEmpty() || horaTx == null && horaTx.trim().isEmpty()) {
							fechaTx = SettingsRun.getTestData().getParameter("Fecha tx");
							horaTx = SettingsRun.getTestData().getParameter("Hora tx");
						}

						estado = SettingsRun.getTestData().getParameter("Estado");

						pageConsultatxInternacional.ConsultaNumtx(tipoPrueba, empresa, servicio, usuario,
								tipoConstaTxRealizadas, ordenanteBeneficiario, tipoTranferencia, estado, tipoMoneda,
								fechaTx, horaTx, fechaDesde, fechaHasta, valorTx);
						pageConsultatxInternacional.getDriver().switchTo().defaultContent();
					}
				}

				pageLogin.CerrarSesionFront();
				if (contador == numfirm)

					if (DatosDavivienda.IS_RISKMOTOR) {
						if (servicio.contains("Nómina") || servicio.contains("Pago a Proveedores")
								|| servicio.contains("AFC") || servicio.contains("Crédito.3ros")) {
							controller.validarIngresoMRDestinosMasivo();
						} else {
							controller.validarIngresoMR();
						}
					}

			} while (contador < numfirm);
		} else if (unaFirma) {
			boolean internacionales = false;
			String estado = null;
			if ((!servicio.contains("Internacionales") && !servicio.contains("Divisas"))
					&& !servicio.contains("Pagos Automaticos") && !servicio.contains("ORPA")) {
				pageConsultasyExtractos = new PageConsultasyExtractos(pageLogin);
				String tipoProduct = SettingsRun.getTestData().getParameter("Tipo producto origen / Franquicia").trim();
				String numeroProducto = SettingsRun.getTestData().getParameter("Número producto origen").trim();

				estado = pageConsultasyExtractos.ConsultayExtractos(servicio, navegador, tipoIDEmpresa, numeroIDEmpresa,
						tipoIdentificacion, Idusuario, tipoProduct, numeroProducto, primeroGuardar);

				if (estado != null && estado.equals("NO SE ENCONTRARON DATOS")) {

					if (DatosDavivienda.IS_RISKMOTOR) {

						if (servicio.contains("Númina") || servicio.contains("Pago a Proveedores")
								|| servicio.contains("AFC") || servicio.contains("Crédito.3ros")) {
							controller.validarIngresoMRDestinosMasivo();
						} else {
							controller.validarIngresoMR();
						}
					}
					pageOrigen.terminarIteracion();
				}
				estadotxFinal = pageConsultasyExtractos.estadoFinalTx();
				if (servicio.contains("Nómina") || servicio.contains("Pago a Proveedores") || servicio.contains("AFC")
						|| servicio.contains("Crédito.3ros"))
					if (pageConsultasyExtractos.CuentaDesMotor() != null) {
						controller.cuentasDesMotor = pageConsultasyExtractos.CuentaDesMotor();
					}
			} else if (servicio.contains("Pagos Automaticos")) {
				pageTransaccionesProgramadas = new PageTransaccionesProgramadas(pageLogin);
				pageTransaccionesProgramadas.ConsultaPagosAutomatico();

			} else if ((servicio.contains("Internacionales") || servicio.contains("Divisas"))
					&& !servicio.contains("Aprobación") && !servicio.contains("Validar")) {

				pageConsultatxInternacional = new PageConsultatxInternacional(pageLogin);
				if (fechaTx == null || fechaTx.trim().isEmpty() || horaTx == null && horaTx.trim().isEmpty()) {
					fechaTx = SettingsRun.getTestData().getParameter("Fecha tx");
					horaTx = SettingsRun.getTestData().getParameter("Hora tx");
				}
				estado = SettingsRun.getTestData().getParameter("Estado");
				pageConsultatxInternacional.ConsultaNumtx(tipoPrueba, empresa, servicio, usuario,
						tipoConstaTxRealizadas, ordenanteBeneficiario, tipoTranferencia, estado, tipoMoneda, fechaTx,
						horaTx, fechaDesde, fechaHasta, valorTx);
				if (stratus.equals("SI"))
					pageConsultatxInternacional.ValidacionesStratusConsulta();
				pageConsultatxInternacional.getDriver().switchTo().defaultContent();
				if (informe.equals("SI")) {
					Reporter.reportEvent(Reporter.MIC_PASS, "");
					DatosEmpresarial.loadLoginDataFija("0", numCliEmp, tipoDoc, numDoc, clave, datoTok);

					String[] datosLogin = DatosEmpresarial.getLoginData();
					Reporter.write("Datos de Logueo [" + DXCUtil.arrayToString(datosLogin, " - ") + "]");
					pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la
																// prueba
					pageLogin.cargarUrls();
					String msgError = pageLogin.loginMiddle(); // M�todo para hacer el logueo en el portal Middle
																// Pyme.
					pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta en
					if (msgError == null) {
						controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);
						numAprobaciones = SettingsRun.getTestData().getParameter("Números de Aprobaciones").trim();

						controllerValiPymeMiddle.ValidacionInformeTransInternacional();

					}
				} else {
					pageOrigen.getDriver().switchTo().defaultContent();
					internacionales = true;
				}
			} else if ((servicio.contains("Internacionales") || servicio.contains("Divisas"))
					&& servicio.contains("Aprobación") && !servicio.contains("Validar Estado")) {
				pageConsultatxInternacional = new PageConsultatxInternacional(pageLogin);
				if (fechaTx == null || fechaTx.trim().isEmpty() || horaTx == null && horaTx.trim().isEmpty()) {
					fechaTx = SettingsRun.getTestData().getParameter("Fecha tx");
					horaTx = SettingsRun.getTestData().getParameter("Hora tx");
				}
				estado = SettingsRun.getTestData().getParameter("Estado");
				pageConsultatxInternacional.ConsultaNumtx(tipoPrueba, empresa, servicio, usuario,
						tipoConstaTxRealizadas, ordenanteBeneficiario, tipoTranferencia, estado, tipoMoneda, fechaTx,
						horaTx, fechaDesde, fechaHasta, valorTx);
			}
			if (estado != null) {
				controller.SetEstado(estado);
			}
			if (DatosDavivienda.IS_RISKMOTOR) {
				if (servicio.contains("Nómina") || servicio.contains("Pago a Proveedores") || servicio.contains("AFC")
						|| servicio.contains("Crédito.3ros")) {
					controller.validarIngresoMRDestinosMasivo();
				} else {
					controller.validarIngresoMR();

				}
			}
			if (cobros.equals("SI")) {
				pageAdminCombosCobros = new PageAdminCombosCobros(pageLogin);
				validacionDescuento = controller.validacionDescuentoTx(resultsMiddle, segmentosStratus, estadotxFinal,
						PageAdminCombosCobros.getInformacionConsultada());
			}
			double sumaCobros = 0;
			if (cobros.equals("SI")) {
				String tipoCobro = SettingsRun.getTestData().getParameter("Tipo Prueba Cobros");
				String verificarCombo = resultsMiddle.get(0).get("Verificacion Combo");
				if (tipoCobro.equals("COBROS CON COMBOS") && verificarCombo.contains("Empresa tiene combo")
						|| tipoCobro.equals("COBROS SIN COMBOS") && verificarCombo.contains("Empresa tiene combo")) {
					int totalCantidadTx = Integer.parseInt(resultsMiddle.get(0).get("Cantidad Tx Acumuladas"));
					if (totalCantidadTx > 0) {
						DatosEmpresarial.loadLoginDataFija("0", SettingsRun.getGlobalData("MIDDLE.tipoDoc"),
								SettingsRun.getGlobalData("MIDDLE.numeroDeId"),
								SettingsRun.getGlobalData("MIDDLE.clavePersonal"),
								SettingsRun.getGlobalData("MIDDLE.tipoToken"),
								SettingsRun.getGlobalData("MIDDLE.numeroToken"));
						String[] datosLogin = DatosEmpresarial.getLoginData();
						Reporter.reportEvent(Reporter.MIC_INFO,
								"*** Datos de Logueo Middle: [" + DXCUtil.arrayToString(datosLogin, " - ") + "]");
						pageLogin = new PageLoginPymes(navegador);// Carga en que navegador se va realizar la
						pageLogin.cargarUrls();
						String msgError = pageLogin.loginMiddle(); // M�todo para hacer el logueo en el portal
						pageLogin.selecionambienteClose("SI");// Indicativo para el ambiente middle// Marca si esta
						controllerValiPymeMiddle = new ControllerValiPymeMiddle(pageLogin);
						controllerMiddleCobros = new ControllerMiddleCobros(pageLogin);

						int[] informacionCondatorPorTx = ControllerCrearTx.getTotalContador();
						controllerMiddleCobros.contadorFinal(informacionCondatorPorTx,
								resultsMiddle.get(0).get("Verificacion Combo"));
						pageLogin.CerrarSesionMiddle();
						Reporter.reportEvent(Reporter.MIC_INFO, "*** Cobros realizados en esta transacción");
						for (int i = 0; i < validacionDescuento.length; i++) {
							double valorCobro = validacionDescuento[i];
							Reporter.reportEvent(Reporter.MIC_INFO, "Valor de cobro " + (i + 1) + ": " + valorCobro);
							sumaCobros += validacionDescuento[i];
						}
						Reporter.reportEvent(Reporter.MIC_INFO, "*** Total cobros realizados: " + sumaCobros);
					} else if (totalCantidadTx <= 0) {
						Reporter.reportEvent(Reporter.MIC_INFO,
								"No se ha aplicado ninguna sumatoria de tx porque no se aplico ningun descuento");
					}
				} else {
					Reporter.reportEvent(Reporter.MIC_INFO,
							"*** Cobros realizados en esta transacción - Los cobros sin combos no aplica contador");
					for (int i = 0; i < validacionDescuento.length; i++) {
						double valorCobro = validacionDescuento[i];
						Reporter.reportEvent(Reporter.MIC_INFO, "Valor de cobro " + (i + 1) + ": " + valorCobro);
						sumaCobros += validacionDescuento[i];
					}
					Reporter.reportEvent(Reporter.MIC_INFO, "*** Total cobros realizados: " + sumaCobros);
					SettingsRun.exitTestIteration();
				}
			}
			pageLogin.changeToDefaultFrame();
			pageLogin.CerrarSesionFront();
			Reporter.reportEvent(Reporter.MIC_PASS, "Transación exitosa");

			SettingsRun.exitTestIteration();
		}
	}
	public void adicionarRegistroMR(String tx) throws Exception {
		DatosDavivienda.RISKMOTOR.adicionarRegistro();
		DatosDavivienda.RISKMOTOR.setTemporalTime(fechaHoraLogMR);
		DatosDavivienda.RISKMOTOR.setTime();
		DatosDavivienda.RISKMOTOR.setCanal("WEB_PYME");
		DatosDavivienda.RISKMOTOR.setAmbienteDePruebas(nombreAmbiente);
		DatosDavivienda.RISKMOTOR.setMonto();
		DatosDavivienda.RISKMOTOR.setNumeroTx();
		DatosDavivienda.RISKMOTOR.setResultado();
		DatosDavivienda.RISKMOTOR.setObservacion();
		String observa = SettingsRun.getTestData().getParameter("Desde_el_Detalle").trim();
		DatosDavivienda.RISKMOTOR.setObservacion(observa);
		String uuid = SettingsRun.getTestData().getParameter("Hash").trim();
		DatosDavivienda.RISKMOTOR.setHash(uuid);
		if (controller == null && !tipoPrueba.equals("Login"))
			controller = new ControllerCrearTx(pageLogin);

		servicio = SettingsRun.getTestData().getParameter("Servicio").trim();
		if (!tipoPrueba.equals(TP_LOGIN)) {
			DatosDavivienda.RISKMOTOR.setTransaccion(controller.getTransaccion(tipoPrueba, servicio));
		} else {
			DatosDavivienda.RISKMOTOR.setTransaccion("Login Exitoso");
		}
		String userType = "Token"; // VALOR POR DEFECTO
		if (DatosEmpresarial.TIPO_TOKEN.equals(DatosEmpresarial.TOKEN_OTP))
			userType = "Virtual";
		String intentos = SettingsRun.getTestData().getParameter("Ingresos Fallidos").trim();
		int intentosFall = 0; // VALOR POR DEFECTO
		if (DXCUtil.isInteger(intentos))
			intentosFall = Integer.valueOf(intentos);
		DatosDavivienda.RISKMOTOR.setUserType(userType);
		DatosDavivienda.RISKMOTOR.setRisk(riesgoBc);
		if (!servicio.equals("Tx Internacionales Recibir desde el exterior")
				&& !servicio.equals("Tx Internacionales Enviar al exterior"))
			DatosDavivienda.RISKMOTOR.setRiskEFM(riesgoEfm);
		DatosDavivienda.RISKMOTOR.setNumRetosFallidos(intentosFall);
		DatosDavivienda.RISKMOTOR.setNavegador_SistemaOperativo(navegador);
		DatosDavivienda.RISKMOTOR.setCliente(DatosEmpresarial.CLI_EMPRESAR);
		DatosDavivienda.RISKMOTOR.setDocumento(DatosEmpresarial.TIPO_ID_LOGUEO, DatosEmpresarial.NUM_ID_LOGUEO);

		if (tx.equals("Login")) {
			DatosDavivienda.RISKMOTOR.setCuentaOrigen(Motorna);
			DatosDavivienda.RISKMOTOR.setCuentaDestino(Motorna);
			DatosDavivienda.RISKMOTOR.setNumCuentaOrigen(Motorna);
			DatosDavivienda.RISKMOTOR.setNumCuentaDestino(Motorna);
			DatosDavivienda.RISKMOTOR.set_CtaOrigenODestMIGRADA(Motorna);

			DatosDavivienda.RISKMOTOR.setNumTxCanal(Motorna);
			DatosDavivienda.RISKMOTOR.setNumIdEmpresa(Motorna);
		}
		if (tx.equals("Error en Login")) {
			if (riesgo.equals("Bajo") || riesgo.equals("Medio"))
				DatosDavivienda.RISKMOTOR.setObservacion(
						"El comportamiento de la prueba no es correcto para el tipo de riesgo - error en login");

			DatosDavivienda.RISKMOTOR.setTemporalResultado("Declinada");
			DatosDavivienda.RISKMOTOR.setResultado();
		}

		Reporter.reportEvent(Reporter.MIC_PASS, "*** Se adiciona al MR");
	}
	public void LoginStratus() throws Exception {
		if (stratus.equals("SI")) {

			String strusu = SettingsRun.getGlobalData("STRATUS.usuario");
			String strpass = SettingsRun.getGlobalData("STRATUS.password");
			if (DatosDavivienda.STRATUS == null) {
				DatosDavivienda.STRATUS = new Stratus(strusu, strpass, "EMPRESAS");
				Reporter.reportEvent(Reporter.MIC_INFO, "Se cargan datos para logueo" + " de Stratus");
			}
		}
	}
	public PageInicioC360 logueoC360() throws Exception {
		// INTENTA HACER EL LOGUEO - C360
		Reporter.write("*** Validar CLIENTE 360 ***");
		pageLoginC360 = new PageLogin(navegador);
		pageInicioC360 = new PageInicioC360(pageLoginC360);
		pageLoginC360.login360(SettingsRun.getGlobalData("data.c360User"), SettingsRun.getGlobalData("data.c360Pwd"));
		return pageInicioC360;
	}

	@Override
	public void initializeControllerAndConfiguration() throws Exception {
		// TODO Auto-generated method stub

	}
}
