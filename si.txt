private String enviarAlExteFall(String[] getLoginData) throws Exception {

		// cambiar a frame de divisas
		if (!parent.switchToFrameDivisas())
			return "Error";
		Util.wait(2);

		// comprobación de inactividad (inlined)
		if (parent.isDisplayed(loc.txtInactividad)) {
			Reporter.reportEvent(Reporter.MIC_FAIL, parent.getText(loc.txtInactividad));
			return "Error";
		}

		if (!parent.waitForElement(loc.enviarExt, 20, "loc.enviarExt"))
			return "Error";
		parent.click(loc.enviarExt);
		Util.wait(4);

		Evidence.save("Enviar al exterior: ", parent);

		// manejo inicial de mensaje de error (reintenta 2 veces)
		if (parent.isDisplayed(loc.mensajeError)) {
			String textoError = null;
			for (int i = 0; i < 2; i++) {
				textoError = parent.getText(loc.textoError);
				Util.wait(1);
				parent.click(loc.botonAceptar);
				Reporter.reportEvent(Reporter.MIC_INFO, textoError);
				Evidence.save("Enviar al exterior: ", parent);
				parent.waitClickable(loc.enviarExt, 10);
				Evidence.save("Enviar al exterior: ", parent);
				parent.click(loc.enviarExt);
			}
			if (textoError != null && textoError.contains(
					"¡Recuerde...! Este servicio está disponible los días hábiles entre las 8:00 a.m. y la 1:00 p.m.")) {
				Reporter.reportEvent(Reporter.MIC_FAIL, textoError);
				return "Error";
			}
		}

		// segunda comprobación de inactividad (inlined)
		if (parent.isDisplayed(loc.txtInactividad)) {
			Reporter.reportEvent(Reporter.MIC_FAIL, parent.getText(loc.txtInactividad));
			return "Error";
		}

		parent.waitForElementInteractable(loc.botonAceptar, 10, "loc.botonAceptar");
		if (loc.botonAceptar.isDisplayed()) {
			Util.wait(1);
			parent.click(loc.botonAceptar);
		}

		// seleccionar cuenta
		getLoginData[33] = Util.right(getLoginData[33], 4);
		if (!parent.seleccionarCuenta(parent.getDriver(), getLoginData[32], getLoginData[33])) {
			return "Error";
		}

		Evidence.save("Enviar al exterior: ", parent);
		parent.click(loc.botonSiguien);
		parent.waitClickable(loc.botonSiguien, 10);

		// seleccion moneda y valores
		getLoginData[34] = Util.left(getLoginData[34], 3);
		parent.waitClickable(loc.listaMoneda, 10);
		parent.selectListItem(loc.listaMoneda, getLoginData[34]);
		parent.write(loc.campoMonto, "999999999");
		parent.selectListItem(loc.listaConceptoCambiario, getLoginData[36]);

		int mnto = 999999999;
		int valr1 = mnto / 2;
		int calc = mnto - valr1;
		String valr1St = String.valueOf(valr1);
		String calcSt = String.valueOf(calc);

		parent.waitForElementInteractable(loc.numeralCambiario1, 10, "loc.numeralCambiario1");
		parent.selectListItem(loc.numeralCambiario1, getLoginData[37]);

		if (!parent.waitForElement(loc.adicionarNumCamb, 10, "loc.adicionarNumCamb"))
			return "Error";
		parent.click(loc.adicionarNumCamb);

		parent.waitClickable(loc.numeralCambiario2, 10);
		parent.selectListItem(loc.numeralCambiario2, getLoginData[39]);

		if (!parent.waitForElement(loc.valor1, 20, "loc.valor1"))
			return "Error";
		parent.write(loc.valor1, valr1St);
		parent.write(loc.valor2, calcSt);
		parent.click(loc.tipoEnvioNuevo);
		Evidence.save("Prueba maximo de campos: ", parent);
		parent.click(loc.botonSiguien);
		Util.wait(1);

		if (loc.mensajeError.isDisplayed()) {
			Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
			Util.wait(1);
			Evidence.save("Prueba maximo de campos: ", parent);
			parent.click(loc.botonAceptar);
		} else {
			Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo prosiguio apesar de los campos invalidos.");
			return "Error";
		}

		// validar campo monto nuevamente y pruebas de campos numéricos
		if (!parent.waitForElement(loc.campoMonto, 20, "loc.valor1"))
			return "Error";
		parent.write(loc.campoMonto, "80000");
		mnto = 80000;
		valr1 = mnto / 2;
		calc = mnto - valr1;
		valr1St = String.valueOf(valr1);
		calcSt = String.valueOf(calc);

		parent.mouseOver(loc.valor1);
		parent.mouseClick();
		if (loc.botonAceptar.isDisplayed()) {
			parent.click(loc.botonAceptar);
		}
		Util.wait(1);

		parent.write(loc.valor1, "Try text writing");
		Util.wait(1);
		String campoValor = parent.getText(loc.valor1);
		if (!campoValor.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL, "El campo numerico permitio ingresar caracteres alfanumericos.");
			Evidence.save("El campo numerico permitio ingresar caracteres alfanumericos.", parent, loc.valor1);
			return "Error";
		}
		if (loc.botonAceptarTw.isDisplayed()) {
			parent.click(loc.botonAceptarTw);
		}
		parent.write(loc.valor1, valr1St);
		Util.wait(1);

		parent.mouseOver(loc.valor2);
		parent.mouseClick();
		if (loc.botonAceptarTw.isDisplayed()) {
			parent.click(loc.botonAceptarTw);
		}
		Util.wait(1);
		if (loc.botonAceptarTw.isDisplayed()) {
			parent.click(loc.botonAceptarTw);
		}
		parent.write(loc.valor2, "Try text writing");
		Util.wait(1);
		campoValor = parent.getText(loc.valor2);
		if (!campoValor.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL, "El campo numerico permitio ingresar caracteres alfanumericos.");
			return "Error";
		}
		parent.write(loc.valor2, calcSt);
		Util.wait(2);

		if ("Nuevo envío".equals(getLoginData[41])) {
			Evidence.save("Enviar al exterior: ", parent);
			parent.click(loc.botonSiguien);

			if (!parent.waitForElement(loc.nombreBenefi, 20, "loc.nombreBenefi"))
				return "Error";

			parent.write(loc.nombreBenefi, "-.[},)(+¨¨*.");
			if (parent.waitForElementInteractable(loc.nombreBenefi, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo Nombre beneficiario permite caracteres especiales");
			}
			parent.write(loc.nombreBenefi,
					"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
			if (parent.waitForElementInteractable(loc.nombreBenefi, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo Nombre beneficiario permite caracteres numericos");
			}

			if (!parent.waitForElement(loc.paisBenefi, 10, "loc.paisBenefi"))
				return "Error";
			parent.write(loc.paisBenefi, getLoginData[43].toUpperCase());
			parent.waitForElementInteractable(loc.listaPais, 5, "loc.listaPais");
			if (parent.isDisplayed(loc.listaPais)) {
				Util.wait(2);
				parent.click(loc.listaPais);
			}

			parent.write(loc.ciudadBene, "-.[},)(+¨¨*.");
			if (parent.waitForElementInteractable(loc.ciudadBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo Ciudad y pais permite caracteres especiales");
			}
			parent.write(loc.ciudadBene,
					"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
			if (parent.waitForElementInteractable(loc.ciudadBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo Ciudad y pais permite caracteres numericos");
			}

			parent.write(loc.direccionBene, "-.[},)(+¨¨*.");
			if (parent.waitForElementInteractable(loc.direccionBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO,
						"El campo direccion beneficiario permite caracteres especiales");
			}
			parent.write(loc.direccionBene,
					"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
			if (parent.waitForElementInteractable(loc.direccionBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo direccion beneficiario permite caracteres numericos");
			}

			parent.write(loc.ibanCabeBene,
					"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
			parent.submit(loc.ibanCabeBene);
			parent.waitForElementInteractable(loc.mensajeError, 10, "loc.mensajeError");
			if (loc.mensajeError.isDisplayed()) {
				Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
				Util.wait(1);
				Evidence.save("Prueba IBAN: ", parent);
				parent.click(loc.botonAceptar);
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL,
						"El flujo prosiguio apesar de que el IBAN o el CLABE esta incorrecto.");
				return "Error";
			}

			parent.write(loc.ibanCabeBene, "-.[},)(+¨¨*.");
			campoValor = parent.getText(loc.ibanCabeBene);
			if (!campoValor.isEmpty()) {
				Reporter.reportEvent(Reporter.MIC_FAIL, "El campo IBAN o CLABE.");
				return "Error";
			}

			parent.write(loc.ibanCabeBene, "IBAN12345678912345678912345");

			parent.selectListItem(loc.tipoInfoBene, getLoginData[46]);
			parent.write(loc.InfoBene, getLoginData[47]);
			parent.write(loc.InfoBene, "-.[},)(+¨¨*.");
			if (parent.waitForElementInteractable(loc.InfoBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo tipo beneficiario permite caracteres especiales");
			}
			parent.write(loc.InfoBene,
					"123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456789123456");
			if (parent.waitForElementInteractable(loc.InfoBene, 5, "")) {
				Reporter.reportEvent(Reporter.MIC_INFO, "El campo tipo beneficiario permite caracteres numericos");
			}

			Evidence.save("Enviar al exterior: ", parent);
			parent.click(loc.botonSiguien);

			if (!parent.waitForElement(loc.tipoCodBanBene, 20, "loc.tipoCodBanBene"))
				return "Error";
			parent.click(loc.tienBancoInterm);
			parent.selectListItem(loc.tipoCodBanBene, getLoginData[48]);
			Util.wait(1);
			parent.write(loc.numCodBene, "12345");
			parent.submit(loc.numCodBene);
			Util.wait(2);
			if (loc.txtCodgNoEx.isDisplayed()) {
				Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.txtCodgNoEx));
				Evidence.save("Codigo invalido: ", parent);
				Util.wait(1);
				parent.write(loc.numCodBene, getLoginData[49]);
				parent.waitForElementInteractable(loc.listaBenef, 10, "loc.listaBenef");
				if (parent.isDisplayed(loc.listaBenef))
					Util.wait(1);
				parent.click(loc.listaBenef);
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo pasa apesar de ingresar un codigo erroneo");
				return "Error";
			}
			parent.selectListItem(loc.tipoInteInfoBene, getLoginData[50]);
			Util.wait(1);
			parent.write(loc.numCodInterBene, "12345");
			parent.submit(loc.numCodInterBene);
			Util.wait(1);
			if (loc.txtCodgNoEx.isDisplayed()) {
				Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.txtCodgNoEx));
				Evidence.save("Codigo invalido banco intermediario: ", parent);
				Util.wait(1);
				parent.write(loc.numCodInterBene, getLoginData[49]);
				parent.waitForElementInteractable(loc.listaBenefInterme, 10, "loc.listaBenef");
				if (parent.isDisplayed(loc.listaBenefInterme))
					Util.wait(3);
				parent.click(loc.listaBenefInterme);
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL, "El flujo pasa apesar de ingresar un codigo erroneo");
				return "Error";
			}

			parent.click(loc.botonSiguien);

			parent.waitForElementInteractable(loc.mensajeError, 10, "loc.mensajeError");
			if (loc.mensajeError.isDisplayed()) {
				Reporter.reportEvent(Reporter.MIC_PASS, parent.getText(loc.textoError));
				Util.wait(1);
				Evidence.save("No podemos atender la solicitud", parent);
				parent.click(loc.botonAceptar);
			} else {
				Reporter.reportEvent(Reporter.MIC_FAIL, "El frlujo permitio continuar");
				return "Error";
			}
		} else {
			parent.click(loc.tipoEnvioFrecuente);
		}

		return "";
	}
