package Divisas;

import library.core.BaseTestNG;
import library.data.DataDriven;
import library.reporting.Reporter;
import library.settings.SettingsRun;

public class Launcher_Divisas extends BaseTestNG {

    Controller_Divisas control = new Controller_Divisas();

    @Override
    public void launchData() {
        SettingsRun.ARRAY_DATA_PARAMS = new String[] { "Tipo Cliente", "Cliente Empresarial", "Tipo Identificación",
                "Id usuario", "Clave personal o CVE", "Tipo Token", "Semilla / Valor Estático / Celular",
                "Nombre empresa", "Servicio", "Tipo de cuenta", "Número de cuenta", "Moneda", "Monto a transferir",
                "Concepto transferencia" };
        SettingsRun.DEFAULT_HEADER = 2;
    }

    @Override
    public void initializeControllerAndConfiguration() throws Exception {
        this.setController(control);
    }

    @Override
    public void doingTest() throws Exception {
        validarData();
        control.mainController();
    }

    public void validarData() throws Exception {
        DataDriven td = SettingsRun.getTestData();

        // Campos mínimos obligatorios
        String[] requeridos = { "Tipo Cliente", "Cliente Empresarial", "Tipo Identificación", "Id usuario",
                "Clave personal o CVE", "Tipo Token", "Semilla / Valor Estático / Celular", "Nombre empresa",
                "Servicio", "Moneda" };

        for (String key : requeridos) {
            String val = safeGet(td, key);
            if (val == null || val.trim().isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_NOEXEC,
                        "Por favor revisar la data, el dato: " + key + " no se encuentra presente");
                SettingsRun.exitTestIteration();
                return;
            }
        }

        // Montos y valores cambiarios (manejo de errores en sitio)
        String montoStr = safeGet(td, "Monto a transferir");
        double monto;
        try {
            monto = Double.parseDouble(montoStr.trim());
        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC, "[ERROR DATA] 'Monto a transferir' inválido: '" + montoStr + "'");
            SettingsRun.exitTestIteration();
            return;
        }

        String vnc1Str = safeGet(td, "Valor Primer Numeral cambiario");
        double vnc1;
        try {
            vnc1 = Double.parseDouble(vnc1Str.trim());
        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC,
                    "[ERROR DATA] 'Valor Primer Numeral cambiario' inválido: '" + vnc1Str + "'");
            SettingsRun.exitTestIteration();
            return;
        }

        String indicadorNumCamb2 = safeGet(td, "Segundo Numeral cambiario"); // si tiene algún valor, existe
        String vnc2Str = safeGet(td, "Valor Segundo Numeral cambiario");
        double vnc2;

        if ((indicadorNumCamb2 != null && !indicadorNumCamb2.trim().isEmpty())
                && (vnc2Str == null || vnc2Str.trim().isEmpty())) {
            Reporter.reportEvent(Reporter.MIC_INFO,
                    "El valor del segundo cambiario está vacío, se completa para igualar el monto de transferencia");
            vnc2 = monto - vnc1; // completamos para que vnc1 + vnc2 == monto
        } else {
            if (vnc2Str == null || vnc2Str.trim().isEmpty()) {
                vnc2 = 0d;
            } else {
                try {
                    vnc2 = Double.parseDouble(vnc2Str.trim());
                } catch (Exception e) {
                    Reporter.reportEvent(Reporter.MIC_NOEXEC,
                            "[ERROR DATA] 'Valor Segundo Numeral cambiario' inválido: '" + vnc2Str + "'");
                    SettingsRun.exitTestIteration();
                    return;
                }
            }
        }

        double sumaValores = vnc1 + vnc2;
        if (sumaValores > monto) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC,
                    "Los valores cambiarios no pueden superar el Monto a transferir, por favor corregir");
            SettingsRun.exitTestIteration();
            return;
        }
        // Si llega acá, la data es válida y hacemos return para continuar el flujo
    }

    /**
     * Helper mínimo: lee td.getParameter sin dejar que lance excepción al faltar
     * la columna; devuelve "" en caso de error/null.
     */
    private static String safeGet(DataDriven td, String key) {
        try {
            String v = td.getParameter(key);
            return v == null ? "" : v;
        } catch (Exception e) {
            return "";
        }
    }
}
