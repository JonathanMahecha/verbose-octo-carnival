private String enviarAlExte(String[] getLoginData) {
    Util.wait(2);

    // 1) Validar inactividad
    if (isDisplayed(loc.txtInactividad)) {
        Reporter.reportEvent(Reporter.MIC_FAIL, getText(loc.txtInactividad));
        return "Error";
    }

    // 2) Esperar y pulsar 'enviarExt'
    if (!waitForElement(loc.enviarExt, 20)) {
        return "Error";
    }
    click(loc.enviarExt);
    Util.wait(2);

    String textoError = null;
    Evidence.save("Enviar al exterior: ", this);

    // 3) Si aparece mensaje de error, intentar dos veces y evaluar texto final
    if (isDisplayed(loc.mensajeError)) {
        for (int i = 0; i < 2; i++) {
            textoError = getText(loc.textoError);
            Util.wait(1);
            click(loc.botonAceptar);
            Reporter.reportEvent(Reporter.MIC_INFO, textoError);
            Evidence.save("Enviar al exterior: ", this);
            waitClickable(loc.enviarExt, 10);
            Evidence.save("Enviar al exterior: ", this);
            click(loc.enviarExt);
        }
        // conservar la misma comprobación textual que existía
        if (textoError != null && textoError.contains(
                "¡Recuerde...! Este servicio está disponible los días hábiles entre las 8:00 a.m. y la 1:00 p.m.")) {
            Reporter.reportEvent(Reporter.MIC_FAIL, textoError);
            return "Error";
        }
    }

    // 4) Aceptar diálogo
    waitClickable(loc.botonAceptar, 10);
    if (!waitForElement(loc.botonAceptar, 5)) {
        return "Error";
    }
    Util.wait(1);
    click(loc.botonAceptar);

    // 5) Seleccionar cuenta (ajustar valores de getLoginData)
    getLoginData[33] = Util.right(getLoginData[33], 4);
    seleccionarCuenta(getDriver(), getLoginData[32], getLoginData[33]);
    Evidence.save("Enviar al exterior: ", this);

    click(loc.botonSiguien);
    waitClickable(loc.botonSiguien, 10);

    // 6) Preparar moneda y monto
    getLoginData[34] = Util.left(getLoginData[34], 3);
    Util.wait(2);
    waitClickable(loc.listaMoneda, 10);
    selectListItem(loc.listaMoneda, getLoginData[34]);

    clearInputbox(loc.campoMonto);
    write(loc.campoMonto, getLoginData[35]);
    selectListItem(loc.listaConceptoCambiario, getLoginData[36]);

    // 7) Cálculo incondicional del getLoginData[40] (la condición original era equivalente a "siempre")
    try {
        int mnto = Integer.parseInt(getLoginData[35]);
        int valr1 = Integer.parseInt(getLoginData[38]);
        int calc = mnto - valr1;
        getLoginData[40] = String.valueOf(calc);
    } catch (NumberFormatException nfe) {
        // Si los valores no son numéricos, se preserva el comportamiento original dejando la excepción
        // o bien podrías manejarla; aquí registramos y retornamos Error para seguridad.
        Reporter.reportEvent(Reporter.MIC_FAIL, "Formato inválido en montos: " + nfe.getMessage());
        return "Error";
    }

    // 8) Seleccionar primer numeral camb
    waitClickable(loc.numeralCambiario1, 10);
    selectListItem(loc.numeralCambiario1, getLoginData[37]);
    Util.wait(3);

    // 9) Si existe index 39 (no es null), añadir segundo numeral (la condición original equivalía a "si no es null")
    if (getLoginData[39] != null) {
        click(loc.adicionarNumCamb);
        waitClickable(loc.numeralCambiario2, 10);
        selectListItem(loc.numeralCambiario2, getLoginData[39]);

        if (!waitForElement(loc.valor1, 20)) {
            return "Error";
        }
        write(loc.valor1, getLoginData[38]);
        write(loc.valor2, getLoginData[40]);
    }

    // 10) Si es "Nuevo envío", seguir la ruta de nuevo beneficiario; usar equals seguro para evitar NPE
    if ("Nuevo envío".equals(getLoginData[41])) {
        click(loc.tipoEnvioNuevo);
        Evidence.save("Enviar al exterior: ", this);
        click(loc.botonSiguien);

        if (!waitForElement(loc.nombreBenefi, 20)) {
            return "Error";
        }
        write(loc.nombreBenefi, getLoginData[42]);
        Util.wait(2);

        write(loc.paisBenefi, getLoginData[43] != null ? getLoginData[43].toUpperCase() : "");
        Util.wait(1);
        if (isDisplayed(loc.listaPais)) {
            click(loc.listaPais);
        }
        write(loc.ciudadBene, getLoginData[44]);
        write(loc.direccionBene, generarDireccion());
        write(loc.ibanCabeBene, getLoginData[45]);
        selectListItem(loc.tipoInfoBene, getLoginData[46]);
        write(loc.InfoBene, getLoginData[47]);
        Evidence.save("Enviar al exterior: ", this);
        click(loc.botonSiguien);

        if (!waitForElement(loc.tipoCodBanBene, 20)) {
            return "Error";
        }
        selectListItem(loc.tipoCodBanBene, getLoginData[48]);
        write(loc.numCodBene, getLoginData[49]);
        Util.wait(2);
        if (isDisplayed(loc.listaBenef)) {
            click(loc.listaBenef);
        }
        Util.wait(1);

        String banco = getText(loc.bancoValidate);
        if (banco == null || banco.isEmpty()) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "El numero del codigo del banco beneficiario no existe.");
            return "Error";
        }

        // 11) Si getLoginData[51] es null o no está vacio -> realizar flujo de banco intermediario
        if (getLoginData[51] == null || !getLoginData[51].isEmpty()) {
            click(loc.tienBancoInterm);
            waitClickable(loc.numCodBene, 10);
            selectListItem(loc.tipoInteInfoBene, getLoginData[50]);
            write(loc.numCodInterBene, getLoginData[51]);
            Util.wait(2);
            if (isDisplayed(loc.listaBenefInterme)) {
                click(loc.listaBenefInterme);
            }
            Util.wait(1);

            String banco1 = getText(loc.bancoInterValidate);
            if (banco1 == null || banco1.isEmpty()) {
                Reporter.reportEvent(Reporter.MIC_FAIL,
                        "El numero del codigo del banco intermedio beneficiario no existe.");
                return "Error";
            }
        }

        Evidence.save("Enviar al exterior: ", this);
        click(loc.botonSiguien);

        Util.wait(2);
        if (isDisplayed(loc.mensajeError)) {
            textoError = getText(loc.textoError);
            Util.wait(1);
            Evidence.save("Enviar al exterior Error: ", this);
            click(loc.botonAceptar);
            Reporter.reportEvent(Reporter.MIC_FAIL, textoError);
            return "Error";
        }

        if (!waitForElement(loc.txtCotizacion, 20)) {
            return "Error";
        }

        Evidence.save("Enviar al exterior: ", this);

        // 12) Construir mensaje informativo de forma más legible (mismo contenido)
        StringBuilder infoMsg = new StringBuilder();
        infoMsg.append("Moneda: ").append(getText(loc.txtMoneda)).append(System.lineSeparator())
               .append("Monto: ").append(getText(loc.txtMonto)).append(System.lineSeparator())
               .append("Tipo de cambio a la otra moneda: ").append(getText(loc.txtTipoCambio)).append(System.lineSeparator())
               .append("Monto en la otra moneda: ").append(getText(loc.txtMontoCambio)).append(System.lineSeparator())
               .append("Tasa de cambio: ").append(getText(loc.txtTasaCambio)).append(System.lineSeparator())
               .append("Valor de la operacion en pesos colombianos: ").append(getText(loc.txtValorPesos)).append(System.lineSeparator())
               .append("Costo del servicio: ").append(getText(loc.txtCostoServicio)).append(System.lineSeparator())
               .append("IVA sobre costo del servicio: ").append(getText(loc.txtIVA)).append(System.lineSeparator())
               .append("Valor total a descontar de la cuenta: ").append(getText(loc.txtDescontarCuenta));
        Reporter.reportEvent(Reporter.MIC_INFO, infoMsg.toString());

        click(loc.botonSiguien);
        waitForElement(loc.mensajeInfo, 10);
        click(loc.botonAceptar);
        waitForElement(loc.txtConfirmacion, 10);
        saveFullScreenshot("Confirmacion Envio Exterior");
        Util.wait(2);

    } else { // envío frecuente
        click(loc.tipoEnvioFrecuente);
    }

    return "";
}
