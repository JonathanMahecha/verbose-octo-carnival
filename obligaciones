package launchData;

import dav.as400.credito.ControllerCredito;
import dav.transversal.As400;
import dav.transversal.DavUtil;
import dxc.common.Util;
import library.core.BaseTestNG;
import library.reporting.Evidence;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import screens.actions.credito.ScreenCredito;

//import dav.as400.credito.ControllerCredito;
//import dav.as400.credito.ScreenCredito;
//import dav.transversal.As400;
//import dav.transversal.DavUtil;
//import dxc.execution.BaseTestNG_XBloque;
//import dxc.execution.Evidence;
//import dxc.execution.Reporter;
//import dxc.execution.SettingsRun;
//import dxc.util.DXCUtil;
//import library.core.BaseTestNG;

public class LaunchAs400_Credito extends BaseTestNG {
	String[] datosAs400; // 0-USER, 2-PWD, 3-AMBIENTE
	ControllerCredito creditoScoring = null;

//***********************************************************************************************************************
	public void launchData() { // DATOS DEL LANZAMIENTO
//		SettingsRun.EXEC_CLASS = this.getClass().getSimpleName(); // NOMBRE CARPETA DE EVIDENCIAS
		SettingsRun.DEFAULT_HEADER = 2; // EL ARCHIVO DE DATOS EL HEADER ESTÁ EN LA FILA 2
		// PARÁMETROS REQUERIDOS EN LA HOJA DE DATOS GLOBAL PARA EL LAUNCH QUE SE ESTÁ
		// HACIENDO
		SettingsRun.ARRAY_DATA_PARAMS = new String[] { "Código del Producto", "Tipo Documento", "Número Documento",
				"Tipo de Persona", "Tipo Documento Cod.", "Número Documento Cod.", "Tipo de Persona Cod.", "Sucursal",
				"Tipo de Producto", "Destino del Producto", "Modalidad", "Facilidad de Pago", "Valor Avalúo",
				"Valor Subsidio", "Número Crédito Constructor", "Número del Proyecto" };
//		Evidence.siTomarla(Evidence.FORMATO_ZIP); // INDICAR LA TOMA DE EVIDENCIAS
		// INDICAR EL NÚMERO DE BLOQUES A EJECUTAR Y EL TÍTULO DE CADA BLOQUE
//		try {
//			this.setTotalBloques(1, "CREANDO CRÉDITOS EN AS400");
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
	}

//***********************************************************************************************************************	
	public void loadEnvironment() throws Exception {
		// PREGUNTA POR LOS DATOS DE LOGUEO PARA AS400
		datosAs400 = DavUtil.solicitarDatosAs400ConAmbiente(); // 0-USER, 1-PWD, 2-AMBIENTE
		// datosAs400 = new String[] {"pdcapera", "Colombia1b", "FMC"};
		// datosAs400 = new String[] {"pszea", "Girardot1a", "FMC"};
	}

//***********************************************************************************************************************	
	// DETERMINA LA LLAVE DE LAS EJECUCIONES PARA HACER AGRUPAMIENTO
	public String getKeyBloqueExec(int iteration) throws Exception {
		String tipoDoc = SettingsRun.getTestData().getParameter("Tipo Documento").trim();
		String numDoc = SettingsRun.getTestData().getParameter("Número Documento").trim();
		String[] arrTipoDoc = tipoDoc.split(";");
		String[] arrNumDoc = numDoc.split(";");
		return (arrTipoDoc[0] + "-" + arrNumDoc[0]);
	}

//***********************************************************************************************************************
//	public void cargarTitleYDatosEvidence() throws Exception { // PARA TÍTULOS Y DATA DE EVIDENCIAS
//		super.cargarTitleYDatosEvidence();
//		// CUANDO SE TRATA DE EXCEL O WORD PARA LA CARGA DE EVIDENCIAS, ESTOS SON LOS DATOS CLAVE A MOSTRAR
//		// Evidence.testData = "Sistema Operativo" + " - " + "Dato1" + " - " + "Dato2";
//	}
//***********************************************************************************************************************
	public void launchClose() { // CIERRE DEL LANZAMIENTO
		super.launchClose();
		if (this.creditoScoring != null)
			this.creditoScoring.cerrarConsola();
	}

//***********************************************************************************************************************
	// SOLICITUD DATOS GLOBALES, CONFIGURACIONES INICIALES Y/O VALIDACIONES
	// INICIALES
	public void doingConfigurations() throws Exception {
		// ADICIONA LOS PARÁMETROS REQUERIDOS QUE AÚN NO ESTÁN
		SettingsRun.getTestData().addParametersNotExist("Número Scoring", "Número Solicitud", "Evaluado", "Número Acta",
				"Número de Crédito", "Datos fasecolda");
		// CORROBORA SI HAY ITERACIONES PARA CRÉDITO MÓVIL QUE AÚN NO TENGAN DATOS DE
		// FASECOLDA, EN TAL CASO SE DEBE
		// CARGAR DATOS DE LA TABLA DE FASECOLDA
		String codigo, datosFasec;
		int currentIt = SettingsRun.getStartIteration();
		boolean cargarDatosTablaFasec = false;
		do {
			// HACER LO REQUERIDO, LA EXTRACCIÓN DE DATOS SE HARÁ ASÍ:
			codigo = SettingsRun.getGlobalData("Código del Producto").trim();
			if (Util.left(codigo, 3).equals(ScreenCredito.CRED_VEHICULO)) { // ES CRÉDITO DE VEHÍCULO

				datosFasec = SettingsRun.getGlobalData("Datos fasecolda").trim();
				cargarDatosTablaFasec = datosFasec.isEmpty(); // NO HAY DATOS DE FASECOLDA, SE DEBERÍAN CARGAR
				if (cargarDatosTablaFasec)
					break; // TERMINA CICLO
			}
			currentIt = SettingsRun.getNextIteration(currentIt);
		} while (currentIt != 0);

		// CARGA LOS DATOS DE FASECOLDA EN EL CONTROLLER
		if (cargarDatosTablaFasec) {
			creditoScoring = new ControllerCredito(datosAs400[0], datosAs400[1], As400.PERFIL_NO_OPERADOR,
					datosAs400[2]);
			this.creditoScoring.cargarDatosFasecolda();
		}
	}

//=======================================================================================================================
	// MÉTODO QUE ENMARCA LAS PRUEBAS A REALIZAR POR CADA LANZAMIENTO
//=======================================================================================================================
	public void doingTest() throws Exception {
		String tipoDoc = SettingsRun.getGlobalData("Tipo Documento").trim();
		String numDoc = SettingsRun.getGlobalData("Número Documento").trim();
		String tipoPer = SettingsRun.getGlobalData("Tipo de Persona").trim();
		if (tipoDoc.isEmpty() || numDoc.isEmpty() || tipoPer.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_NOEXEC, "La información del solicitante está incompleta");
			SettingsRun.exitTestIteration();
		}
//-----------------------------------------------------------------------------------------------------------------------
		String codigoProd = SettingsRun.getGlobalData("Código del Producto").trim();
		if (codigoProd.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_NOEXEC, "El código del producto es un dato obligatorio");
			SettingsRun.exitTestIteration();
		}
		String[] arrTemp = codigoProd.split("-"); // 0-DATO, 1-VALUE
		codigoProd = arrTemp[0];
//-----------------------------------------------------------------------------------------------------------------------
		// LIMPIA EL VALOR DE LA [facilidad] CON RESPECTO AL VALOR DE LA [modalidad]
		String modalidad = SettingsRun.getGlobalData("Modalidad").trim();
//		if (modalidad.isEmpty())
//			SettingsRun.getGlobalData().setParameter("Facilidad de Pago", ""); // GARANTIZA QUE TAMPOCO VENGA
//		else {
//			String facilidad = SettingsRun.getGlobalData().getParameter("Facilidad de Pago").trim();
//			if (facilidad.isEmpty()) {
//				if (modalidad.equals("3-DTF"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "5-BAJA DTF (14)");
//				else if (modalidad.equals("6-PESOS"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "1-BAJA PESOS (16)");
//				else if (modalidad.equals("8-UVR"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "2-BAJA UVR (1)");
//			} else {
//				if (modalidad.equals("3-DTF") && !facilidad.contains("DTF"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "5-BAJA DTF (14)");
//				else if (modalidad.equals("6-PESOS") && !facilidad.contains("PESOS"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "1-BAJA PESOS (16)");
//				else if (modalidad.equals("8-UVR") && !facilidad.contains("UVR"))
//					SettingsRun.getGlobalData().setParameter("Facilidad de Pago", "2-BAJA UVR (1)");
//			}
//		}
//-----------------------------------------------------------------------------------------------------------------------
		// SI NO SE HA CREADO LA INSTANCIA, SE CREA
		if (this.creditoScoring == null)
			creditoScoring = new ControllerCredito(datosAs400[0], datosAs400[1], As400.PERFIL_NO_OPERADOR,
					datosAs400[2]);

		// HACE LA LIQUIDACIÓN DEL CRÉDITO
		this.creditoScoring.liquidarCredito(codigoProd);
	}

//***********************************************************************************************************************
	// ESCRIBIR TODOS LOS MÉTODOS REQUERIDOS, QUE APOYEN LAS PRUEBAS
//***********************************************************************************************************************	
	@Override
	public void initializeControllerAndConfiguration() throws Exception {
		// TODO Auto-generated method stub

	}
}
