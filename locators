package obligacionesDataCredito;

import dav.c360.PageInicioC360;
import dav.c360.PageLogin;
import library.common.Util;
import library.core.BasePageWeb;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import pages.actions.client360.PageC360;
import pages.actions.client360.PageLoginClient360;
import pages.actions.client360.PagePersonasC360;

public class Client360Process extends BasePageWeb {

    private PageInicioC360 pageInicio;
    private PageLogin c360;
    private final String navegador;
    private final LocatorsDataCredit locators = new LocatorsDataCredit();

    public Client360Process(String navegador) {
        super(navegador);
        this.navegador = navegador;
    }

    public void execute() throws Exception {
        initializeClient360();
        enterModules();
        fillBasicData();
        processAlerts();
        pageInicio.closeAllBrowsers();
    }

    private void initializeClient360() {
        String user = SettingsRun.getProperty("data.usuario");
        String pass = SettingsRun.getProperty("data.clave");

        if (SettingsRun.esIteracionInicial()) {
            c360 = new PageLogin(navegador);
            c360.maximizeBrowser();
            pageInicio = new PageInicioC360(c360);
            pageInicio.refresh();
            c360.login360(user, pass);
        }

        // Wait until main page is loaded
        while (pageInicio.element(locators.LOC_BIENVENIDO_MAIN_PAGE) == null) {
            Util.wait(3);
            pageInicio.reporteAlertas();
        }
    }

    private void enterModules() {
        Util.wait(3);
        pageInicio.irAModulo(PageInicioC360.MOD_PERSONAS);

        String existing = pageInicio.buscarExistenciaId(numberId, tipoCliente);
        String estado = pageInicio.extraerTxt();
        SettingsRun.getTestData().setParameter("Estado", estado);

        if (existing != null) {
            Reporter.reportEvent(Reporter.MIC_INFO,
                String.format("Identificacion %s ya registrada.", numberId));
            Util.wait(3);
            pageInicio.irAModulo(PageInicioC360.MOD_PAGINA_INICIAL);
            pageInicio.reporteAlertas();
            return;
        }

        waitForElement(() -> pageInicio.element(locators.BTN_AGREGAR_PERSONA));
        pageInicio.agregarNuevo(locators.BTN_AGREGAR_PERSONA);
        Util.wait(1);
    }

    private void fillBasicData() {
        boolean hasAlert = pageInicio.setDatosBasicosPersonas(
            "CEDULA DE CIUDADANIA", numberId,
            nombres, primerApellido, segundoApellido,
            fechaNac, fechaExp,
            "13/01/2024"
        );

        if (hasAlert) {
            SettingsRun.exitTestIteration();
            return;
        }

        setLocationFields();
        pageInicio.setTelefono(tipoCliente, "7306852", "BOGOTA", "PERSONAL");
        pageInicio.setCorreoCelular(
            locators.ICONO_CORREO, locators.INPUT_CORREO_UNO,
            locators.INPUT_CORREO, "pruebaslabdavi567@gmail.com",
            locators.BTN_ACEPTAR_CORREO, locators.BTN_NUEVO_CORREO
        );
        pageInicio.setCorreoCelular(
            locators.ICONO_CELULAR, locators.INPUT_CELULAR_UNO,
            locators.INPUT_CELULAR, "3144425014",
            locators.BTN_ACEPTAR_CELULAR, locators.BTN_NUEVO_CELULAR
        );
        pageInicio.setSubEstado();
        Util.wait(3);
        Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos Básicos.");
        c360.tomarCaptura("Datos Básicos");

        pageInicio.irLink(locators.LOC_CAMPO_ID);
        Util.wait(5);
        if (pageInicio.existDialog()) {
            pageInicio.getDriver().switchTo().alert().accept();
        }
    }

    private void processAlerts() throws Exception {
        boolean alerta = pageInicio.reporteAlertas();
        if (alerta) {
            handleCreationAlert();
        } else if (!pageInicio.isDisplayed(locators.LOC_AUX)) {
            pageInicio.irLink(locators.LOC_CAMPO_ID);
        }

        if (tipoCliente.contains("Persona Natural")) {
            if (handleDialog18Years()) {
                fillAdditionalInfo();
            }
        }
    }

    private void handleCreationAlert() {
        Util.wait(2);
        pageInicio.click(locators.BTN_CANCELAR_CREACION_USUARIO);
        pageInicio.irAModulo(PageInicioC360.MOD_PAGINA_INICIAL);
        Util.wait(2);
        pageInicio.irAModulo(PageInicioC360.MOD_PERSONAS);
        SettingsRun.exitTestIteration();
    }

    private boolean handleDialog18Years() {
        if (!pageInicio.existDialog()) return true;

        String msg = pageInicio.getMessageDialog();
        if (msg != null && msg.contains(
            "La fecha de expedición debe ser al menos 18 años mayor que la fecha de nacimiento"
        )) {
            Reporter.reportEvent(Reporter.MIC_INFO, msg);
            pageInicio.acceptDialog();
            return false;
        }
        return true;
    }

    private void fillAdditionalInfo() throws Exception {
        fillMoreInformation();
        fillContactData();
        fillFinancialInformation();
        pageInicio.guardar();
        Reporter.reportEvent(Reporter.MIC_PASS, "REGISTRO REALIZADO");
    }

    private void fillMoreInformation() {
        pageInicio.irAModulosPrincipales(locators.LOC_MAS_INFORMACION);
        pageInicio.setMasInformacion(
            genero, "SOLTERO", "UNIVERSITARIO",
            "ADMINISTRACION DE NEGOCIOS", "COLOMBIA"
        );
        c360.tomarCaptura("Más información");
        Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Más información.");
    }

    private void fillContactData() {
        pageInicio.irAModulosPrincipales(locators.LOC_MAS_DATOS_CONTACTO);
        addAddresses();
        pageInicio.guardar();
        c360.tomarCaptura("Datos de contacto");
        Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos de contacto.");
        Util.wait(3);
    }

    private void addAddresses() {
        String[] addressTypes = {"CORRESPONDENCIA 1 DEL NEGOCIO", "OFICINA CLIENTE", "RESIDENCIA CLIENTE"};
        for (String type : addressTypes) {
            pageInicio.agregaNuevaDireccion("Persona Natural");
            String randomAddress = direccionAleatoria();
            String msg = pageInicio.setDireccion(
                randomAddress, type, "COLOMBIA",
                "BOGOTA, D.C.", "BOGOTA, D.C.", "BOGOTA, D.C."
            );
            if (msg != null) {
                Reporter.reportEvent(Reporter.MIC_FAIL, msg);
                SettingsRun.exitTestIteration();
            }
        }
    }

    private void fillFinancialInformation() {
        String locFinance = locators.LOC_INFORMACION_FINANCIERA;
        pageInicio.irAModulosPrincipales(locFinance);
        // Egresos
        pageInicio.agregarNuevo(locators.BTN_AGREGAR_EGRESOS);
        pageInicio.setEgresos("Otros Egresos", "300000", "Descripcion de los EGRESOS ejemplo");
        pageInicio.guardar();

        // Ingresos
        pageInicio.irAModulosPrincipales(locFinance);
        pageInicio.agregarNuevo(locators.BTN_AGREGAR_INGRESOS);
        pageInicio.setIngresosPersonas(
            "SERVIDOR PUBLICO", "4/06/2018", "2000000",
            "Salario Mensual", "INDEFINIDO",
            "ASALARIADOS: PERSONAS NATURALES...",
            "54871200", "ABOGADO",
            "Descripcion para ingresos persona natural", "Automatizacion"
        );
        pageInicio.guardar();

        // Pasivos
        pageInicio.irAModulosPrincipales(locFinance);
        pageInicio.agregarNuevo(locators.BTN_AGREGAR_PASIVOS);
        pageInicio.setPasivos("Otros Pasivos", "250000", "BANCOS");
        pageInicio.reporteAlertas();

        // Activos
        Util.wait(1);
        pageInicio.irAModulosPrincipales(locFinance);
        pageInicio.agregarNuevo(locators.BTN_AGREGAR_ACTIVOS);
        pageInicio.setActivos("Otros Activos", "9000000", "Descripcion de los activos ejemplo");
        pageInicio.guardar();

        c360.tomarCaptura("Datos información financiera");
        Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos información financiera.");
    }

    private void waitForElement(Runnable check) {
        boolean present = false;
        for (int i = 0; i < 10 && !present; i++) {
            Util.wait(2);
            try {
                check.run();
                present = true;
            } catch (Exception ignored) {}
        }
    }
}
