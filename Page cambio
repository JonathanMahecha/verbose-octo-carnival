package Dav_TarjetasDeCar;

import org.apache.poi.hssf.record.PageBreakRecord.Break;
import org.openqa.selenium.By;

import library.common.Util;
import library.core.BasePageWeb;
import library.core.Controller;
import library.data.DataDriven;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import pages.actions.client360.PageC360;
import pages.actions.client360.PageLoginClient360;
import pages.actions.client360.PageSearchUsersClient360;
import screens.actions.common.CommonAs400;

public class TarjetasDeCar_Controller implements Controller {

	private TarjetasDeCar_Page tc;
	PageLoginClient360 login360;
	PageC360 page360;
	PageSearchUsersClient360 search360;
	String navegador = BasePageWeb.CHROME;

	private String EscAs400, tipoId, numeroId, nombre, direccion, tipoProduc, cupoSolic, oficinaRad, modaliCred,
			tipoGarant, activar, compra, montoCompra, tipoCupo, numeroTC;

	@Override
	public void destroy() {
		if (login360 != null) {
			login360.closeAllBrowsers();
		}
		if (tc != null) {
			tc.closeAs400();
		}
	}

	public void main() throws Exception {
		cargarParametros();

		if (nombre.isEmpty() || direccion.isEmpty()) {
			ejecutarCliente360();
		}

		iniciarSesionAS400();

		switch (EscAs400) {
		case "Flujo completo":
			procesoCompleto();
			break;
		case "Solo Activar":
			if ((numeroTC == null || numeroTC.trim().equals(""))) {
				numeroTC = tc.consultaPrimeraVez(tipoId, numeroId);
			}
			activarTarjeta(numeroTC);
			break;
		case "Solo Compra":
			if ((numeroTC == null || numeroTC.trim().equals(""))) {
				numeroTC = tc.consultaPrimeraVez(tipoId, numeroId);
			}
			aplicarCompra(numeroTC);
			break;
		default:
			Reporter.reportEvent(Reporter.MIC_WARNING, "Escenario no reconocido: " + EscAs400);
		}
	}

	private void iniciarSesionAS400() throws Exception {
		if (tc == null) {
			tc = new TarjetasDeCar_Page(SettingsRun.getGlobalData("data.as400User"),
					SettingsRun.getGlobalData("data.as400Pwd"), CommonAs400.PERFIL_NO_OPERADOR);
		}
		tc.ingresoAmbiente();
	}

	private void ejecutarCliente360() throws Exception {
		String userName = SettingsRun.getProperty("data.usuarioC360");
		String password = SettingsRun.getProperty("data.claveC460");
		if (login360 == null) {
			login360 = new PageLoginClient360(navegador);
			this.login360.maximizeBrowser();
			this.search360 = new PageSearchUsersClient360(login360);
			search360.refresh();
			this.login360.loginPageClient360(userName, password);
		}
		search360 = new PageSearchUsersClient360(login360);
		search360.searchUsers(tipoId, numeroId);
		try {
			search360.click(By.xpath("//a[@name='DAV_Identification Number']"));
		} catch (Exception e) {
			Reporter.reportEvent(Reporter.MIC_FAIL, "Este cliente es inexistemte.");
			SettingsRun.exitTestIteration();
		}
		String[] datosBasicos = search360.getDatosCompletosCliente();
		for (String string : datosBasicos) {
			System.out.println(string);

		}
		nombre = datosBasicos[2];
		direccion = datosBasicos[8];

		if (nombre == null || nombre.isEmpty() || direccion == null || direccion.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL,
					"El cliente: " + numeroId + " necesita un nombre y/o una dirección válida.");
			SettingsRun.exitTestIteration();
		}
	}

	private void procesoCompleto() throws Exception {
		String validacion = tc.crearSolicitudTC(tipoId, numeroId, nombre, tipoProduc, cupoSolic, oficinaRad, modaliCred,
				tipoGarant, direccion);

		if (!validacion.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL, validacion);
			SettingsRun.exitTestIteration();
		}

		numeroTC = aprobarSolicitudPorTipo();
		if (numeroTC == null || numeroTC.isEmpty() || numeroTC == "") {
			Reporter.reportEvent(Reporter.MIC_FAIL, "Solicitud no aprobada");
			SettingsRun.exitTestIteration();
		}
		Reporter.reportEvent(Reporter.MIC_PASS, "Solicitud aprobada exitosamente");

		numeroTC = SettingsRun.getTestData().getParameter("Numero de Tarjeta de Credito");

		if ("Si".equalsIgnoreCase(activar))
			activarTarjeta(numeroTC);
		if ("Si".equalsIgnoreCase(compra))
			aplicarCompra(numeroTC);

		tc.consultarTC(numeroTC);
		Reporter.reportEvent(Reporter.MIC_PASS, "Proceso Finalizado - Cliente: " + numeroId);

		if (SettingsRun.esIteracionFinal())
			tc.closeAs400();
	}

	private String aprobarSolicitudPorTipo() throws Exception {
		String nivel = null;
		switch (tipoCupo) {
		case "SUPERIOR":
			nivel = "110";
			break;
		case "INTERMEDIO":
			nivel = "111";
			break;
		case "INFERIOR":
			nivel = "112";
			break;
		}
		return tc.aprobarSolicitud(tipoId, numeroId, tipoProduc, cupoSolic, nivel);
	}

	private void activarTarjeta(String numeroTC) throws Exception {
		String activarTc = tc.activarTC(numeroTC);
		tc.retornarPantallaWhile("FUNCIONES GRUPO DE FUNCIONES", 6);
		if (!activarTc.isEmpty()) {
			Reporter.reportEvent(Reporter.MIC_FAIL, activarTc);
		} else {
			Reporter.reportEvent(Reporter.MIC_PASS, "Tarjeta activada exitosamente");
		}
		if ("Si".equalsIgnoreCase(compra))
			aplicarCompra(numeroTC);
		SettingsRun.exitTestIteration();

	}

	private void aplicarCompra(String numeroTC) throws Exception {
		tc.aplicarCompraTC(numeroTC, oficinaRad, montoCompra);
		Reporter.reportEvent(Reporter.MIC_PASS, "Compra aplicada exitosamente");
	}

	private void cargarParametros() {
		DataDriven td = SettingsRun.getTestData();
		EscAs400 = td.getParameter("Escenarios As400");
		tipoId = td.getParameter("Tipo ID");
		numeroId = td.getParameter("Numero ID");
		nombre = td.getParameter("Nombre");
		direccion = td.getParameter("Direccion");
		tipoProduc = td.getParameter("Tipo Producto");
		cupoSolic = td.getParameter("Cupo Solicitado");
		cupoSolic = cupoSolic.replace(".", "").replace(",", "").replace("$", "");
		oficinaRad = td.getParameter("Oficina Radicación");
		modaliCred = td.getParameter("Modalidad Credito");
		tipoGarant = td.getParameter("Tipo Garantia");
		activar = td.getParameter("Activar");
		compra = td.getParameter("Compra");
		montoCompra = td.getParameter("Monto Compra");
		montoCompra = montoCompra.replace(".", "").replace(",", "").replace("$", "");
		numeroTC = td.getParameter("Numero de Tarjeta de Credito");
		tipoCupo = clasificarCupo(Integer.parseInt(cupoSolic));
	}

	private String clasificarCupo(int cupo) {
		if (cupo < 10_000_000)
			return "INFERIOR";
		else if (cupo < 100_000_000)
			return "INTERMEDIO";
		else
			return "SUPERIOR";
	}
}
