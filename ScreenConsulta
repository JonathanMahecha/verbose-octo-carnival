package Dav_TarjetasDeCar;

import library.common.Util;
import library.core.BaseWindowsApp;
import library.reporting.Evidence;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import screens.actions.common.As400Base;

public class TarjetasDeCar_Page extends As400Base {
	String tomarPantalla = read();
	String[] mensajes = { "Cliente tiene otra solicitud activa para un producto incompatible con éste",
			"Producto no válido", "Rango de límite de crédito no existe", "está en blanco", "Solicitud ya existe",
			"tiene tarjeta", "No se hizo ningún cambio", "Valor de base para devolución de IVA es cero" };
	String numeroTarjeta;

	public TarjetasDeCar_Page(String user, String password, String perfil) {
		super(user, password, perfil);
		// TODO Auto-generated constructor stub
	}

	public void ingresoAmbiente() throws Exception {
		selectAmbienteNoOperador("TXC", "FUNCIONES GRUPO DE FUNCIONES");
	}

	public String crearSolicitudTC(String tipoId, String numeroId, String nombreCompleto, String tipoProducto,
			String cupo, String oficina, String modCredito, String garantia, String direccion) throws Exception {
		selectItemListaConFiltro("104", 'X', 12, 3);
		while (true) {
			Util.wait(1);
			if (read().contains("SOLICITUDES DE TARJETA DE CREDITO")) {
				sendFunction("F9");
				sendKey('Y');
				while (true) {
					Util.wait(1);
					if (read().contains("MANTENIMIENTO SOLICITUD")) {
						write(numeroId);
						tab(1);
//						sendFunction("F4");
						write(tipoProducto);
//						selectItemListaConFiltro(tipoProducto, 'X', 4);
						enter();
						while (true) {
							Util.wait(1);
							tomarPantalla = read();
							for (String mensaje : mensajes) {
								if (tomarPantalla.contains(mensaje)) {
									Evidence.save(mensaje, (BaseWindowsApp) this);
									if (tomarPantalla.contains("F11=Suspenso")) {
										return Util.getTextoEntre(read(), "F11=Suspenso", "ifisdjfi");
									}
									return Util.getTextoEntre(read(), "F3=Salir", "ifisdjfi");
								}
							}
							if (tomarPantalla.contains("ETAPA")) {
								write(tipoId);
								tab(1);
								write(Util.left(nombreCompleto, 21));
								tab(2);
								write(cupo);
								tab(3);
								write(Util.leftComplete(oficina, 4, '0'));
								tab(7);
//								write("S");
								write(modCredito);
								write(Util.leftComplete(garantia, 2, '0'));
								tab(6);
								write(direccion);
								sendFunction("F6");
								while (true) {
									Util.wait(1);
									tomarPantalla = read();
									for (String mensaje : mensajes) {
										if (tomarPantalla.contains(mensaje)) {
											Evidence.save(mensaje, (BaseWindowsApp) this);
											return Util.getTextoEntre(read(), "F11=Suspenso", "ifisdjfi");
										}
									}
									if (tomarPantalla.contains("El servicio no Responde,Intente mTarde")) {
										Reporter.reportEvent(1, "El servicio no Responde,Intente mTarde");
										sendFunction("F3", 2);
										Reporter.reportEvent(Reporter.MIC_FAIL,
												"El servicio no Responde,Intente mTarde");
										SettingsRun.exitTestIteration();
									}
									if (tomarPantalla.contains("OperaciNegada por Politicas de la Entidad")) {
										Reporter.reportEvent(1, "OperaciNegada por Politicas de la Entidad");
										sendFunction("F3", 2);
										Reporter.reportEvent(Reporter.MIC_FAIL,
												"OperaciNegada por Politicas de la Entidad");
										SettingsRun.exitTestIteration();
									}
									if (tomarPantalla.contains("recuperado de BUK.")) {
										Evidence.save("Solicitud Cliente" + numeroId, (BaseWindowsApp) this);
										sendKey('Y');
										while (true) {
											Util.wait(1);
											if (read().contains("SCORING MANTENIMIENTO")) {
												sendFunction("F3", 3);
												return "";
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	public String aprobarSolicitud(String tipoId, String numeroId, String tipoProducto, String cupo, String codigoMenu)
			throws Exception {
		selectItemListaConFiltro(codigoMenu, 'X', 12, 3);

		while (true) {
			Util.wait(1);
			if (read().contains("APROBACION DE SOLICITUDES")) {
				write(numeroId);
				tab(3);
				write(tipoProducto);
				tab(1);
				write(cupo);
				tab(1);
				enter();
				tab(7);
				write("A");
				enter();
				while (true) {
					Util.wait(1);
					if (read().contains("CONFIRM")) {
						Evidence.save("Aprobar Cliente: " + numeroId, (BaseWindowsApp) this);
						sendKey('Y');
						while (true) {
							Util.wait(1);
							if (read().contains("La Aprobac") || read().contains("La Aprobación")) {
								sendFunction("F3");
								consultaPrimeraVez(tipoId, numeroId);
								return numeroTarjeta;
							}
						}
					}
				}
			}
		}
	}

	public String consultarTC(String numeroTC) throws Exception {
		selectItemListaConFiltro("942", 'X', 12, 3);
		while (true) {
			Util.wait(1);
			if (read().contains("CONSULTA DIRECTA TARJETA")) {
				write(numeroTC);
				enter();
				while (true) {
					Util.wait(1);
					if (read().contains("CONSULTA DATOS BASICOS TARJETA")) {
						Evidence.save("Consulta " + numeroTC, (BaseWindowsApp) this);
						Util.wait(1);
						sendFunction("F3", 2);
						return "";
					}
				}
			}
		}
	}

	public String consultaPrimeraVez(String tipoId, String numeroId) throws Exception {
		selectItemListaConFiltro("942", 'X', 12, 3);
		while (true) {
			Util.wait(1);
			if (read().contains("CONSULTA DIRECTA TARJETA")) {
				tab(1);
				write(tipoId);
				tab(1);
				write(numeroId);
				tab(1);
				enter();
				while (true) {
					Util.wait(1);
					if (read().contains("TARJETAS DE UN CLIENTE")) {
						String[] tarjetas;
						String datosTarjeta = Util.getTextoEntre(read(), "ESTADO", "F3=Salir");
						tarjetas = datosTarjeta.split("\n");
						tab(1);
						selectItemLista(tarjetas[0], 'Z', 12, 20, null);
						while (true) {
							Util.wait(1);
							if (read().contains("CONSULTA DATOS BASICOS TARJETA")) {
								String dato = Util.getTextoEntre(read(), "IND CHIP", "AMPARADOR").trim();
								dato = Util.left(dato, 23);
								dato = Util.right(dato, 16);
								SettingsRun.getTestData().setParameter("Numero de Tarjeta de Credito", dato);
								sendFunction("F3", 3);
								return dato;
							}
						}
					}
				}
			}
		}
	}

	public String activarTC(String numeroTC) throws Exception {
		selectItemListaConFiltro("944", 'X', 12, 3);
		while (true) {
			Util.wait(1);
			if (read().contains("BLOQUEO AL DESPACHO")) {
				write(numeroTC);
				enter();
				while (true) {
					Util.wait(1);
					if (read().contains("NOVEDAD / ORIGEN")) {
						sendKey('D');
						enter();
						while (true) {
							Util.wait(1);
							tomarPantalla = read();
							for (String mensaje : mensajes) {
								if (tomarPantalla.contains(mensaje)) {
									Evidence.save(mensaje, (BaseWindowsApp) this);
									return Util.getTextoEntre(read(), "F19=Consulta Datos Básicos", "ifisdjfi");
								}
							}
							if (read().contains("CONFIRM")) {
								Evidence.save("Activacion Tarjeta: " + numeroTC, (BaseWindowsApp) this);
								enter();
								while (true) {
									Util.wait(1);
									if (tomarPantalla.contains("Alta realizada.")) {
										sendFunction("F3");
										return "";
									}
								}
							}
						}
					}
				}
			}
		}
	}

	public String aplicarCompraTC(String numeroTC, String oficina, String montoCompra) throws Exception {
		selectItemListaConFiltro("605", 'X', 12, 3);
		while (true) {
			Util.wait(1);
			if (read().contains("ACTUALIZA TAPA CANJE ABIERTO")) {
				enter();
				sendKey('Y');
				while (true) {
					Util.wait(1);
					if (read().contains("GRABACION DE TRANSACCIONES")) {
						sendFunction("F9");
						while (true) {
							Util.wait(1);
							if (read().contains("ADICION DE CANJE ABIERTO")) {
								write(Util.leftComplete(Util.hourToString("HHmmss"), 8, ' '));
								enter();
								while (true) {
									Util.wait(1);
									if (read().contains("CANJE ABIERTO")) {
										tab(1);
										write("1");
										tab(1);
										write(montoCompra);
										tab(5);
										write(montoCompra);
										down(1);
										enter();
										sendKey('Y');
										while (true) {
											Util.wait(1);
											if (read().contains("ADICION DE TRANSACCIONES PARA CANJE ABIERTO")) {
												write("06");
												tab(1);
												write(numeroTC);
												tab(1);
												write(Util.hourToString("HHmmss"));
												tab(1);
												enter();
												while (true) {
													Util.wait(1);
													if (read().contains("FECHA MOVIMIENTO OFICINA")) {
														if (numeroTC.substring(0, 2).equals("00")) {
															write(numeroTC.substring(2, 8));
															tab(1);
															write(numeroTC.substring(2, 8));
															tab(1);
														} else {
															write(numeroTC.substring(0, 6));
															tab(1);
															write(numeroTC.substring(0, 6));
															tab(1);
														}
														write(Util.leftComplete(oficina, 4, '0'));
														tab(1);
														write(Util.dateToString("YYYYMMDD"));
														tab(1);
														write("D3");
														enter();
														write("10203040");
														tab(1);
														write("P");
														tab(1);
														write(montoCompra);
														tab(7);
														write("1");
														tab(1);
														write(Util.dateToString("YYYYMMDD"));
														tab(1);
														enter();
														tomarPantalla = read();
														for (String mensaje : mensajes) {
															if (tomarPantalla.contains(mensaje)) {
																Evidence.save(mensaje, (BaseWindowsApp) this);
																return Util.getTextoEntre(read(), "F3=Salir",
																		"CONFIRM");
															}
														}
														Evidence.save("Compra Aplicada TC: " + numeroTC,
																(BaseWindowsApp) this);
														sendKey('Y');
														while (true) {
															Util.wait(1);
															if (read().contains("Alta realizada.")) {
																sendFunction("F3", 3);
																return "";
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	private void retornarPantalla(String pantallaActual) {
		if (pantallaActual.contains("MANTENIMIENTO SOLICITUD")) {
			sendFunction("F3", 2);
		}
	}
}
