package obligacionesDataCredito;

import java.awt.AWTException;
import java.util.Optional;

import library.common.Util;
import library.common.VirtualKeyBoard;
import library.reporting.Evidence;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import screens.actions.common.As400Base;

/**
 * Gestiona consultas de crédito en el sistema AS400.
 */
public class PageDataCredit extends As400Base {
    private static final int DEFAULT_TIMEOUT = 30;
    private static final int MAX_RETRIES = 2;
    private static final String MENU_CREDITO = "FUNCIONES DE CREDITO";
    private static final String RESULTADO_CONSULTA = "RESULTADO CONSULTA";
    private static final String CONSULTA_EFECTUADA = "CONSULTA EFECTUADA";

    private final PersonaData persona = new PersonaData();

    public PageDataCredit(String user, String password, String perfil) {
        super(user, password, perfil);
    }

    /**
     * Navega al menú de crédito en AS400.
     */
    public void ingresarAlCredito() throws Exception {
        selectAmbienteNoOperador("FMC", "MENU GENERAL DEL SISTEMA");
        navigateMenu(4, 3);
    }

    /**
     * Realiza la consulta de obligaciones.
     * @return Datos de la persona o null si no hay obligaciones.
     */
    public String[] consultarObligaciones(String typeId, String numberId, String lastName, String dateExp) {
        try {
            enterFuncionesCredito();
            sendConsultaInicial(typeId, numberId);

            String response = processApellidoSiSolicitado(lastName);

            if (isSinObligaciones(response)) {
                return handleSinObligaciones(response);
            }

            return handleConObligaciones(response, dateExp);

        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Error en consulta: " + e.getMessage());
            return null;
        }
    }

    /**
     * Cierra sesión de manera segura.
     */
    public void cerrarSesion() {
        closeSessionWithTimeout();
    }

    // ===== Métodos privados =====

    private void navigateMenu(int first, int second) {
        write(first);
        enter();
        write(second);
        enter();
    }

    private void enterFuncionesCredito() {
        write(37);
        enter();
        Reporter.reportEvent(Reporter.MIC_PASS, "Ingreso correcto a " + MENU_CREDITO);
    }

    private void sendConsultaInicial(String typeId, String numberId) {
        write(1);
        write(typeId);
        write(numberId);
        enter();
        write("N");
        enter();
        Evidence.save("Datos consulta", this);
    }

    private String processApellidoSiSolicitado(String lastName) throws AWTException {
        String pantalla = read();
        String prompt = Util.getTextoEntre(pantalla, "F8=Datacrédito", "Espacio");

        if (prompt.contains("DIGITE PRIMER APELLIDO")) {
            enterLastName(lastName);
        }
        return waitForResultado();
    }

    private void enterLastName(String lastName) throws AWTException {
        Reporter.reportEvent(Reporter.MIC_INFO, "Solicitando primer apellido");
        Evidence.save("Primer apellido", this);

        VirtualKeyBoard vk = new VirtualKeyBoard();
        for (char c : lastName.toCharArray()) {
            if (c == 'ñ' || c == 'Ñ') {
                clipboard.setClipboard("ñ");
                Util.wait(1);
                vk.sendKeysCombination("CONTROL+V");
                clipboard.cleanClipboard();
            } else {
                write(String.valueOf(c));
            }
            Util.wait(1);
        }
        sendFunction("F8");
    }

    private String waitForResultado() {
        for (int i = 0; i < MAX_RETRIES; i++) {
            String texto = read();
            if (texto.contains(RESULTADO_CONSULTA)) {
                return texto;
            }
            Util.wait(2);
        }
        return read();
    }

    private boolean isSinObligaciones(String texto) {
        return texto.contains(RESULTADO_CONSULTA) && !texto.contains(CONSULTA_EFECTUADA);
    }

    private String[] handleSinObligaciones(String texto) {
        Evidence.save("Ventana consulta", this);
        String detalle = Util.getTextoEntre(texto, RESULTADO_CONSULTA, "Espacio");
        Reporter.reportEvent(Reporter.MIC_FAIL, "Sin obligaciones: [" + detalle + "]");

        SettingsRun.getTestData().setParameter("Con Obligaciones", "No Posee");
        int f3Times = detalle.contains("TIEMPO DE ESPERA") ? 2 : 3;
        sendFunction("F3", f3Times);
        return null;
    }

    private String[] handleConObligaciones(String texto, String dateExp) {
        // Validación de fecha
        String fechaAS400 = Util.getTextoEntre(texto, "EXP:", "EN:").replace("/", "-");
        boolean fechaOk = fechaAS400.equals(dateExp);
        Reporter.reportEvent(Reporter.MIC_INFO,
                String.format("Fecha AS400: [%s], Fecha Data: [%s]", fechaAS400, dateExp));
        if (fechaOk) Reporter.reportEvent(Reporter.MIC_DONE, "Fechas iguales");

        extractPersonaData(texto);
        Evidence.save("Obligaciones Data", this);

        if (texto.contains(CONSULTA_EFECTUADA)) {
            String estado = fechaOk ? "Posee" : "Posee - Fecha desigual";
            SettingsRun.getTestData().setParameter("Con Obligaciones", estado);
            Reporter.reportEvent(Reporter.MIC_DONE,
                    fechaOk ? "Con Obligaciones" : "Con Obligaciones pero fecha desigual");
        }

        displayValoresMiles();
        sendFunction("F3", 2);
        return persona.toArray();
    }

    private void extractPersonaData(String texto) {
        String identf = Util.getTextoEntre(texto, "IDENTIFICACION..:", "NOMBRE.:");
        persona.tipoId = Util.left(identf, 2);
        persona.numId = Util.right(identf, 12);

        String datos = Util.getTextoEntre(texto, "NOMBRE.:", "\n");
        persona.nombres = Util.left(datos, 31);
        persona.genero = Util.right(datos, 1);

        persona.edad = Util.getTextoEntre(texto, "EDAD", "EXP");
        persona.exp = Util.getTextoEntre(texto, "EXP:", "EN:");
        persona.ciudad = Util.getTextoEntre(texto, "EN:", "\n");

        SettingsRun.getTestData().setParameter("Rango edad", persona.edad);
        SettingsRun.getTestData().setParameter("Lugar expedicion", persona.ciudad);
    }

    private void displayValoresMiles() {
        write(4);
        enter();
        Util.wait(1);

        String pantalla = read();
        if (pantalla.contains("SELECCIONE TIPO DE PERSONA")) {
            Reporter.reportEvent(Reporter.MIC_INFO, "SELECCIONE TIPO DE PERSONA");
            write(1);
            enter();
        }

        Evidence.save("VALORES MILES PESOS", this);
        int waited = 0;
        while (pantalla.contains("M�s...") && waited < DEFAULT_TIMEOUT) {
            Util.wait(1);
            hacerAvPag();
            Evidence.save("VALORES MILES PESOS", this);
            pantalla = read();
            waited++;
        }
        if (waited >= DEFAULT_TIMEOUT) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Timeout en valores miles");
        }
    }

    private void closeSessionWithTimeout() {
        int waited = 0;
        String texto = read();
        while (texto.contains("Inicio de Sesión") && waited < DEFAULT_TIMEOUT) {
            sendFunction("F3");
            Util.wait(1);
            texto = read();
            Evidence.save("Salir Sesion", this);
            waited++;
        }
        if (waited >= DEFAULT_TIMEOUT) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Timeout al cerrar sesión");
        }
        Evidence.save("Salir Sesion", this);
    }

    // ==== Clases internas ====
    private static class PersonaData {
        String tipoId, numId, genero, nombres, edad, exp, ciudad;

        String[] toArray() {
            return new String[] { tipoId, numId, genero, nombres, edad, exp, ciudad };
        }
    }
}
