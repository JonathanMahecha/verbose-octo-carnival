No se donde esta este error 
*** EXEC 11 >>> (14:55:06)
Fecha normalizada: 2000-11-22
*** INFO ----------- Datos ingresados: 
 [ Nombre: SEGURA RODRIGUEZ DIEGO HERNAN] 
 [ Type ID: 01] 
 [ Numero ID: 8161614]
*** PASSED --------- Ingreso correcto a FUNCIONES DE CREDITO
*** INFO ----------- Solicitando primer apellido
*** INFO ----------- Fecha AS400: [PJCIFUEN                     BANCO DAVIVIENDA                                  
 SD0001               INTERPRETACION REPORTE CENTRALES                14:55:19  
                                                                                
 _____________________________________________________________________________  
                                                                                
  TIPO DE CONSULTA...........:  1    (1=DATACREDITO, 2=CIFIN, 3=CIFIN MÓVIL)    
  TIPO DE IDENTIFICACIÓN.....:  01                                              
  NÚMERO DE IDENTIFICACIÓN...:        8161614                                   
  PRIMER APELLIDO............:                                                  
  REQUIERE TREND VIEW........:  N        (S=SI TREND VIEW, N=NO TREND VIEW)     
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
                                                                                
 _____________________________________________________________________________  
  F3=SALIR    F8=DATACRÉDITO                                                    
 CLIENTE NO EXISTE, DIGITE PRIMER APELLIDO Y F8                               +], Fecha Data: [20001122]
java.time.format.DateTimeParseException: Text 'PJCIFUEN                     BANCO DAVIVIENDA                   ...' could not be parsed at index 0
	at java.time.format.DateTimeFormatter.parseResolved0(Unknown Source)
	at java.time.format.DateTimeFormatter.parse(Unknown Source)
	at java.time.LocalDate.parse(Unknown Source)
	at obligacionesDataCredito.ControllerDataCredit.reformatFecha(ControllerDataCredit.java:133)
	at obligacionesDataCredito.ControllerDataCredit.ingresoAmbiente(ControllerDataCredit.java:108)
	at obligacionesDataCredito.ControllerDataCredit.mainController(ControllerDataCredit.java:76)
	at obligacionesDataCredito.LauncherDataCredit.doingTest(LauncherDataCredit.java:26)
	at library.core.BaseTestNG.TestExec(BaseTestNG.java:203)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
	at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
	at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
	at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
	at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
	at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
	at java.util.ArrayList.forEach(Unknown Source)
	at org.testng.TestRunner.privateRun(TestRunner.java:766)
	at org.testng.TestRunner.run(TestRunner.java:587)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
	at org.testng.SuiteRunner.run(SuiteRunner.java:286)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
	at org.testng.TestNG.runSuites(TestNG.java:1039)
	at org.testng.TestNG.run(TestNG.java:1007)
	at dav.util.JarCreator.main(JarCreator.java:39)
*** NOT COMPLETED -- Exception en [BaseTestNG.TestExec2]
Text 'PJCIFUEN                     BANCO DAVIVIENDA                   ...' could not be parsed at index 0

******************** SE TERMINAN LANZAMIENTOS ... HORA (14:55:38)

package obligacionesDataCredito;

import java.awt.AWTException;
import java.util.Optional;

import library.common.Util;
import library.common.VirtualKeyBoard;
import library.reporting.Evidence;
import library.reporting.Reporter;
import library.settings.SettingsRun;
import screens.actions.common.As400Base;

/**
 * Gestiona consultas de crédito en el sistema AS400.
 */
public class PageDataCredit extends As400Base {
    private static final int DEFAULT_TIMEOUT = 30;
    private static final int MAX_RETRIES = 2;
    private static final String MENU_CREDITO = "FUNCIONES DE CREDITO";
    private static final String RESULTADO_CONSULTA = "RESULTADO CONSULTA";
    private static final String CONSULTA_EFECTUADA = "CONSULTA EFECTUADA";

    private final PersonaData persona = new PersonaData();

    public PageDataCredit(String user, String password, String perfil) {
        super(user, password, perfil);
    }

    /**
     * Navega al menú de crédito en AS400.
     */
    public void ingresarAlCredito() throws Exception {
        selectAmbienteNoOperador("FMC", "MENU GENERAL DEL SISTEMA");
        navigateMenu(4, 3);
    }

    /**
     * Realiza la consulta de obligaciones.
     * @return Datos de la persona o null si no hay obligaciones.
     */
    public String[] consultarObligaciones(String typeId, String numberId, String lastName, String dateExp) {
        try {
            enterFuncionesCredito();
            sendConsultaInicial(typeId, numberId);

            String response = processApellidoSiSolicitado(lastName);

            if (isSinObligaciones(response)) {
                return handleSinObligaciones(response);
            }

            return handleConObligaciones(response, dateExp);

        } catch (Exception e) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Error en consulta: " + e.getMessage());
            return null;
        }
    }

    /**
     * Cierra sesión de manera segura.
     */
    public void cerrarSesion() {
    	String pantallaIniciSesion = read();
    	while (!pantallaIniciSesion.contains("Inicio de Sesión")) {
			sendFunction("F3");
			Util.wait(1);
			pantallaIniciSesion = read();
		}
        Evidence.save("Inicio Sesion", this);
    }

    // ===== Métodos privados =====

    private void navigateMenu(int first, int second) {
        write(first);
        enter();
        write(second);
        enter();
    }

    private void enterFuncionesCredito() {
        write(37);
        enter();
        Reporter.reportEvent(Reporter.MIC_PASS, "Ingreso correcto a " + MENU_CREDITO);
    }

    private void sendConsultaInicial(String typeId, String numberId) {
        write(1);
        write(typeId);
        write(numberId);
        enter();
        write("N");
        enter();
        Evidence.save("Datos consulta", this);
    }

    private String processApellidoSiSolicitado(String lastName) throws AWTException {
        String pantalla = read();
        String prompt = Util.getTextoEntre(pantalla, "F8=Datacrédito", "Espacio");

        if (prompt.contains("DIGITE PRIMER APELLIDO")) {
            enterLastName(lastName);
        }
        return waitForResultado();
    }

    private void enterLastName(String lastName) throws AWTException {
        Reporter.reportEvent(Reporter.MIC_INFO, "Solicitando primer apellido");
        Evidence.save("Primer apellido", this);

        VirtualKeyBoard vk = new VirtualKeyBoard();
        for (char c : lastName.toCharArray()) {
            if (c == 'ñ' || c == 'Ñ') {
                clipboard.setClipboard("ñ");
                Util.wait(1);
                vk.sendKeysCombination("CONTROL+V");
                clipboard.cleanClipboard();
            } else {
                write(String.valueOf(c));
            }
            Util.wait(1);
        }
        sendFunction("F8");
    }

    private String waitForResultado() {
        for (int i = 0; i < MAX_RETRIES; i++) {
            String texto = read();
            if (texto.contains(RESULTADO_CONSULTA)) {
                return texto;
            }
            Util.wait(2);
        }
        return read();
    }

    private boolean isSinObligaciones(String texto) {
        return texto.contains(RESULTADO_CONSULTA) && !texto.contains(CONSULTA_EFECTUADA);
    }

    private String[] handleSinObligaciones(String texto) {
        Evidence.save("Ventana consulta", this);
        String detalle = Util.getTextoEntre(texto, RESULTADO_CONSULTA, "Espacio");
        Reporter.reportEvent(Reporter.MIC_FAIL, "Sin obligaciones: [" + detalle + "]");

        SettingsRun.getTestData().setParameter("Con Obligaciones", "No Posee");
        int f3Times = detalle.contains("TIEMPO DE ESPERA") ? 2 : 3;
        sendFunction("F3", f3Times);
        return null;
    }

    private String[] handleConObligaciones(String texto, String dateExp) {
        // Validación de fecha
    	Util.wait(2);
        String fechaAS400 = Util.getTextoEntre(read(), "EXP:", "EN:").replace("/", "-");
        boolean fechaOk = fechaAS400.equals(dateExp);
        Reporter.reportEvent(Reporter.MIC_INFO,
                String.format("Fecha AS400: [%s], Fecha Data: [%s]", fechaAS400, dateExp));
        if (fechaOk) Reporter.reportEvent(Reporter.MIC_DONE, "Fechas iguales");

        extractPersonaData(texto);
        Evidence.save("Obligaciones Data", this);

        if (texto.contains(CONSULTA_EFECTUADA)) {
            String estado = fechaOk ? "Posee" : "Posee - Fecha desigual";
            SettingsRun.getTestData().setParameter("Con Obligaciones", estado);
            Reporter.reportEvent(Reporter.MIC_DONE,
                    fechaOk ? "Con Obligaciones" : "Con Obligaciones pero fecha desigual");
        }

        displayValoresMiles();
        sendFunction("F3", 2);
        return persona.toArray();
    }

    private void extractPersonaData(String texto) {
        String identf = Util.getTextoEntre(texto, "IDENTIFICACION..:", "NOMBRE.:");
        persona.tipoId = Util.left(identf, 2);
        persona.numId = Util.right(identf, 12);

        String datos = Util.getTextoEntre(texto, "NOMBRE.:", "\n");
        persona.nombres = Util.left(datos, 31);
        persona.genero = Util.right(datos, 1);

        persona.edad = Util.getTextoEntre(texto, "EDAD", "EXP");
        persona.exp = Util.getTextoEntre(texto, "EXP:", "EN:");
        persona.ciudad = Util.getTextoEntre(texto, "EN:", "\n");

        SettingsRun.getTestData().setParameter("Rango edad", persona.edad);
        SettingsRun.getTestData().setParameter("Lugar expedicion", persona.ciudad);
    }

    private void displayValoresMiles() {
        write(4);
        enter();
        Util.wait(1);

        String pantalla = read();
        if (pantalla.contains("SELECCIONE TIPO DE PERSONA")) {
            Reporter.reportEvent(Reporter.MIC_INFO, "SELECCIONE TIPO DE PERSONA");
            write(1);
            enter();
        }

        Evidence.save("VALORES MILES PESOS", this);
        int waited = 0;
        while (pantalla.contains("M�s...") && waited < DEFAULT_TIMEOUT) {
            Util.wait(1);
            hacerAvPag();
            Evidence.save("VALORES MILES PESOS", this);
            pantalla = read();
            waited++;
        }
        if (waited >= DEFAULT_TIMEOUT) {
            Reporter.reportEvent(Reporter.MIC_FAIL, "Timeout en valores miles");
        }
    }

    // ==== Clases internas ====
    private static class PersonaData {
        String tipoId, numId, genero, nombres, edad, exp, ciudad;

        String[] toArray() {
            return new String[] { tipoId, numId, genero, nombres, edad, exp, ciudad };
        }
    }
}























//package obligacionesDataCredito;
//
//import java.awt.AWTException;
//import java.awt.Robot;
//import java.awt.event.KeyEvent;
//import java.util.List;
//import java.util.Optional;
//
//import library.common.Util;
//import library.common.VirtualKeyBoard;
//import library.reporting.Evidence;
//import library.reporting.Reporter;
//import library.settings.SettingsRun;
//import screens.actions.common.As400Base;
//
///**
// * Clase para manejar consultas de crédito en sistema AS400 Gestiona el flujo
// * completo de consulta de obligaciones crediticias
// */
//public class PageDataCredit extends As400Base {
//
//	private static final int DEFAULT_TIMEOUT_SECONDS = 30;
//	private static final int MAX_RETRY_ATTEMPTS = 2;
//	private static final String MENU_CREDITO = "FUNCIONES DE CREDITO";
//	private static final String RESULTADO_CONSULTA = "RESULTADO CONSULTA";
//	private static final String CONSULTA_EFECTUADA = "CONSULTA EFECTUADA";
//
//	// Datos de la persona consultada
//	private PersonaData personaData;
//
//	public PageDataCredit(String user, String password, String perfil) {
//		super(user, password, perfil);
//		this.personaData = new PersonaData();
//	}
//
//	/**
//	 * Ingresa a la ruta del ambiente AS400 para consultas de crédito
//	 */
//	public void ingresoRutaAmb() throws Exception {
//		selectAmbienteNoOperador("FMC", "MENU GENERAL DEL SISTEMA");
//		navegarAMenuCredito();
//	}
//
//	/**
//	 * Realiza la consulta completa de obligaciones crediticias
//	 * 
//	 * @param typeId   Tipo de identificación
//	 * @param numberId Número de identificación
//	 * @param lastName Primer apellido
//	 * @param dateExp  Fecha de expedición esperada
//	 * @return Array con datos de la persona o null si no hay obligaciones
//	 */
//	public String[] ingresoDatosObliga(String typeId, String numberId, String lastName, String dateExp) {
//		try {
//			accederFuncionesCredito();
//			realizarConsultaInicial(typeId, numberId);
//
//			String textoResultado = procesarSolicitudApellido(lastName);
//
//			if (esConsultaSinObligaciones(textoResultado)) {
//				return manejarConsultaSinObligaciones(textoResultado);
//			}
//
//			return procesarConsultaConObligaciones(textoResultado, dateExp);
//
//		} catch (Exception e) {
//			Reporter.reportEvent(Reporter.MIC_FAIL, "Error en consulta de obligaciones: " + e.getMessage());
//			return null;
//		}
//	}
//
//	/**
//	 * Cierra la sesión del usuario de manera segura
//	 */
//	public void salirUsuario() {
//		cerrarSesionConTimeout();
//	}
//
//	// Métodos privados para mejor organización
//
//	private void navegarAMenuCredito() {
//		write(4);
//		enter();
//		write(3);
//		enter();
//	}
//
//	private void accederFuncionesCredito() {
//		write(37);
//		enter();
//		Reporter.reportEvent(Reporter.MIC_PASS, "Ingreso correcto a " + MENU_CREDITO);
//	}
//
//	private void realizarConsultaInicial(String typeId, String numberId) {
//		write(1);
//		write(typeId);
//		write(numberId);
//		enter();
//		write("N");
//		enter();
//		Evidence.save("Datos consulta", this);
//	}
//
//	private String procesarSolicitudApellido(String lastName) throws AWTException {
//		String textoLeido = read();
//		String textoCapturado = Util.getTextoEntre(textoLeido, "F8=Datacrédito", "Espacio");
//
//		if (textoCapturado.contains("DIGITE PRIMER APELLIDO")) {
//			solicitarPrimerApellido(lastName);
//		}
//		if (textoCapturado.contains("DIGITE PRIMER APELLIDO")) {
//
//		}
//		return esperarResultadoConsulta();
//	}
//
//	private void solicitarPrimerApellido(String lastName) throws AWTException {
//		VirtualKeyBoard vk = new VirtualKeyBoard();
//		Reporter.reportEvent(Reporter.MIC_INFO, "Se solicita primer apellido");
//		Evidence.save("Primer apellido", this);
//		if (lastName.contains("ñ") || lastName.contains("Ñ")) {
//			String[] lastNameLeters = lastName.split("");
//			for (String lastNameLeter : lastNameLeters) {
//				if (lastNameLeter.equals("ñ") || lastNameLeter.equals("Ñ")) {
//					clipboard.setClipboard("ñ");
//					Util.wait(1);
//					vk.sendKeysCombination("CONTROL+V");
//					clipboard.cleanClipboard();
//				} else {
//					write(lastNameLeter);
//				}
//				Util.wait(1);
//			}
//		} else {
//			write(lastName);
//		}
//		sendFunction("F8");
//	}
//
//	private String esperarResultadoConsulta() {
//		for (int intento = 0; intento < MAX_RETRY_ATTEMPTS; intento++) {
//			String texto = read();
//			if (texto.contains(RESULTADO_CONSULTA)) {
//				return texto;
//			}
//			Util.wait(2);
//		}
//		return read(); // Fallback al último intento
//	}
//
//	private boolean esConsultaSinObligaciones(String textoLeido) {
//		return textoLeido.contains(RESULTADO_CONSULTA);
//	}
//
//	private String[] manejarConsultaSinObligaciones(String textoLeido) {
//		Evidence.save("Ventana consulta", this);
//		String resultado = Util.getTextoEntre(textoLeido, RESULTADO_CONSULTA, "Espacio");
//		Reporter.reportEvent(Reporter.MIC_FAIL, "El resultado de la consulta es: [" + resultado + "]");
//
//		SettingsRun.getTestData().setParameter("Con Obligaciones", "No Posee");
//
//		if (resultado.contains("TIEMPO DE ESPERA SUPERA EL MAXIMO PERMITIDO")) {
//			sendFunction("F3", 2);
//		} else {
//			sendFunction("F3", 3);
//		}
//
//		return null;
//	}
//
//	private String[] procesarConsultaConObligaciones(String textoLeido, String dateExp) {
//		ResultadoValidacionFecha resultadoFecha = validarFechaExpedicion(textoLeido, dateExp);
//		extraerDatosPersona(textoLeido);
//
//		Evidence.save("Obligaciones Data", this);
//		actualizarEstadoObligaciones(textoLeido, resultadoFecha);
//		mostrarValoresMilesDePesos();
//
//		finalizarConsulta();
//		return personaData.toArray();
//	}
//
//	private ResultadoValidacionFecha validarFechaExpedicion(String textoLeido, String dateExp) {
//		String fechaAS400 = Util.getTextoEntre(textoLeido, "EXP:", "EN:").replace("/", "-");
//		Reporter.reportEvent(Reporter.MIC_INFO,
//				String.format("Fecha AS400: [%s], Fecha Data: [%s]", fechaAS400, dateExp));
//
//		boolean fechasIguales = fechaAS400.equals(dateExp);
//		if (fechasIguales) {
//			Reporter.reportEvent(Reporter.MIC_DONE, "Las fechas de expedición son iguales");
//		}
//
//		return new ResultadoValidacionFecha(fechasIguales, fechaAS400);
//	}
//
//	private void extraerDatosPersona(String textoLeido) {
//		// Extraer identificación
//		String identf = Util.getTextoEntre(textoLeido, "IDENTIFICACION..:", "NOMBRE.:");
//		personaData.tipoId = Util.left(identf, 2);
//		personaData.numId = Util.right(identf, 12);
//
//		// Extraer datos personales
//		String datosPerso = Util.getTextoEntre(textoLeido, "NOMBRE.:", "\n");
//		personaData.genero = Util.right(datosPerso, 1);
//		personaData.nombres = Util.left(datosPerso, 31);
//
//		// Extraer edad y lugar de expedición
//		personaData.edad = Util.getTextoEntre(textoLeido, "EDAD", "EXP");
//		personaData.exp = Util.getTextoEntre(textoLeido, "EXP:", "EN");
//		personaData.ciudad = Util.getTextoEntre(textoLeido, "EN:", "\n");
//
//		// Actualizar parámetros de prueba
//		SettingsRun.getTestData().setParameter("Rango edad", personaData.edad);
//		SettingsRun.getTestData().setParameter("Lugar expedicion", personaData.ciudad);
//	}
//
//	private void actualizarEstadoObligaciones(String textoLeido, ResultadoValidacionFecha resultadoFecha) {
//		if (!textoLeido.contains(CONSULTA_EFECTUADA)) {
//			return;
//		}
//
//		String estadoObligaciones = resultadoFecha.fechasIguales ? "Posee" : "Posee - Fecha de Exp es desigual";
//
//		String mensaje = resultadoFecha.fechasIguales ? "Con Obligaciones"
//				: "Con Obligaciones pero la Fecha de Exp es desigual";
//
//		Reporter.reportEvent(Reporter.MIC_DONE, mensaje);
//		SettingsRun.getTestData().setParameter("Con Obligaciones", estadoObligaciones);
//	}
//
//	private void mostrarValoresMilesDePesos() {
//		write(4);
//		enter();
//		Util.wait(1);
//
//		String textoLeido = read();
//		if (textoLeido.contains("SELECCIONE TIPO DE PERSONA")) {
//			Reporter.reportEvent(Reporter.MIC_INFO, "SELECCIONE TIPO DE PERSONA");
//			write(1);
//			enter();
//		}
//
//		procesarPaginacionValores();
//	}
//
//	private void procesarPaginacionValores() {
//		Evidence.save("VALORES EN MILES DE PESOS", this);
//		int segundos = 0;
//		String textoLeido = read();
//
//		while (textoLeido.contains("M�s...") && segundos < DEFAULT_TIMEOUT_SECONDS) {
//			Util.wait(1);
//			hacerAvPag();
//			Evidence.save("VALORES EN MILES DE PESOS", this);
//			textoLeido = read();
//			segundos++;
//		}
//
//		if (segundos >= DEFAULT_TIMEOUT_SECONDS) {
//			Reporter.reportEvent(Reporter.MIC_FAIL, "Tiempo de espera agotado para valores en miles de pesos");
//		}
//	}
//
//	private void finalizarConsulta() {
//		Util.wait(1);
//		sendFunction("F3", 2);
//	}
//
//	private void cerrarSesionConTimeout() {
//		int segundos = 0;
//		String textoLeido = read();
//
//		while (textoLeido.contains("Inicio de Sesión") && segundos < DEFAULT_TIMEOUT_SECONDS) {
//			sendFunction("F3");
//			Util.wait(1);
//			textoLeido = read();
//			Evidence.save("Salir Sesion", this);
//			segundos++;
//		}
//
//		if (segundos >= DEFAULT_TIMEOUT_SECONDS) {
//			Reporter.reportEvent(Reporter.MIC_FAIL, "Tiempo de espera agotado al cerrar sesión");
//		}
//
//		Evidence.save("Salir Sesion", this);
//	}
//
//	// Clases internas para mejor organización de datos
//
//	/**
//	 * Clase para encapsular los datos de una persona
//	 */
//	private static class PersonaData {
//		String tipoId;
//		String numId;
//		String genero;
//		String nombres;
//		String edad;
//		String exp;
//		String ciudad;
//
//		String[] toArray() {
//			return new String[] { tipoId, numId, genero, nombres, edad, exp, ciudad };
//		}
//	}
//
//	/**
//	 * Clase para encapsular el resultado de validación de fecha
//	 */
//	private static class ResultadoValidacionFecha {
//		final boolean fechasIguales;
//		final String fechaAS400;
//
//		ResultadoValidacionFecha(boolean fechasIguales, String fechaAS400) {
//			this.fechasIguales = fechasIguales;
//			this.fechaAS400 = fechaAS400;
//		}
//	}
//
//	public void validateInic(String titleIni) {
//		String textoLeido = read();
//		if (textoLeido.contains(titleIni)) {
//			return;
//		}
//		
//	}
//
//}
//
////package obligacionesDataCredito;
////
////import java.util.List;
////
////import library.common.Util;
////import library.reporting.Evidence;
////import library.reporting.Reporter;
////import library.settings.SettingsRun;
////import screens.actions.common.As400Base;
////
////public class PageDataCredit extends As400Base {
////
////	private static final int TIMEOUT_SECONDS = 30;
////	String tipoId, numId, genero, nombres, edad, exp, ciudad;
////
////	public PageDataCredit(String user, String password, String perfil) {
////		super(user, password, perfil);
////	}
////
////	public void ingresoRutaAmb() throws Exception {
////		selectAmbienteNoOperador("FMC", "MENU GENERAL DEL SISTEMA");
////		write(4);
////		enter();
////		write(3);
////		enter();
////	}
////
////	public String[] ingresoDatosObliga(String typeId, String numberId, String lastName, String dateExp) {
////		write(37);
////		enter();
////		Reporter.reportEvent(Reporter.MIC_PASS, "Ingreso Correcto a FUNCIONES DE CREDITO");
////
////		writeDatosConsulta(typeId, numberId);
////
////		String textoLeido = read();
////		String textoCapturado = Util.getTextoEntre(textoLeido, "F8=Datacr�dito", "Espacio");
////
////		if (textoCapturado.contains("DIGITE PRIMER APELLIDO")) {
////			solicitarPrimerApellido(lastName);
////		}
////
////		textoLeido = esperarResultadoConsulta();
////		if (textoLeido.contains("RESULTADO CONSULTA")) {
////			manejarConsultaSinObligaciones(textoLeido);
////			return null;
////		}
////		String fecha = compararFecha(textoLeido, dateExp);
////		extraerDatos(textoLeido);
////
////		Evidence.save("Obligaciones Data", this);
////		verificarObligaciones(textoLeido, fecha);
////
////		mostrarValoresMilesDePesos();
////
////		Util.wait(1);
////		sendFunction("F3", 2);
////		String[] datosPersNat = { tipoId, numId, genero, nombres, edad, exp, ciudad };
////		return datosPersNat;
////	}
////
////	private String compararFecha(String textoLeido, String dateExp) {
////		String EXP = Util.getTextoEntre(textoLeido, "EXP:", "EN:").replace("/", "-");
////		Reporter.reportEvent(Reporter.MIC_INFO, "Fecha As400: [" + EXP + "], Fecha Data: [" + dateExp + "]");
////		if (!EXP.equals(dateExp)) {
////			return "Fecha incorrecta";
////		}
////		Reporter.reportEvent(Reporter.MIC_DONE, "Las fechas de expedicion es igual");
////		return "Fecha correcta";
////	}
////
////	private void extraerDatos(String textoLeido) {
////		String identf = Util.getTextoEntre(textoLeido, "IDENTIFICACION..:", "NOMBRE.:");
////		tipoId = Util.left(identf, 2);
////		numId = Util.right(identf, 12);
////		String datosPerso = Util.getTextoEntre(textoLeido, "NOMBRE.:", "\n");
////		genero = Util.right(datosPerso, 1);
////		nombres = Util.getTextoEntre(textoLeido, "NOMBRE.:", genero);
////		String estado = Util.getTextoEntre(textoLeido, "EDAD", "EDAD");
////		edad = Util.getTextoEntre(textoLeido, "EDAD", "EXP");
////		exp = Util.getTextoEntre(textoLeido, "EXP:", "EN");
////		ciudad = Util.getTextoEntre(textoLeido, "EN:", "\n");
////		SettingsRun.getTestData().setParameter("Rango edad", edad);
////		SettingsRun.getTestData().setParameter("Lugar expedicion", ciudad);
////	}
////
////	private void writeDatosConsulta(String typeId, String numberId) {
////		write(1);
////		write(typeId);
////		write(numberId);
////		enter();
////
////		write("N");
////		enter();
////		Evidence.save("Datos consulta", this);
////	}
////
////	private void solicitarPrimerApellido(String lastName) {
////		Reporter.reportEvent(Reporter.MIC_INFO, "Se solicita Primer Apellido");
////		Evidence.save("Primer apellido", this);
////		write(lastName);
////		sendFunction("F8");
////	}
////
////	private String esperarResultadoConsulta() {
////		for (int i = 0; i < 5; i++) {
////			String texto = read();
////			if (texto.contains("RESULTADO CONSULTA")) {
////				return texto;
////			}
////			Util.wait(1);
////		}
////		return read(); // Return last read as fallback
////	}
////
////	private void manejarConsultaSinObligaciones(String textoLeido) {
////		Evidence.save("Ventana consulta", this);
////		String resultado = Util.getTextoEntre(textoLeido, "RESULTADO CONSULTA", "Espacio");
////		Reporter.reportEvent(Reporter.MIC_FAIL, "El resultado de la consulta es: [" + resultado + "]");
////		SettingsRun.getTestData().setParameter("Con Obligaciones", "No Posee");
////		if (resultado.contains("TIEMPO DE ESPERA SUPERA EL MAXIMO PERMITIDO")) {
////			sendFunction("F3", 2);
////		} else {
////			sendFunction("F3", 3);
////		}
////
////	}
////
////	private void verificarObligaciones(String textoLeido, String fecha) {
////		if (textoLeido.contains("CONSULTA EFECTUADA") && fecha.equals("Fecha incorrecta")) {
////			Reporter.reportEvent(Reporter.MIC_DONE, "Con Obligaciones pero la Fecha de Exp es desigual");
////			SettingsRun.getTestData().setParameter("Con Obligaciones", "Posee - Fecha de Exp es desigual");
////		}
////
////		if (textoLeido.contains("CONSULTA EFECTUADA")) {
////			Reporter.reportEvent(Reporter.MIC_DONE, "Con Obligaciones");
////			SettingsRun.getTestData().setParameter("Con Obligaciones", "Posee");
////		}
////	}
////
////	private void mostrarValoresMilesDePesos() {
////		write(4);
////		enter();
////		Util.wait(1);
////
////		String textoLeido = read();
////		if (textoLeido.contains("SELECCIONE TIPO DE PERSONA")) {
////			Reporter.reportEvent(Reporter.MIC_INFO, "SELECCIONE TIPO DE PERSONA");
////			write(1);
////			enter();
////		}
////
////		Evidence.save("VALORES EN MILES DE PESOS", this);
////		int segundos = 0;
////
////		while (textoLeido.contains("M�s...") && segundos < TIMEOUT_SECONDS) {
////			Util.wait(1);
////			hacerAvPag();
////			Evidence.save("VALORES EN MILES DE PESOS", this);
////			textoLeido = read();
////			segundos++;
////		}
////
////		if (segundos >= TIMEOUT_SECONDS) {
////			System.out.println("Tiempo de espera agotado (30 segundos).");
////		}
////	}
////
////	public void salirUsuario() {
////		int segundos = 0;
////		String textoLeido = read();
////
////		while (textoLeido.contains("Inicio de Sesi�n") && segundos < TIMEOUT_SECONDS) {
////			sendFunction("F3");
////			Util.wait(1);
////			textoLeido = read();
////			Evidence.save("Salir Sesion", this);
////			segundos++;
////		}
////
////		if (segundos >= TIMEOUT_SECONDS) {
////			Reporter.reportEvent(Reporter.MIC_FAIL, "Tiempo de espera agotado (30 segundos).");
////		}
////
////		Evidence.save("Salir Sesion", this);
////	}
////}

package obligacionesDataCredito;

import library.common.Util;

import library.core.BasePageWeb;
import library.core.Controller;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Random;

import org.apache.poi.hssf.record.PageBreakRecord.Break;
import org.openqa.selenium.By;

import dav.c360.PageInicioC360;
import dav.c360.PageLogin;
import obligacionesDataCredito.LocatorsDataCredit;

import library.reporting.Reporter;
import library.settings.SettingsRun;
import screens.actions.common.CommonAs400;

public class ControllerDataCredit implements Controller {
	// Datos Exportados
	String typeId, numberId, name, dateExp;
	// Datos Extraidos
	String tipoCliente, nombres, primerApellido, segundoApellido, fechaNac, fechaExp, direccion, genero;
	private static final DateTimeFormatter INPUT_FMT = DateTimeFormatter.ofPattern("yyyy/MM/dd");
	private static final DateTimeFormatter OUTPUT_FMT = DateTimeFormatter.ofPattern("dd/MM/yyyy");
	// Clases
	PageDataCredit as;
	PageInicioC360 pageInicio = null;
	PageLogin c360 = null;
	String navegador = BasePageWeb.CHROME;
	String[] datosPerson;
	LocatorsDataCredit locators;
	boolean alerta;
	Random random = new Random();

	public void destroy() {
		// TODO Auto-generated method stub
		as.closeAs400();
	}

	public void dataAmbiente() {
		typeId = SettingsRun.getTestData().getParameter("Type ID").trim();
		numberId = SettingsRun.getTestData().getParameter("Number ID").trim();
		name = SettingsRun.getTestData().getParameter("Name").trim();
		dateExp = SettingsRun.getTestData().getParameter("Date_Exp").trim();
		String formattedDate;
		if (dateExp.matches("\\d{8}")) {
			String year = dateExp.substring(0, 4);
			String month = dateExp.substring(4, 6);
			String day = dateExp.substring(6, 8);
			formattedDate = year + "-" + month + "-" + day;

		} else if (dateExp.matches("\\d{4}-\\d{2}-\\d{2}")) {
			formattedDate = dateExp;

		} else if (dateExp.matches("\\d{2}-\\d{2}-\\d{4}")) {
			String[] parts = dateExp.split("-");
			formattedDate = parts[2] + "-" + parts[1] + "-" + parts[0];

		} else if (dateExp.matches("\\d{2}/\\d{2}/\\d{4}")) {
			String[] parts = dateExp.split("/");
			formattedDate = parts[2] + "-" + parts[1] + "-" + parts[0];

		} else {
			throw new IllegalArgumentException("Formato de fecha inválido: " + dateExp);
		}
		System.out.println("Fecha normalizada: " + formattedDate);
	}

	public void mainController() throws Exception {
		dataAmbiente();
		ingresoAmbiente();
		if (SettingsRun.getGlobalData("data.crearClients360").equals("Si")) {
			client360Procs();
		}
	}

	public void iniProcessAs() {
		as = new PageDataCredit(SettingsRun.getGlobalData("data.as400User"), SettingsRun.getGlobalData("data.as400Pwd"),
				CommonAs400.PERFIL_NO_OPERADOR);
	}

	public void ingresoAmbiente() throws Exception {
		String[] lastName = name.split(" ");
		typeId = Util.leftComplete(typeId, 2, '0');
		if (SettingsRun.esIteracionInicial()) {
			iniProcessAs();
			as.ingresarAlCredito();
		}
		Reporter.reportEvent(Reporter.MIC_INFO, "Datos ingresados: \n [ Nombre: " + name + "] \n [ Type ID: " + typeId
				+ "] \n [ Numero ID: " + numberId + "]");
		datosPerson = as.consultarObligaciones(typeId, numberId, lastName[0], dateExp);
		String nombreCompleto = datosPerson[3];
		String[] divisionNombre = nombreCompleto.split(" ");
		if (divisionNombre.length == 4) {
			nombres = divisionNombre[0] + " " + divisionNombre[1];
			primerApellido = divisionNombre[2];
			segundoApellido = divisionNombre[3];
		} else {
			nombres = divisionNombre[0];
			primerApellido = divisionNombre[1];
			segundoApellido = divisionNombre[2];
		}
		fechaExp = reformatFecha(datosPerson[5]);
		fechaNac = menosVeinteAnios(datosPerson[5]);
		if (datosPerson[2].equals("F")) {
			genero = "FEMENINO";
		} else {
			genero = "MASCULINO";
		}
		if (datosPerson[0].equals("01")) {
			tipoCliente = "Persona Natural";
		} else {
			Reporter.reportEvent(Reporter.MIC_FAIL, "La cedula no es persona natural");
			SettingsRun.exitTestIteration();
		}
		if (SettingsRun.esIteracionFinal()) {
			as.cerrarSesion();
		}
	}

	public static String menosVeinteAnios(String fechaEntrada) {
		LocalDate fecha = LocalDate.parse(fechaEntrada, INPUT_FMT);
		LocalDate fechaModificada = fecha.minusYears(20);
		return fechaModificada.format(OUTPUT_FMT);
	}

	public static String reformatFecha(String fechaEntrada) {
		LocalDate fecha = LocalDate.parse(fechaEntrada, INPUT_FMT);
		return fecha.format(OUTPUT_FMT);
	}

	private void client360Procs() throws Exception {
		String id = SettingsRun.getProperty("data.usuario360");
		String contraseña = SettingsRun.getProperty("data.clave360");
		try {
			if (SettingsRun.esIteracionInicial()) {

				this.c360 = new PageLogin(navegador);
				this.c360.maximizeBrowser();
				this.pageInicio = new PageInicioC360(c360);
				pageInicio.refresh();
				this.c360.login360(id, contraseña);
			}
			do {
				Util.wait(3);
				pageInicio.reporteAlertas();
			} while (pageInicio.element(locators.LOC_BIENVENIDO_MAIN_PAGE) == null);
		} catch (Exception e) {
			e.printStackTrace();
		}

		Util.wait(3);
		pageInicio.irAModulo(PageInicioC360.MOD_PERSONAS);
		String existe = pageInicio.buscarExistenciaId(numberId, tipoCliente);
		String textoEstado = pageInicio.extraerTxt();
		SettingsRun.getTestData().setParameter("Estado", textoEstado);
		if (existe != null) {
			Reporter.reportEvent(Reporter.MIC_INFO,
					"Este número de Identificacion ya esta registrado en Cliente 360: " + numberId);
			Util.wait(3);
			pageInicio.irAModulo(PageInicioC360.MOD_PAGINA_INICIAL);
			pageInicio.reporteAlertas();
			return;
		}

		do {
			Util.wait(2);
		} while (pageInicio.element(locators.BTN_AGREGAR_PERSONA) == null);
		pageInicio.agregarNuevo(locators.BTN_AGREGAR_PERSONA);
		Util.wait(1);
		alerta = pageInicio.setDatosBasicosPersonas("CEDULA DE CIUDADANIA", numberId, nombres, primerApellido,
				segundoApellido, fechaNac, fechaExp, "13/01/2024");

		if (alerta) {
			pageInicio.irAModulo(PageInicioC360.MOD_PAGINA_INICIAL);
			Util.wait(2);
			pageInicio.irAModulo(PageInicioC360.MOD_PERSONAS);
			SettingsRun.exitTestIteration();
		} else {
			// Lugar de expedición
			pageInicio.setLugar(typeId, LocatorsDataCredit.ICONO_LUGAR_EXPEDICION,
					LocatorsDataCredit.INPUT_LUGAR_GENERAL, LocatorsDataCredit.INPUT_SITIO_GENERAL, "Ciudad", "BOGOTA",
					LocatorsDataCredit.BTN_ACEPTAR_GENERAL);
			// Lugar de nacimiento
			pageInicio.setLugar(typeId, LocatorsDataCredit.ICONO_LUGAR_NACIMIENTO,
					LocatorsDataCredit.INPUT_LUGAR_GENERAL, LocatorsDataCredit.INPUT_SITIO_GENERAL, "Ciudad", "BOGOTA",
					LocatorsDataCredit.BTN_ACEPTAR_GENERAL);
//			// Teléfono
			pageInicio.setTelefono(tipoCliente, "7306852", "BOGOTA ", "PERSONAL");
//			// Correo electrónico
			pageInicio.setCorreoCelular(LocatorsDataCredit.ICONO_CORREO, LocatorsDataCredit.INPUT_CORREO_UNO,
					LocatorsDataCredit.INPUT_CORREO, "pruebasmovillabconsumo@gmail.com",
					LocatorsDataCredit.BTN_ACEPTAR_CORREO, LocatorsDataCredit.BTN_NUEVO_CORREO);
//			// Celular
			pageInicio.setCorreoCelular(LocatorsDataCredit.ICONO_CELULAR, LocatorsDataCredit.INPUT_CELULAR_UNO,
					LocatorsDataCredit.INPUT_CELULAR, "3144425014", LocatorsDataCredit.BTN_ACEPTAR_CELULAR,
					LocatorsDataCredit.BTN_NUEVO_CELULAR);
			pageInicio.setSubEstado();
			Util.wait(3);
			Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos Básicos.");
			this.c360.tomarCaptura("Datos Básicos");

			pageInicio.irLink(LocatorsDataCredit.LOC_CAMPO_ID);
			Util.wait(5);
			if (pageInicio.existDialog()) {
				pageInicio.getDriver().switchTo().alert().accept();
			}

			alerta = pageInicio.reporteAlertas();
			if (alerta) {
				Util.wait(2);
				pageInicio.click(LocatorsDataCredit.BTN_CANCELAR_CREACION_USUARIO);
				pageInicio.irAModulo(PageInicioC360.MOD_PAGINA_INICIAL);
				Util.wait(2);
				pageInicio.irAModulo(PageInicioC360.MOD_PERSONAS);
				SettingsRun.exitTestIteration();
			} else {
				if (!pageInicio.isDisplayed(LocatorsDataCredit.LOC_AUX)) {
					pageInicio.irLink(LocatorsDataCredit.LOC_CAMPO_ID);
				}
			}
			if (tipoCliente.contains("Persona Natural")) {
				String msg = null;
				if (pageInicio.existDialog()) {
					msg = pageInicio.getMessageDialog();
					if (msg != null) {
						if (msg.contains(
								"La fecha de expedición debe ser al menos 18 años mayor que la fecha de nacimiento")) {
							Reporter.reportEvent(Reporter.MIC_INFO, msg);
							pageInicio.acceptDialog();
						}
					}
				}

				if (msg == null) {
					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_MAS_INFORMACION);

					pageInicio.setMasInformacion(genero, "SOLTERO", "UNIVERSITARIO", "ADMINISTRACION DE NEGOCIOS",
							"COLOMBIA");
					this.c360.tomarCaptura("Más información");
					Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Más información.");
					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_MAS_DATOS_CONTACTO);
					pageInicio.agregaNuevaDireccion("Persona Natural");
					direccionAleatoria();
					msg = pageInicio.setDireccion(direccionAleatoria(), "CORRESPONDENCIA 1 DEL NEGOCIO", "COLOMBIA",
							"BOGOTA, D.C.", "BOGOTA, D.C.", "BOGOTA, D.C.");
					if (msg != null) {
						Reporter.reportEvent(Reporter.MIC_FAIL, msg);
						SettingsRun.exitTestIteration();

					}

					pageInicio.agregaNuevaDireccion("Persona Natural");
					pageInicio.setDireccion(direccionAleatoria(), "OFICINA CLIENTE", "COLOMBIA", "BOGOTA, D.C.",
							"BOGOTA, D.C.", "BOGOTA, D.C.");
					pageInicio.agregaNuevaDireccion("Persona Natural");
					pageInicio.setDireccion(direccionAleatoria(), "RESIDENCIA CLIENTE", "COLOMBIA", "BOGOTA, D.C.",
							"BOGOTA, D.C.", "BOGOTA, D.C.");
					pageInicio.guardar();
					this.c360.tomarCaptura("Datos de contacto");
					Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos de contacto.");
					Util.wait(3);
					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_INFORMACION_FINANCIERA);
					pageInicio.agregarNuevo(LocatorsDataCredit.BTN_AGREGAR_EGRESOS);
					pageInicio.setEgresos("Otros Egresos", "300000", "Descripcion de los EGRESOS ejemplo");
					pageInicio.guardar();

					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_INFORMACION_FINANCIERA);
					pageInicio.agregarNuevo(LocatorsDataCredit.BTN_AGREGAR_INGRESOS);

					pageInicio.setIngresosPersonas("SERVIDOR PUBLICO", "4/06/2018", "2000000", "Salario Mensual",
							"INDEFINIDO",
							"ASALARIADOS: PERSONAS NATURALES Y SUCESIONES ILÍQUIDAS, CUYOS INGRESOS PROVENGAN DE LA RELACIÓN LABORAL, LEGAL O REGLAMENTARIA O QUE TENGAN SU ORIGEN EN ELLA.",
							"54871200", "ABOGADO", "Descripcion para ingresos persona natural", "Automatizacion");
					pageInicio.guardar();

					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_INFORMACION_FINANCIERA);
					pageInicio.agregarNuevo(LocatorsDataCredit.BTN_AGREGAR_PASIVOS);
					pageInicio.setPasivos("Otros Pasivos", "250000", "BANCOS");
					pageInicio.reporteAlertas();
					Util.wait(1);
					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_INFORMACION_FINANCIERA);
					pageInicio.agregarNuevo(LocatorsDataCredit.BTN_AGREGAR_ACTIVOS);
					pageInicio.setActivos("Otros Activos", "9000000", "Descripcion de los activos ejemplo ");
					pageInicio.guardar();
					pageInicio.irAModulosPrincipales(LocatorsDataCredit.LOC_INFORMACION_FINANCIERA);

					this.c360.tomarCaptura("Datos información financiera");
					Reporter.reportEvent(Reporter.MIC_INFO, "Completado: Datos información financiera.");
					pageInicio.guardar();
					Reporter.reportEvent(Reporter.MIC_PASS, "REGISTRO REALIZADO");
				}
			}
			if (SettingsRun.esIteracionFinal()) {
				pageInicio.closeAllBrowsers();

			}
		}
	}

	private String direccionAleatoria() {
		for (int i = 0; i < 10; i++) {
			int num1 = random.nextInt(100) + 1;
			int num2 = random.nextInt(100) + 1;
			int num3 = random.nextInt(10) + 1;
			direccion = "CLL " + num1 + " " + num2 + " " + num3;
		}
		return direccion;
	}

}

//}
