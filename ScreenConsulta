public void validateData() throws Exception {
    DataDriven td = SettingsRun.getTestData();

    String[] codes = { "ZR", "XN", "XR", "ZT", "5C", "O4", "BA", "BB", "BC", "BJ", "BK", "CF", "F1", "I1", "I5",
            "N9", "P9", "Q1", "Q2", "Q4", "V1", "V3", "L3", "1K", "LA", "BP", "J1", "J2", "BS", "BV", "BW", "DV",
            "AY", "D0", "D1", "BU", "D2", "EM", "EN", "EO", "EP", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9",
            "EQ", "CB", "CC", "ER", "ET", "EV", "CK", "EW", "EX", "EY", "EZ", "CT", "E5", "CX", "CZ", "CG", "BR",
            "BX", "XW", "8D", "8G", "H6", "H7", "PP", "8I", "ME", "E6", "CP", "ZG", "NT", "PT", "3S", "BT", "N2",
            "06", "DL", "OQ", "WH", "7D", "8H", "DH", "HN", "AN8", "HX", "EF", "DN", "GJ", "36", "A1S", "A12", "JK",
            "AKG", "JQ", "6W", "JR", "05", "9A", "LH", "L8", "07", "ANY", "AH4", "AN5", "14", "04", "83", "84",
            "AQ7", "API", "APV", "02" };

    // Obtener parámetros de DataDriven
    String escAs400 = td.getParameter("Escenarios As400");
    String tipoID = td.getParameter("Tipo ID");
    String numeroID = td.getParameter("Numero ID");
    String nombre = td.getParameter("Nombre");
    String direccion = td.getParameter("Direccion");
    String tipoProducto = td.getParameter("Tipo Producto");
    String numTarjeCred = td.getParameter("Numero de Tarjeta de Credito");
    String compra = td.getParameter("Compra");
    String montoCompra = td.getParameter("Monto Compra");
    String cupoSolicitado = td.getParameter("Cupo Solicitado");
    String oficinaRad = td.getParameter("Oficina Radicación");
    String modalidadCredito = td.getParameter("Modalidad Credito");
    String tipoGarantia = td.getParameter("Tipo Garantia");
    String activar = td.getParameter("Activar");

    // 1) Validar tipoProducto frente a códigos inválidos
    if (!isEmpty(tipoProducto)) {
        for (String code : codes) {
            if (tipoProducto.contains(code)) {
                Reporter.reportEvent(Reporter.MIC_NOEXEC,
                        "El tipo de producto seleccionado está parametrizado e inutilizable, por favor verificar.");
                SettingsRun.exitTestIteration();
                return;
            }
        }
    }

    // 2) Escenarios Solo Activar / Solo Compra: se necesita AL MENOS numero tarjeta O (TipoID + NumeroID)
    if (!isEmpty(escAs400) && (escAs400.equals("Solo Activar") || escAs400.equals("Solo Compra"))) {
        boolean hasCardNum = !isEmpty(numTarjeCred);
        boolean hasIdCombo = !isEmpty(tipoID) && !isEmpty(numeroID);

        if (!hasCardNum && !hasIdCombo) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC,
                    "Para el escenario '" + escAs400
                            + "' se requiere al menos: Numero de Tarjeta de Credito O (Tipo ID y Numero ID).");
            SettingsRun.exitTestIteration();
            return;
        }

        // Información sobre cómo se hará la consulta
        if (hasCardNum) {
            Reporter.reportEvent(Reporter.MIC_INFO,
                    "Se consultará la tarjeta por número de tarjeta en AS400.");
        } else {
            Reporter.reportEvent(Reporter.MIC_INFO,
                    "No se especificó número de tarjeta; se realizará la consulta en AS400 por Tipo ID y Numero ID.");
        }

        // Si es Solo Compra o Compra marcada en Si -> monto obligatorio
        if (escAs400.equals("Solo Compra") || (compra != null && compra.equals("Si"))) {
            if (isEmpty(montoCompra)) {
                Reporter.reportEvent(Reporter.MIC_NOEXEC,
                        "Para realizar una compra se necesita tener un Monto Compra (campo obligatorio).");
                SettingsRun.exitTestIteration();
                return;
            }
        }
    }

    // 3) Flujo completo: validar campos necesarios
    if (!isEmpty(escAs400) && escAs400.equals("Flujo completo")) {
        // Campos obligatorios para flujo completo (según especificación)
        if (isEmpty(tipoID) || isEmpty(numeroID) || isEmpty(tipoProducto) || isEmpty(cupoSolicitado)
                || isEmpty(oficinaRad) || isEmpty(modalidadCredito) || isEmpty(tipoGarantia) || isEmpty(activar)
                || isEmpty(compra)) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC,
                    "En 'Flujo completo' faltan campos obligatorios. Revisar Tipo ID, Numero ID, Tipo Producto, Cupo Solicitado, Oficina Radicación, Modalidad Credito, Tipo Garantia, Activar y Compra.");
            SettingsRun.exitTestIteration();
            return;
        }

        // Si nombre o dirección están vacíos -> informar que se consultará Cliente 360
        if (isEmpty(nombre) || isEmpty(direccion)) {
            Reporter.reportEvent(Reporter.MIC_INFO,
                    "El archivo de Data no posee Nombre y/o Dirección; se realizará la consulta en Cliente 360.");
        }

        // Si compra es Si -> monto obligatorio
        if (compra.equals("Si") && isEmpty(montoCompra)) {
            Reporter.reportEvent(Reporter.MIC_NOEXEC,
                    "Para realizar una compra se necesita tener un Monto Compra (campo obligatorio).");
            SettingsRun.exitTestIteration();
            return;
        }
    }

    // 4) Validación general adicional: si Compra == "Si" en cualquier otro escenario, exigir monto
    if ((compra != null && compra.equals("Si")) && isEmpty(montoCompra)) {
        Reporter.reportEvent(Reporter.MIC_NOEXEC,
                "Compra marcada como 'Si' pero no se proporcionó Monto Compra. Campo obligatorio cuando Compra == 'Si'.");
        SettingsRun.exitTestIteration();
        return;
    }

    // Si llega aquí, los datos mínimos están OK para continuar
    Reporter.reportEvent(Reporter.MIC_INFO, "Validación de datos completada correctamente.");
}

// Helper simple (sin usar librerías extra)
private boolean isEmpty(String s) {
    return s == null || s.trim().isEmpty();
}
